{"version":3,"sources":["imgs/earth.svg","imgs/slovakiaIcon.svg","Nav.js","Covid/CovidTable.js","Covid/DougnatChart.js","Covid/CovidApp.js","Covid/CompareCislo.js","Covid/TabulkaMesta.js","Covid/CovidSK.js","Todo/Todo.js","Todo/HandleTodo.js","Todo/CompareCislo.js","Todo/TodoApp.js","App.js","index.js","imgs/coronaIcon.svg","imgs/wideArrow.svg"],"names":["module","exports","Nav","navStyle","color","className","onClick","window","location","href","style","to","alt","src","earthIcon","slovakiaIcon","CovidTable","props","useState","ikonka","setIkonka","sipkyDole","setSipkyDole","transition","marginBottom","marginLeft","setSipkaKontinenty","position","left","fontSize","setStyleForRollDown","zmenIkonku","key","myStyle2","transform","FormatNum","num","toString","replace","rollDownContintinents","background","type","id","onKeyUp","filter","tr","td","i","document","getElementById","value","toUpperCase","getElementsByTagName","length","textContent","innerText","indexOf","display","placeholder","sortBy","countriesData","map","item","country","width","cases","active","todayCases","deaths","fontWeight","todayDeaths","recovered","functionForWorld","textDecoration","totalTests","DougnatChart","data","labels","datasets","label","dataForGraph","backgroundColor","height","options","maintainAspectRatio","animation","duration","easing","CovidApp","mainData","setMainData","setCountriesData","direction","price_usd","state","setState","useEffect","HandleLoadData","HandleLoadData2","a","fetch","response","json","sort","b","parseFloat","numberTrans3","output","toFixed","coronaIcon","CompareCislo","sorting","stlpec","A","amount","B","JSON","parse","localStorage","getItem","infected_delta","infected","TabulkaMesta","tabulkaData","setDataForTable","setSorting","ShowHide","setShowHide","boolean","text","textPreZobrazenieObci","setTextPreZobrazenieObci","sipkaObce","setSipkaObce","handleSortObce","setItem","stringify","zeny","muzi","jednoData","females","males","jednaObec","index","title","CovidSK","dataSvk","setDataSvk","maxDate","setMaxDate","maxDateboolLean","setMaxDateboolLean","stav","styling","grafNegativneTesty","setGrafNegativneTesty","styleWideArrow","setStyleWideArrow","LoadData","negatTestyMoje","Object","keys","chart","Heading","keyframes","HomeHeader","styled","div","changeWideArrow","negatTesty","tested_chart","c","newRecovered","newDeaths","tested","lastDay","day","GetTheDay","handleData","districts","MaxInfected","wideArrow","day1","date","handleGraph1","MaxDaily","pom1","handleGraph2","Todo","todo","toggleTodo","time","month","slice","year","handleFormatTime","onChange","checked","complete","name","HandleTodo","todos","casSort","TodoApp","setTodos","todoNameRef","useRef","setCasSort","selectedDate","setSelectedDate","myStyle","setMyStyle","handleNumberTime","storedTodos","newTodos","find","ref","selected","dateFormat","isClearable","placeholderText","e","preventDefault","current","d","dateFullNumber","getFullYear","getMonth","getDate","prev","uuidV4","confirm","polyfill","require","App","basename","path","component","exact","ReactDOM","render"],"mappings":"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","file":"static/js/main.3aeb1c7c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/earth.cdc4522b.svg\";","module.exports = __webpack_public_path__ + \"static/media/slovakiaIcon.a29682dd.svg\";","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport './nav.css'\r\nimport earthIcon from \"./imgs/earth.svg\"\r\nimport slovakiaIcon from \"./imgs/slovakiaIcon.svg\"\r\n\r\nfunction Nav() {\r\n\r\n    let navStyle = {\r\n        color: 'white',\r\n    }\r\n\r\n    function doubleClickFC() {\r\n        window.location.href = \"#/Todo\"\r\n    }\r\n\r\n    return (\r\n        <nav className=\"navApp\" >\r\n            <div className=\"doubleClick\" onClick={doubleClickFC}></div>\r\n            <ul className=\"navLinks\">\r\n                <li>\r\n                    <Link style={navStyle} to='/Covid/CovidApp'>\r\n                        <div>\r\n                            <img alt=\"\" src={earthIcon} className=\"earthIcon\" />Covid vo svete\r\n                        </div>\r\n                    </Link>\r\n                </li>\r\n                <li>\r\n                    <Link style={navStyle} to='/Covid/CovidSK'>\r\n                        <div>\r\n                            <img alt=\"\" src={slovakiaIcon} className=\"svkIcon\" />Covid na Slovensku\r\n                        </div>\r\n                    </Link>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import React, { useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { FaSortAmountDown } from 'react-icons/fa';\r\nimport { IoIosArrowDown } from 'react-icons/io';\r\n\r\nfunction CovidTable(props) {\r\n    const [ikonka, setIkonka] = useState('cases')\r\n    const [sipkyDole, setSipkyDole] = useState(true)\r\n    const [sipkaKontinenty, setSipkaKontinenty] = useState({\r\n        transition: 'all .2s ease-in',\r\n        marginBottom: '-3px',\r\n        marginLeft: '3px',\r\n    })\r\n    const [styleForRollDown, setStyleForRollDown] = useState({\r\n        position: 'absolute',\r\n        left: '-1000px',\r\n        transition: 'all .2s ease-in',\r\n        fontSize: '15px',\r\n    })\r\n\r\n    function zmenIkonku(key) {\r\n        if (key === ikonka) {\r\n            setIkonka(key + \"2\")\r\n        }\r\n        else { setIkonka(key) }\r\n    }\r\n\r\n    const myStyle2 = {\r\n        transform: \"rotateX(180deg)\",\r\n    }\r\n\r\n\r\n    function myFunction() {\r\n        var input, filter, table, tr, td, i, txtValue;\r\n        input = document.getElementById(\"myInput\");\r\n        filter = input.value.toUpperCase();\r\n        table = document.getElementById(\"myTable\");\r\n        tr = table.getElementsByTagName(\"tr\");\r\n        for (i = 0; i < tr.length; i++) {\r\n            td = tr[i].getElementsByTagName(\"td\")[0];\r\n            if (td) {\r\n                txtValue = td.textContent || td.innerText;\r\n                if (txtValue.toUpperCase().indexOf(filter) > -1) {\r\n                    tr[i].style.display = \"\";\r\n                } else {\r\n                    tr[i].style.display = \"none\";\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function FormatNum(num) {\r\n        if (num) {\r\n            return (\r\n                num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \")\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    function rollDownContintinents() {\r\n        setSipkyDole(!sipkyDole)\r\n        if (sipkyDole) {\r\n            setSipkaKontinenty({\r\n                transform: \"rotate(180deg)\",\r\n                transition: 'all .2s ease-in',\r\n                marginBottom: '-3px',\r\n                marginLeft: '3px',\r\n            })\r\n            setStyleForRollDown({\r\n                background: 'rgb(234, 234, 234)',\r\n                fontSize: '15px',\r\n                transition: 'all .2s ease-in',\r\n            })\r\n        }\r\n        else {\r\n            setStyleForRollDown({\r\n                position: 'absolute',\r\n                left: '-1000px',\r\n                transition: 'all .2s ease-in',\r\n                fontSize: '15px',\r\n            })\r\n\r\n            setSipkaKontinenty({\r\n                transform: \"rotate(0deg)\",\r\n                transition: 'all .2s ease-in',\r\n                marginBottom: '-3px',\r\n                marginLeft: '3px',\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    function functionForWorld(item, id) {\r\n        return (<>\r\n            <tr key={id} style={{ background: 'rgb(234, 234, 234)' }} >\r\n                <td style={{ width: '100px' }} onClick={rollDownContintinents}>\r\n                    Celý svet <span >\r\n                        {/* <IoIosArrowDown style={sipkaKontinenty} /> */}\r\n                    </span>\r\n                </td>\r\n                <td>{FormatNum(item.cases)}</td>\r\n                <td>{FormatNum(item.active)}</td>\r\n                <td style={{ background: ' rgb(254, 255, 194, .4)' }}>+{FormatNum(item.todayCases)} </td>\r\n                <td>{FormatNum(item.deaths)}</td>\r\n                <td style={{ color: ' rgba(156, 20, 20, 0.849)', fontWeight: 'bold' }}>+{FormatNum(item.todayDeaths)} </td>\r\n                <td style={{ fontWeight: 'bold', color: 'green' }}>{FormatNum(item.recovered)}</td>\r\n            </tr>\r\n            {/* {props.countriesData.map((item, id) => (\r\n                item.country === 'Europe'\r\n                    || item.country === 'North America'\r\n                    || item.country === 'Asia'\r\n                    || item.country === 'Africa'\r\n                    || item.country === 'South America'\r\n                    || item.country === 'Oceania' ?\r\n                    <tr key={id} className=\"kontinenty\" style={styleForRollDown}  >\r\n                        <td style={{ width: '100px' }} className=\"kontinenty\">{item.country} </td>\r\n                        <td className=\"kontinenty\">{FormatNum(item.cases)}</td>\r\n                        <td className=\"kontinenty\">{FormatNum(item.active)}</td>\r\n                        <td style={{ background: ' rgb(254, 255, 194, .4)' }} className=\"kontinenty\">+{FormatNum(item.todayCases)} </td>\r\n                        <td className=\"kontinenty\">{FormatNum(item.deaths)}</td>\r\n                        <td style={{ color: ' rgba(156, 20, 20, 0.849)', fontWeight: 'bold' }} className=\"kontinenty\">+{FormatNum(item.todayDeaths)} </td>\r\n                        <td style={{ fontWeight: 'bold', color: 'green' }} className=\"kontinenty\">{FormatNum(item.recovered)}</td>\r\n                    </tr>\r\n                    : null\r\n            ))} */}\r\n\r\n        </>\r\n        )\r\n    }\r\n    function greenBackgroundforTR(active) {\r\n        if (active)\r\n            return null\r\n        else\r\n            return ({ background: 'rgb(190, 245, 204)' })\r\n    }\r\n    return (\r\n        <>\r\n            <input type=\"text\" id=\"myInput\" onKeyUp={myFunction} placeholder=\"Hľadať..\" className=\"inputSearch\" />\r\n            <div className=\"divTable\" >\r\n                <table id=\"myTable\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th onClick={() => (props.sortBy(`totalTests`), zmenIkonku(`totalTests`))} >\r\n                                Krajina\r\n                            {ikonka === 'totalTests'\r\n                                    ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                    : null\r\n                                }\r\n                                {ikonka === 'totalTests2'\r\n                                    ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                    : null\r\n                                }\r\n                            </th>\r\n                            <th onClick={() => (props.sortBy('cases'), zmenIkonku('cases'))} >\r\n                                Počet nakazených\r\n                            {ikonka === 'cases'\r\n                                    ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                    : null\r\n                                }\r\n                                {ikonka === 'cases2'\r\n                                    ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                    : null\r\n                                }\r\n                            </th>\r\n                            <th onClick={() => (props.sortBy('active'), zmenIkonku('active'))} >\r\n                                Aktívne prípady\r\n                            {ikonka === 'active'\r\n                                    ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                    : null\r\n                                }\r\n                                {ikonka === 'active2'\r\n                                    ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                    : null\r\n                                }\r\n                            </th>\r\n                            <th onClick={() => (props.sortBy('todayCases'), zmenIkonku('todayCases'))} >\r\n                                Nové prípady\r\n                            {ikonka === 'todayCases'\r\n                                    ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                    : null\r\n                                }\r\n                                {ikonka === 'todayCases2'\r\n                                    ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                    : null\r\n                                }\r\n                            </th>\r\n                            <th onClick={() => (props.sortBy('deaths'), zmenIkonku('deaths'))} >\r\n                                Počet úmrtí\r\n                            {ikonka === 'deaths'\r\n                                    ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                    : null\r\n                                }\r\n                                {ikonka === 'deaths2'\r\n                                    ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                    : null\r\n                                }\r\n                            </th>\r\n                            <th onClick={() => (props.sortBy('todayDeaths'), zmenIkonku('todayDeaths'))} >\r\n                                Nové úmrtia\r\n                            {ikonka === 'todayDeaths'\r\n                                    ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                    : null\r\n                                }\r\n                                {ikonka === 'todayDeaths2'\r\n                                    ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                    : null\r\n                                }\r\n                            </th>\r\n                            <th onClick={() => (props.sortBy('recovered'), zmenIkonku('recovered'))} >\r\n                                Počet vyliečených\r\n                            {ikonka === 'recovered'\r\n                                    ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                    : null\r\n                                }\r\n                                {ikonka === 'recovered2'\r\n                                    ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                    : null\r\n                                }\r\n                            </th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {props.countriesData.map((item, id) => (\r\n                            item.country === 'World' ? functionForWorld(item, id) :\r\n                                // item.country === 'Europe'\r\n                                //     || item.country === 'North America'\r\n                                //     || item.country === 'Asia'\r\n                                //     || item.country === 'Africa'\r\n                                //     || item.country === 'South America'\r\n                                //     || item.country === 'Oceania'\r\n                                //     || item.country === 'Total:' ?\r\n                                <tr key={id} style={greenBackgroundforTR(item.active)}>\r\n                                    <td style={{ width: '100px' }}>\r\n                                        {item.country === 'Slovakia' ?\r\n                                            <div style={{ fontWeight: 'bold', textDecoration: 'underline' }}>\r\n                                                <Link to='/Covid/CovidSK'>{item.country}</Link>\r\n                                            </div>\r\n                                            : item.country\r\n                                        }\r\n                                        {item.totalTests > 0 ?\r\n                                            <div className=\"firstCase\">Počet testov: <div className=\"firstCaseNumber\">{FormatNum(item.totalTests)}</div></div>\r\n                                            : null}\r\n                                    </td>\r\n                                    <td>{FormatNum(item.cases)}</td>\r\n                                    <td>{FormatNum(item.active)} {item.active ? null : \"0 !!!\"}</td>\r\n                                    {item.todayCases > 0 ?\r\n                                        <td style={{ background: ' rgb(254, 255, 194)' }}>+{FormatNum(item.todayCases)} </td>\r\n                                        : <td></td>\r\n                                    }\r\n                                    <td>{FormatNum(item.deaths)}</td>\r\n                                    {item.todayDeaths > 0 ?\r\n                                        <td style={{ color: ' rgba(156, 20, 20, 0.849)', fontWeight: 'bold' }}>+{FormatNum(item.todayDeaths)} </td>\r\n                                        : <td></td>\r\n                                    }\r\n                                    <td style={{ fontWeight: 'bold', color: 'green' }}>{FormatNum(item.recovered)}</td>\r\n                                </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CovidTable","import React from 'react'\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport './css/csspreSvk.css'\r\nfunction DougnatChart(props) {\r\n    const data = {\r\n        labels: ['Nakazení', 'Vyliečení', 'Úmrtia'],\r\n        datasets: [{\r\n            label: '# of Votes',\r\n            data: props.dataForGraph,\r\n            backgroundColor: [\r\n                '#f85959',\r\n                '#17b978',\r\n                '#430d27',\r\n            ],\r\n        }]\r\n    }\r\n\r\n    // const data = {\r\n    //     labels: props.dataForGraph.labels,\r\n    //     datasets: [{\r\n    //         label: '# of Votes',\r\n    //         data: props.dataForGraph.data,\r\n    //         backgroundColor: props.dataForGraph.backgroundColor,\r\n    //     }]\r\n    // }\r\n\r\n    // const data = {\r\n    //     labels: ['Nakazení', 'Vyliečení'],\r\n    //     datasets: [{\r\n    //         label: '# of Votes',\r\n    //         data: [10, 20],\r\n    //         backgroundColor: ['red', 'blue'],\r\n    //     }]\r\n    // }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"dougnut\">\r\n                <Doughnut\r\n                    data={data}\r\n                    height={300}\r\n                    options={{\r\n                        maintainAspectRatio: false,\r\n                        animation: { duration: 2000, easing: 'easeOutQuint' }\r\n                    }}\r\n                />\r\n\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DougnatChart\r\n","import React, { useState, useEffect } from 'react'\r\nimport './css/covid.css'\r\nimport './css/covidDesign.css'\r\nimport { Link } from 'react-router-dom'\r\nimport coronaIcon from \"../imgs/coronaIcon.svg\"\r\nimport CovidTable from \"./CovidTable\"\r\nimport { GiDeathSkull } from \"react-icons/gi\";\r\nimport { AiOutlineDoubleRight } from \"react-icons/ai\";\r\n// import { GiHealthNormal } from \"react-icons/gi\";\r\nimport { FaPlusCircle } from \"react-icons/fa\";\r\nimport DougnatChart from \"./DougnatChart\"\r\nimport DataGrid from \"./DataGrid\"\r\n\r\nfunction CovidApp() {\r\n    // const url = 'https://covid19.mathdro.id/api/'\r\n    const url = 'https://coronavirus-19-api.herokuapp.com/all'\r\n    // const svk = 'https://covid19.mathdro.id/api/countries/slovakia'\r\n    const [mainData, setMainData] = useState([])\r\n\r\n\r\n    const urlCountries = 'https://coronavirus-19-api.herokuapp.com/countries'\r\n    const [countriesData, setCountriesData] = useState([])\r\n    const [state, setState] = useState({\r\n        countriesData: countriesData,\r\n        direction: {\r\n            price_usd: 'asc',\r\n        }\r\n    })\r\n\r\n\r\n    useEffect(() => {\r\n        HandleLoadData()\r\n        HandleLoadData2()\r\n    }, [])\r\n\r\n    const HandleLoadData = async () => {\r\n        const response = await fetch(url)\r\n        const data = await response.json()\r\n        setMainData([data.cases, data.recovered, data.deaths])\r\n\r\n        // var fs = require('fs');\r\n\r\n        // fs.writeFile('mynewfile3.txt', 'This is my text', function (err) {\r\n        //     if (err) throw err;\r\n        //     console.log('Replaced!');\r\n        // });\r\n\r\n    }\r\n\r\n    const HandleLoadData2 = async () => {\r\n        const response = await fetch(urlCountries)\r\n        const data = await response.json()\r\n        setCountriesData(data)\r\n\r\n        setState({\r\n            data: data.sort((a, b) => (\r\n                state.direction['cases'] === 'asc'\r\n                    ? parseFloat(a['cases']) - parseFloat(b['cases'])\r\n                    : parseFloat(b['cases']) - parseFloat(a['cases'])\r\n            )),\r\n            direction: {\r\n                ['cases']: state.direction['cases'] === 'asc'\r\n                    ? 'desc'\r\n                    : 'asc'\r\n            }\r\n        })\r\n    }\r\n\r\n    function FormatNum(num) {\r\n        if (num) {\r\n            return (\r\n                num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \")\r\n            )\r\n        }\r\n    }\r\n\r\n    function numberTrans3(a, b) {\r\n        if (a) {\r\n            let output = b / (a / 100)\r\n            output = b / (a / 100)\r\n            output = output.toFixed(3)\r\n            output = output.toString()\r\n            output = output.replace(\".\", \",\")\r\n            return (\r\n                <div className=\"aktiveNakazenych\">\r\n                    <span>V percentách:</span> {output}%\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    function sortBy(key) {\r\n        setState({\r\n            countriesData: countriesData.sort((a, b) => (\r\n                state.direction[key] === 'asc'\r\n                    ? parseFloat(a[key]) - parseFloat(b[key])\r\n                    : parseFloat(b[key]) - parseFloat(a[key])\r\n            )),\r\n            direction: {\r\n                [key]: state.direction[key] === 'asc'\r\n                    ? 'desc'\r\n                    : 'asc'\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"covidApp\">\r\n            <div className=\"cardsDiv\">\r\n                <div className=\"cards\">\r\n                    <div className=\"topCard\">\r\n                        <div className=\"obrDiv\">\r\n                            <div className=\"circle\">\r\n                                <img alt=\"\" src={coronaIcon} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"textCard\"> Počet nakazených</div>\r\n                    </div>\r\n                    <div className=\"mainText\">\r\n                        {FormatNum(mainData[0])}\r\n                        <div className=\"aktiveNakazenych\">\r\n                            <span>Počet aktívnych prípadov:</span> {FormatNum(mainData[0] - mainData[1] - mainData[2])}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <div className=\"cards\">\r\n                    <div className=\"topCard\">\r\n                        <div className=\"obrDiv\">\r\n                            <div className=\"circle HP\">\r\n                                <FaPlusCircle color={\"green\"} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"textCard\"> Počet vyliečených</div>\r\n                    </div>\r\n                    <div className=\"mainText\">\r\n                        {FormatNum(mainData[1])}\r\n                        {numberTrans3(mainData[0], mainData[1])}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"cards\">\r\n                    <div className=\"topCard\">\r\n                        <div className=\"obrDiv\">\r\n                            <div className=\"circle skull\">\r\n                                <GiDeathSkull color={\"white\"} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"textCard\"> Počet úmrtí</div>\r\n                    </div>\r\n                    <div className=\"mainText\">\r\n                        {FormatNum(mainData[2])}\r\n                        {numberTrans3(mainData[0], mainData[2])}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n            {/* <DataGrid /> */}\r\n\r\n            <DougnatChart dataForGraph={mainData} />\r\n            <br></br>\r\n            <br></br>\r\n\r\n            {/* <div className=\"slovenskeUdaje\"><Link to='/Covid/CovidSK'>Slovenské údaje</Link></div> */}\r\n            <div className=\"SlovenskeUdajeLink\" ><Link to='/Covid/CovidSK'>Slovenské údaje <AiOutlineDoubleRight className=\"iconSlovUdaje\" /></Link></div>\r\n\r\n            <br></br><br></br>\r\n\r\n            <CovidTable countriesData={countriesData} sortBy={sortBy} />\r\n\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default CovidApp\r\n","function CompareCislo(data, sorting, stlpec) {\r\n    // const [stlpcek, setStlpcek] = useState(stlpec)\r\n    // if (stlpec === \"females\") {\r\n    //     data.sort(compareNum)\r\n    //     function compareNum(b, a) {\r\n    //         const A = a.females\r\n    //         const B = b.females\r\n    //         if (sorting) {\r\n    //             if (A > B) {\r\n    //                 return 1\r\n    //             } else if (A < B) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //         else {\r\n    //             if (B > A) {\r\n    //                 return 1\r\n    //             } else if (B < A) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //     }\r\n    // }\r\n    // else if (stlpec === \"males\") {\r\n    //     data.sort(compareNum)\r\n    //     function compareNum(b, a) {\r\n    //         const A = a.males\r\n    //         const B = b.males\r\n    //         if (sorting) {\r\n    //             if (A > B) {\r\n    //                 return 1\r\n    //             } else if (A < B) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //         else {\r\n    //             if (B > A) {\r\n    //                 return 1\r\n    //             } else if (B < A) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //     }\r\n    // }\r\n    if (stlpec === \"amountRecovered\") {\r\n        data.sort(compareNum)\r\n        function compareNum(b, a) {\r\n            const A = a.amount.recovered\r\n            const B = b.amount.recovered\r\n            if (sorting) {\r\n                if (A > B) {\r\n                    return 1\r\n                } else if (A < B) {\r\n                    return -1\r\n                } else return 0;\r\n            }\r\n            else {\r\n                if (B > A) {\r\n                    return 1\r\n                } else if (B < A) {\r\n                    return -1\r\n                } else return 0;\r\n            }\r\n        }\r\n    }\r\n    // else if (stlpec === \"amountDelta\") {\r\n    //     data.sort(compareNum)\r\n    //     function compareNum(b, a) {\r\n    //         const A = a.amount.infected_delta\r\n    //         const B = b.amount.infected_delta\r\n    //         if (sorting) {\r\n    //             if (A > B) {\r\n    //                 return 1\r\n    //             } else if (A < B) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //         else {\r\n    //             if (B > A) {\r\n    //                 return 1\r\n    //             } else if (B < A) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //     }\r\n    // }\r\n    // else {\r\n    //     data.sort(compareNum)\r\n    //     function compareNum(a, b) {\r\n    //         const A = a.amount.infected\r\n    //         const B = b.amount.infected\r\n    //         if (sorting) {\r\n    //             if (A > B) {\r\n    //                 return 1\r\n    //             } else if (A < B) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //         else {\r\n    //             if (B > A) {\r\n    //                 return 1\r\n    //             } else if (B < A) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //     }\r\n    // }\r\n    else {\r\n        if (JSON.parse(localStorage.getItem(\"zoradenieLocalStorage\")) === \"amountDelta\") {\r\n            data.sort(compareNum)\r\n            function compareNum(a, b) {\r\n                const A = a.amount.infected_delta\r\n                const B = b.amount.infected_delta\r\n                if (sorting) {\r\n                    if (A > B) {\r\n                        return 1\r\n                    } else if (A < B) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n                else {\r\n                    if (B > A) {\r\n                        return 1\r\n                    } else if (B < A) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n            }\r\n        }\r\n        else if (JSON.parse(localStorage.getItem(\"zoradenieLocalStorage\")) === \"amountInfected\") {\r\n            data.sort(compareNum)\r\n            function compareNum(a, b) {\r\n                const A = a.amount.infected\r\n                const B = b.amount.infected\r\n                if (sorting) {\r\n                    if (A > B) {\r\n                        return 1\r\n                    } else if (A < B) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n                else {\r\n                    if (B > A) {\r\n                        return 1\r\n                    } else if (B < A) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        else {\r\n            data.sort(compareNum)\r\n            function compareNum(a, b) {\r\n                const A = a.amount.infected\r\n                const B = b.amount.infected\r\n                if (sorting) {\r\n                    if (A > B) {\r\n                        return 1\r\n                    } else if (A < B) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n                else {\r\n                    if (B > A) {\r\n                        return 1\r\n                    } else if (B < A) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n}\r\n\r\nexport default CompareCislo ","import React, { useState, useEffect } from 'react'\r\nimport './css/tabulkaMesta.css'\r\nimport CompareCislo from './CompareCislo'\r\nimport { IoIosArrowDown } from 'react-icons/io';\r\n// import DougnatChart from \"./DougnatChart\"\r\n\r\nconst LOCAL_STORAGE_KEY = 'zoradenieLocalStorage'\r\n\r\n\r\nfunction TabulkaMesta(props) {\r\n    const data = props.tabulkaData\r\n    // const lastDay = props.tabulkaData.tested_chart[Object.keys(props.tested_chart).length - 1].day\r\n    const [dataForTable, setDataForTable] = useState({})\r\n    const [sorting, setSorting] = useState(false)\r\n    const [ShowHide, setShowHide] = useState({\r\n        display: 'none'\r\n    })\r\n    const [textPreZobrazenieObci, setTextPreZobrazenieObci] = useState({\r\n        boolean: true,\r\n        text: \"Zobraziť údaje o jedntlivých obciach\"\r\n    })\r\n    const [sipkaObce, setSipkaObce] = useState({\r\n        transition: 'all .2s ease-in',\r\n        marginBottom: '-3px',\r\n        marginLeft: '3px',\r\n    })\r\n\r\n\r\n\r\n    // const [sorting, setSorting] = useState(false)\r\n    // console.log(props.tabulkaData)\r\n    // console.log(props.tabulkaData)\r\n    // const [dataTabulka, setDataTabulka] = useState(props.tabulkaData)\r\n    // const [state, setState] = useState({\r\n    //     dataTabulka: dataTabulka,\r\n    //     direction: {\r\n    //         price_usd: 'asc',\r\n    //     }\r\n    // })\r\n\r\n    useEffect(() => {\r\n        setSorting(!sorting)\r\n        CompareCislo(data, sorting, \"stlpec\")\r\n        let zeny = 0;\r\n        let muzi = 0;\r\n        data.map(jednoData => {\r\n            zeny = zeny + jednoData.females\r\n            muzi = muzi + jednoData.males\r\n        })\r\n        setDataForTable({\r\n            labels: [\"Ženy\", \"Muži\"],\r\n            data: [zeny, muzi],\r\n            backgroundColor: [\"red\", \"blue\"]\r\n        })\r\n    }, [])\r\n    // useEffect(() => {\r\n    //     setState({\r\n    //         dataTabulka: dataTabulka.sort((a, b) => (\r\n    //             state.direction['cases'] === 'asc'\r\n    //                 ? parseFloat(a['cases']) - parseFloat(b['cases'])\r\n    //                 : parseFloat(b['cases']) - parseFloat(a['cases'])\r\n    //         )),\r\n    //         direction: {\r\n    //             ['cases']: state.direction['cases'] === 'asc'\r\n    //                 ? 'desc'\r\n    //                 : 'asc'\r\n    //         }\r\n    //     })\r\n    // }, [])\r\n\r\n\r\n    // function sortBy(key) {\r\n    //     setState({\r\n    //         dataTabulka: dataTabulka.sort((a, b) => (\r\n    //             state.direction[key] === 'asc'\r\n    //                 ? parseFloat(a[key]) - parseFloat(b[key])\r\n    //                 : parseFloat(b[key]) - parseFloat(a[key])\r\n    //         )),\r\n    //         direction: {\r\n    //             [key]: state.direction[key] === 'asc'\r\n    //                 ? 'desc'\r\n    //                 : 'asc'\r\n    //         }\r\n    //     })\r\n    // }\r\n\r\n    function handleSortObce(stlpec) {\r\n        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(stlpec))\r\n\r\n        // const storedZoradenie = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY))\r\n        // if (storedZoradenie) console.log(storedZoradenie)\r\n\r\n\r\n        setSorting(!sorting)\r\n        CompareCislo(data, sorting, stlpec)\r\n    }\r\n\r\n    function zmenitText() {\r\n        if (textPreZobrazenieObci.boolean) {\r\n            setTextPreZobrazenieObci({\r\n                boolean: !textPreZobrazenieObci.boolean,\r\n                text: \"Schovať údaje o jedntlivých obciach\"\r\n            })\r\n            setShowHide({\r\n                display: 'flex',\r\n            })\r\n            setSipkaObce({\r\n                transform: \"rotateX(180deg)\",\r\n                transition: 'all .2s ease-in',\r\n                marginBottom: '-3px',\r\n                marginLeft: '3px',\r\n            })\r\n        }\r\n        else {\r\n            setTextPreZobrazenieObci({\r\n                boolean: !textPreZobrazenieObci.boolean,\r\n                text: \"Zobraziť údaje o jedntlivých obciach\"\r\n            })\r\n            setShowHide({\r\n                display: 'none',\r\n            })\r\n            setSipkaObce({\r\n                transform: \"rotateX(0deg)\",\r\n                transition: 'all .2s ease-in',\r\n                marginBottom: '-3px',\r\n                marginLeft: '3px',\r\n            })\r\n        }\r\n    }\r\n\r\n    function searchInputMesta() {\r\n        var input, filter, table, tr, td, i, txtValue;\r\n        input = document.getElementById(\"myInput\");\r\n        filter = input.value.toUpperCase();\r\n        table = document.getElementById(\"myTable\");\r\n        tr = table.getElementsByTagName(\"tr\");\r\n        for (i = 0; i < tr.length; i++) {\r\n            td = tr[i].getElementsByTagName(\"td\")[0];\r\n            if (td) {\r\n                txtValue = td.textContent || td.innerText;\r\n                if (txtValue.toUpperCase().indexOf(filter) > -1) {\r\n                    tr[i].style.display = \"\";\r\n                } else {\r\n                    tr[i].style.display = \"none\";\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"textPreZObrazenieTabulky\" onClick={zmenitText}>{textPreZobrazenieObci.text} <IoIosArrowDown style={sipkaObce} /></div>\r\n\r\n\r\n\r\n            <div style={ShowHide} className=\"tabulkaOkrajDivMain\">\r\n\r\n                <br></br>\r\n                <input type=\"text\" id=\"myInput\" onKeyUp={searchInputMesta} placeholder=\"Hľadať..\" className=\"inputSearch\" />\r\n                <div className=\"tabulkaMesta\">\r\n\r\n                    <table id=\"myTable\">\r\n                        <thead>\r\n                            <tr >\r\n                                <th >Obec</th>\r\n                                <th onClick={() => handleSortObce('amountInfected')} >Počet nakazených</th>\r\n                                <th onClick={() => handleSortObce('amountDelta')} >Za posledný deň</th>\r\n                                {/* <th onClick={() => handleSortObce('amountRecovered')} >Počet vyliečených</th> */}\r\n                                {/* <th onClick={() => handleSortObce('females')} >Ženy</th> */}\r\n                                {/* <th onClick={() => handleSortObce('males')} >Muži</th> */}\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {data.map((jednaObec, index) => <>\r\n                                <tr key={index} >\r\n                                    <td>{jednaObec.title}</td>\r\n                                    <td>{jednaObec.amount.infected}</td>\r\n                                    <td style={{ color: 'red' }}>\r\n                                        {jednaObec.amount.infected_delta > 0 ?\r\n                                            \"+\" + jednaObec.amount.infected_delta\r\n                                            : null} </td>\r\n\r\n                                    {/* <td>{jednaObec.amount.infected}\r\n                                        <span className=\"plusPreObecInfected\">{jednaObec.amount.infected_delta > 0 ? \"+\" + jednaObec.amount.infected_delta : ''}</span>\r\n                                    </td> */}\r\n\r\n                                    {/* <td><span className=\"plusPreObecRecovered\">{jednaObec.amount.recovered}</span></td> */}\r\n                                    {/* <td>{jednaObec.females}</td> */}\r\n                                    {/* <td>{jednaObec.males}</td> */}\r\n                                </tr>\r\n                            </>\r\n                            )}\r\n                        </tbody>\r\n                        {/* <tfoot>\r\n                        <tr>\r\n                            <td>Sum</td>\r\n                            <td>$180</td>\r\n                        </tr>\r\n                    </tfoot> */}\r\n                    </table>\r\n\r\n                </div>\r\n                {/* <DougnatChart dataForGraph={dataForTable} /> */}\r\n                {/* {dataForTable ? <DougnatChart dataForGraph={dataForTable} /> : null} */}\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TabulkaMesta\r\n","import React, { useState, useEffect } from 'react'\r\n// import CountUp from 'react-countup'\r\nimport styled, { keyframes } from \"styled-components\";\r\nimport './css/covid.css'\r\n// import './tooltip.css'\r\nimport coronaIcon from \"../imgs/coronaIcon.svg\"\r\nimport wideArrow from \"../imgs/wideArrow.svg\"\r\nimport TabulkaMesta from \"./TabulkaMesta\"\r\nimport DataGrid from \"./DataGrid\"\r\n\r\n\r\n// import DougnatChart from \"./DougnatChart\"\r\n\r\nfunction CovidSK() {\r\n    const [dataSvk, setDataSvk] = useState()\r\n    const svk = 'https://mapa.covid.chat/map_data'\r\n    // const [tabulkaMestaData, setTabulkaMestaData] = useState([])\r\n    const [maxDate, setMaxDate] = useState()\r\n    const [maxDateboolLean, setMaxDateboolLean] = useState(false)\r\n    const [grafNegativneTesty, setGrafNegativneTesty] = useState({ stav: true, styling: { textDecoration: 'none' } })\r\n    const [styleWideArrow, setStyleWideArrow] = useState()\r\n    const [toolTip, setToolTip] = useState({ background: 'red' })\r\n\r\n\r\n    const [state, setState] = useState({\r\n        dataSvk: dataSvk,\r\n        direction: {\r\n            price_usd: 'asc',\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        LoadData()\r\n    }, [])\r\n\r\n    const negatTestyMoje = [83, 102, 50, 42, 120, 129, 118, 197, 228]\r\n\r\n    const LoadData = async () => {\r\n        const response = await fetch(svk)\r\n        const data = await response.json()\r\n\r\n        setMaxDate(Object.keys(data.chart).length - 25)\r\n\r\n        setDataSvk([data])\r\n        setState({\r\n            dataSvk: data.map.sort((a, b) => (\r\n                state.direction['cases'] === 'asc'\r\n                    ? parseFloat(a['cases']) - parseFloat(b['cases'])\r\n                    : parseFloat(b['cases']) - parseFloat(a['cases'])\r\n            )),\r\n            direction: {\r\n                ['cases']: state.direction['cases'] === 'asc'\r\n                    ? 'desc'\r\n                    : 'asc'\r\n            }\r\n        })\r\n    }\r\n\r\n    function handleData() {\r\n        let a = dataSvk[0].chart[Object.keys(dataSvk[0].tested_chart).length].recovered\r\n        let b = dataSvk[0].chart[Object.keys(dataSvk[0].tested_chart).length - 1].recovered\r\n        let c = a - b\r\n        let newRecovered = 0\r\n        if (c > 0) {\r\n            newRecovered = a - b\r\n        }\r\n\r\n        a = dataSvk[0].chart[Object.keys(dataSvk[0].tested_chart).length].deaths\r\n        b = dataSvk[0].chart[Object.keys(dataSvk[0].tested_chart).length - 1].deaths\r\n        c = a - b\r\n        let newDeaths = 0\r\n        if (c > 0) {\r\n            newDeaths = a - b\r\n        }\r\n\r\n\r\n        function GetTheDay() {\r\n            const lastDay = dataSvk[0].tested_chart[Object.keys(dataSvk[0].tested_chart).length - 1].day\r\n            if (lastDay === \"Pondelok\")\r\n                return \"pondelok\"\r\n            if (lastDay === \"Utorok\")\r\n                return \"utorok\"\r\n            if (lastDay === \"Streda\")\r\n                return \"stredu\"\r\n            if (lastDay === \"Štvrtok\")\r\n                return \"štvrtok\"\r\n            if (lastDay === \"Piatok\")\r\n                return \"piatok\"\r\n            if (lastDay === \"Sobota\")\r\n                return \"sobotu\"\r\n            else return \"nedeľu\"\r\n\r\n        }\r\n        return (\r\n            <div>\r\n                <div className=\"cardsDiv\">\r\n                    <div className=\"cards cardsSVK\">\r\n                        <div className=\"topCard\">\r\n                            <div className=\"obrDiv\">\r\n                                <div className=\"circle\">\r\n                                    <img alt=\"\" src={coronaIcon} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"textCard\"><b>Slovenské údaje</b></div>\r\n                        </div>\r\n                        <div className=\"mainTextSK\">\r\n                            Počet testovaných: {dataSvk[0].tested}<br />\r\n                                Z toho pozitívnych testov: {dataSvk[0].infected}<br />\r\n                            Počet aktívnych prípadov: <b>{dataSvk[0].active}</b><br />\r\n                                Počet vyliečených: <span style={{ color: \"green\" }}>{dataSvk[0].recovered}</span><br />\r\n                            {dataSvk[0].deaths > 0 ? <>Počet úmrtí: {dataSvk[0].deaths}<br /></>\r\n                                : null}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"cards cardsSVK\">\r\n                        <div className=\"topCard\"><div className=\"textCard\"><b>Údaje za {GetTheDay()}</b></div></div>\r\n                        <div className=\"mainTextSK\">\r\n                            Počet nových testovaných: <span>{dataSvk[0].tested_chart[Object.keys(dataSvk[0].tested_chart).length - 1].tested}</span><br />\r\n                                Počet negatívnych testov: <span>{dataSvk[0].tested_chart[Object.keys(dataSvk[0].tested_chart).length - 1].tested - dataSvk[0].tested_chart[Object.keys(dataSvk[0].tested_chart).length - 1].infected}</span><br />\r\n                                Počet pozitívnych testov: <span>+{dataSvk[0].tested_chart[Object.keys(dataSvk[0].tested_chart).length - 1].infected}</span>\r\n                            {\r\n                                newRecovered > 0 ?\r\n                                    <> <br />Počet nových vyliečených: {newRecovered}</>\r\n                                    : null\r\n                            }\r\n                            {\r\n                                newDeaths > 0 ?\r\n                                    <>  <br />Počet nových úmrtí: {newDeaths}</>\r\n                                    : null\r\n                            }\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    const Heading = keyframes`\r\n    0%{\r\n        height: 0%;\r\n      }\r\n      100%{\r\n        height: 100%;\r\n      }\r\n    `;\r\n\r\n    const HomeHeader = styled.div`\r\n    height: 100%;\r\n    animation: ${Heading} .7s;\r\n    bottom: 0;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-evenly;\r\n    `;\r\n\r\n    function changeWideArrow() {\r\n        if (!maxDateboolLean) {\r\n            setMaxDate(-1)\r\n            setStyleWideArrow({\r\n                transform: 'rotateY(180deg)',\r\n            })\r\n        }\r\n        else {\r\n            setMaxDate(Object.keys(dataSvk[0].chart).length - 25)\r\n            setStyleWideArrow({\r\n                transform: 'rotateY(0deg)',\r\n            })\r\n        }\r\n        // dataSvk\r\n        setMaxDateboolLean(!maxDateboolLean)\r\n    }\r\n\r\n    function handleGraphAktivnePripady() {\r\n        let maxAktivnychInfikovanych = 0\r\n        dataSvk[0].chart.map((day1, index) => {\r\n            if (maxAktivnychInfikovanych < (day1.infected - day1.recovered - day1.deaths))\r\n                maxAktivnychInfikovanych = (day1.infected - day1.recovered - day1.deaths)\r\n        })\r\n        const MaxInfected = 100 / maxAktivnychInfikovanych\r\n\r\n        function testHover() {\r\n            console.log(\"x\")\r\n            setToolTip({\r\n                background: 'blue'\r\n            })\r\n        }\r\n\r\n        function testLeave() {\r\n            console.log(\"xxxx\")\r\n            setToolTip({\r\n                background: 'red'\r\n            })\r\n        }\r\n        return (\r\n            <div className=\"outsideDivGraf\">\r\n                <h1>Aktívne prípady</h1>\r\n                <div className=\"test\" onClick={changeWideArrow} style={styleWideArrow}>\r\n                    <div className=\"wideArrow\">\r\n                        <img alt=\"\" src={wideArrow} />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"svkGraf\">\r\n                    {dataSvk[0].chart.map((day1, index) =>\r\n                        index > maxDate ?\r\n                            <HomeHeader key={index}>\r\n                                <div className=\"divInGraf\" style={toolTip}>{day1.infected}</div>\r\n                                <div onMouseOver={testHover} onMouseLeave={testLeave} className=\"stlpcePrvehoGrafu\" style={{ height: `calc(${MaxInfected * (day1.infected - day1.recovered - day1.deaths)}% )` }} >\r\n                                    <span className=\"CountPrvehoGrafu\" >{day1.infected - day1.recovered - day1.deaths}</span>\r\n                                    {maxDateboolLean ?\r\n                                        index % 2 == 0 ?\r\n                                            <div className=\"spanDate\">{day1.date}</div>\r\n                                            : null\r\n                                        : <div className=\"spanDate\">{day1.date}</div>}\r\n                                </div>\r\n                            </HomeHeader>\r\n                            : null)}\r\n                </div>\r\n                <div className=\"medzeraPodDatumomGraf1\"></div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function handleGraph1() {\r\n        const MaxInfected = 100 / dataSvk[0].chart[Object.keys(dataSvk[0].chart).length - 1].infected\r\n        return (\r\n            <div className=\"outsideDivGraf\">\r\n                <h1>Celkový prírastok nakazených</h1>\r\n                <div className=\"test\" onClick={changeWideArrow} style={styleWideArrow}>\r\n                    <div className=\"wideArrow\">\r\n                        <img alt=\"\" src={wideArrow} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"svkGraf\">\r\n                    {\r\n                        dataSvk[0].chart.map((day1, index) =>\r\n                            index > maxDate ?\r\n                                <HomeHeader key={index}>\r\n                                    <div className=\"stlpcePrvehoGrafu tooltip\" style={{ height: `calc(${MaxInfected * day1.infected}% )` }} >\r\n                                        <span className=\"CountPrvehoGrafu\" >{day1.infected}</span>\r\n                                        {dataSvk[0].tested_chart[index - 1]\r\n                                            ? <><span className=\"countupFirstRed\">+{dataSvk[0].tested_chart[index - 1].infected}</span>\r\n                                            </>\r\n                                            : <><span className=\"countupFirstRed\">+1</span>\r\n                                            </>}\r\n                                        {\r\n                                            maxDateboolLean ?\r\n                                                index % 2 == 0 ?\r\n                                                    <div className=\"spanDate\">{day1.date}</div>\r\n                                                    : null\r\n                                                : <div className=\"spanDate\">{day1.date}</div>\r\n                                        }\r\n                                    </div>\r\n                                </HomeHeader>\r\n                                : null\r\n                        )\r\n                    }\r\n                </div>\r\n                <div className=\"medzeraPodDatumomGraf1\"></div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function negatTesty() {\r\n        if (grafNegativneTesty.stav)\r\n            setGrafNegativneTesty({ stav: false, styling: { textDecoration: 'line-through' } })\r\n        else\r\n            setGrafNegativneTesty({ stav: true, styling: { textDecoration: 'none' } })\r\n    }\r\n\r\n    function handleGraph2() {\r\n        let MaxDaily = 0\r\n        if (grafNegativneTesty.stav) {\r\n            if (dataSvk) {\r\n                dataSvk[0].tested_chart.map(pom1 => {\r\n                    if (pom1.tested > MaxDaily) {\r\n                        MaxDaily = pom1.tested - pom1.infected\r\n                    }\r\n                })\r\n                MaxDaily = MaxDaily / 100\r\n            }\r\n        }\r\n        else {\r\n            if (dataSvk) {\r\n                dataSvk[0].tested_chart.map(pom1 => {\r\n                    if (pom1.infected > MaxDaily) {\r\n                        MaxDaily = pom1.infected\r\n                    }\r\n                })\r\n                MaxDaily = MaxDaily / 100\r\n            }\r\n        }\r\n        return (\r\n            <div className=\"outsideDivGraf\">\r\n                <h1>Denný prírastok negatívnych a pozitívnych testov</h1>\r\n                <div className=\"test\" onClick={changeWideArrow} style={styleWideArrow}>\r\n                    <div className=\"wideArrow\">\r\n                        <img alt=\"\" src={wideArrow} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"svkGraf\">\r\n                    {maxDate === -1 ?\r\n                        <HomeHeader >  {/* prvy stlpec pre druhy graf */}\r\n                            <div className=\"PozitivneTestyDruhyGraf\" style={{ height: `calc(${1 / MaxDaily}%)` }} >\r\n                                <div className=\"spanDate\">{\"06-03-2020\"}</div>\r\n                            </div>\r\n\r\n                            {grafNegativneTesty.stav ?\r\n                                <div className=\"Graf2Stlpce\" style={{ height: `calc(${306 / MaxDaily}%)` }} >\r\n                                    <span className=\"CountDruhehoGrafu\">306</span>\r\n                                    <span className=\"CountDruhehoGrafu nakazeniZaDen\">+1</span>\r\n                                </div>\r\n                                : <div className=\"Graf2Stlpce\" style={{ height: `calc(${1 / MaxDaily}%)` }} >\r\n                                    <span className=\"CountDruhehoGrafu druhyGrafJedenTypSltpca\">+1</span>\r\n                                </div>}\r\n                        </HomeHeader>\r\n                        : ''}\r\n\r\n                    {dataSvk[0].tested_chart.map((day1, index) =>\r\n                        index > maxDate - 1 ?\r\n                            <HomeHeader key={index}>\r\n                                {\r\n                                    <>\r\n                                        <div className=\"PozitivneTestyDruhyGraf\" style={{ height: `calc(${(day1.infected) / MaxDaily}% )` }} >\r\n                                            {/* <div className=\"spanDate\">{day1.date}</div> */}\r\n\r\n                                            {\r\n                                                maxDateboolLean ?\r\n                                                    index % 2 == 0 ?\r\n                                                        null\r\n                                                        : <div className=\"spanDate\">{day1.date}</div>\r\n                                                    : <div className=\"spanDate\">{day1.date}</div>\r\n                                            }\r\n\r\n\r\n                                            {!grafNegativneTesty.stav ?\r\n                                                <span className=\" CountDruhehoGrafu druhyGrafJedenTypSltpca\" >+{day1.infected}</span>\r\n                                                : null}\r\n                                        </div>\r\n                                        {\r\n                                            negatTestyMoje[index]\r\n                                                ? grafNegativneTesty.stav ?\r\n                                                    <div className=\"Graf2Stlpce\" style={{ height: `calc(${negatTestyMoje[index] / MaxDaily}% )` }} >\r\n                                                        {(negatTestyMoje[index] > 99) ? <>\r\n                                                            <span className=\"CountDruhehoGrafu\" style={{ marginLeft: '-2px' }}>{negatTestyMoje[index]}</span>\r\n                                                            <span className=\" CountDruhehoGrafu nakazeniZaDen\">{day1.infected}</span>\r\n                                                        </>\r\n                                                            : <>\r\n                                                                <span className=\"CountDruhehoGrafu\">{negatTestyMoje[index]}</span>\r\n                                                                <span className=\" CountDruhehoGrafu nakazeniZaDen\">+{day1.infected}</span>\r\n                                                            </>\r\n                                                        }\r\n                                                    </div>\r\n                                                    : null\r\n                                                : grafNegativneTesty.stav ?\r\n                                                    <div className=\"Graf2Stlpce\" style={{ height: `calc(${day1.tested / MaxDaily}%)` }} >\r\n                                                        <span className=\"CountDruhehoGrafu\">{day1.tested - day1.infected}</span>\r\n                                                        <span className=\" CountDruhehoGrafu nakazeniZaDen\">+{day1.infected}</span>\r\n                                                    </div>\r\n                                                    : null\r\n                                        }\r\n                                    </>\r\n                                }\r\n                            </HomeHeader>\r\n                            : null\r\n                    )}\r\n                </div>\r\n                <div className=\"vysvetlivkyPodGrafom\">\r\n                    <div style={grafNegativneTesty.styling} onClick={negatTesty}><div className=\"blue\" ></div>Počet negatívnych testov</div>\r\n                    <div><div className=\"red\"></div>Počet pozitívnych testov</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    function sortBy(key) {\r\n        setState({\r\n            dataSvk: dataSvk[0].map.sort((a, b) => (\r\n\r\n                state.direction[key] === 'asc'\r\n                    ? parseFloat(a[key]) - parseFloat(b[key])\r\n                    : <>{parseFloat(b[key]) - parseFloat(a[key])} </>\r\n            )),\r\n            direction: {\r\n                [key]: state.direction[key] === 'asc'\r\n                    ? 'desc'\r\n                    : 'asc'\r\n            }\r\n        })\r\n    }\r\n    return (\r\n        <div className=\"covidApp\">\r\n            {\r\n                dataSvk\r\n                    ? <>\r\n                        {handleData()}\r\n                        {/* <DataGrid data={dataSvk[0].map} /> */}\r\n\r\n                        <TabulkaMesta tabulkaData={dataSvk[0].districts} sortBy={sortBy} />\r\n                        {/* <div className=\"tooltip\">Hover over me\r\n                        <div className=\"tooltiptext\">Tooltip text</div>\r\n                        </div> */}\r\n                        {/* <DougnatChart /> */}\r\n\r\n                        {/* {handleGraphAktivnePripady()} */}\r\n\r\n                        {handleGraph1()}\r\n                        {handleGraph2()}\r\n                    </>\r\n                    : ''\r\n\r\n\r\n            }\r\n            <br></br><br></br><br></br><br></br>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default CovidSK\r\n","import React from 'react'\r\n\r\nfunction Todo({ todo, toggleTodo }) {\r\n\r\n    function handleTodoClick() {\r\n        toggleTodo(todo.id)\r\n    }\r\n    function handleTodoClick2() {\r\n    }\r\n\r\n    function handleFormatTime(time) {\r\n        var month = time.slice(-4, -2)\r\n        var year = time.slice(-8, -4)\r\n        var day = time.slice(-2)\r\n        return (day + \".\" + month + \".\" + year)\r\n    }\r\n    return (\r\n        <div onClick={handleTodoClick}>\r\n            <div className=\"todoList\">\r\n                <div className=\"naLavo\">{handleFormatTime(todo.time)}</div>\r\n                <input className=\"checkboX\" type=\"checkbox\" onChange={handleTodoClick2} checked={todo.complete} />\r\n                <div style={{ textDecoration: todo.complete ? 'line-through' : '' }}>{todo.name}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todo\r\n","import React from 'react'\r\nimport Todo from './Todo'\r\nexport default function HandleTodo({ todos, toggleTodo, time }) {\r\n    return (<>\r\n        {todos.map((todo) => {\r\n            return (\r\n                <Todo key={todo.id} todo={todo} toggleTodo={toggleTodo} time={time} />\r\n            )\r\n        })}\r\n    </>)\r\n}\r\n","function CompareCislo(todos, casSort) {\r\n    todos.sort(compareNum)\r\n    function compareNum(a, b) {\r\n        const A = a.time\r\n        const B = b.time\r\n        if (casSort) {\r\n            if (A > B) {\r\n                return 1\r\n            } else if (A < B) {\r\n                return -1\r\n            } else return 0;\r\n        }\r\n        else {\r\n            if (B > A) {\r\n                return 1\r\n            } else if (B < A) {\r\n                return -1\r\n            } else return 0;\r\n        }\r\n    }\r\n}\r\n\r\nexport default CompareCislo ","import React, { useState, useRef, useEffect } from 'react'\r\nimport uuidV4 from 'uuid/v4'\r\nimport './Todo.css'\r\nimport HandleTodo from './HandleTodo'\r\nimport CompareCislo from './CompareCislo'\r\nimport DatePicker from 'react-datepicker'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\n\r\nconst LOCAL_STORAGE_KEY = 'todoApp.todos'\r\n\r\n\r\nfunction TodoApp() {\r\n\r\n    const [todos, setTodos] = useState([])\r\n    const todoNameRef = useRef()\r\n    const [casSort, setCasSort] = useState(false)\r\n\r\n\r\n    // const useRef1 = useRef(0)\r\n    // const useRef2 = useRef(0)\r\n    // const useRef3 = useRef(0)\r\n    // const useRef4 = useRef(0)\r\n    // const useRef5 = useRef(0)\r\n    // const useRef6 = useRef(0)\r\n    // const useRef7 = useRef(0)\r\n    // const useRef8 = useRef(0)\r\n\r\n\r\n\r\n    const [selectedDate, setSelectedDate] = useState(null)\r\n    const [myStyle, setMyStyle] = useState({ display: 'none' })\r\n\r\n    useEffect(() => {\r\n        const storedTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY))\r\n        if (storedTodos) setTodos(storedTodos)\r\n        handleNumberTime()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos))\r\n    }, [todos])\r\n\r\n    function toggleTodo(id) {\r\n        const newTodos = [...todos]\r\n        const todo = newTodos.find(todo => todo.id === id)\r\n        todo.complete = !todo.complete\r\n        setTodos(newTodos)\r\n    }\r\n\r\n    function handleAddTodo(e) {\r\n        e.preventDefault()\r\n        const name = todoNameRef.current.value\r\n        if (selectedDate) {\r\n            var d = selectedDate\r\n            var dateFullNumber = d.getFullYear() + (\"0\" + (d.getMonth() + 1)).slice(-2) + (\"0\" + d.getDate()).slice(-2)\r\n        }\r\n\r\n        if (!name || !dateFullNumber) {\r\n            setMyStyle({ display: 'block' })\r\n        }\r\n        else {\r\n            setMyStyle({ display: 'none' })\r\n            setTodos(prev => {\r\n                return [...prev, { id: uuidV4(), name: name, complete: false, time: dateFullNumber }]\r\n            })\r\n            todoNameRef.current.value = null\r\n            setSelectedDate(null)\r\n        }\r\n\r\n\r\n    }\r\n\r\n    function handleClearTodos(e) {\r\n        e.preventDefault()\r\n        const newTodos = todos.filter(todo => !todo.complete)\r\n        setTodos(newTodos)\r\n    }\r\n\r\n    function handleRemoveAllTodos(e) {\r\n        e.preventDefault()\r\n\r\n        if (window.confirm('Are u sure?')) {\r\n            setTodos([])\r\n        }\r\n    }\r\n\r\n\r\n    function handleNumberTime() {\r\n        setCasSort(!casSort)\r\n        CompareCislo(todos, casSort)\r\n        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos))\r\n    }\r\n\r\n\r\n    function Priklad3(A1, A2, A3, A4, B1, B2, y1, y2) {\r\n        let A = [A1, A2, A3, A4]\r\n        let B = [B1, B2]\r\n        let y = [y1, y2]\r\n\r\n        // console.log(A1, A2, A3, A4, B1, B2, y1, y2)\r\n\r\n        console.log(\"Riaditelnost:\")\r\n        console.log(\"Riaditelnost:\")\r\n        let v11 = B[0]\r\n        let v12 = (A[0] * B[0]) + (A[1] * B[1])\r\n        let v21 = B[1]\r\n        let v22 = (A[2] * B[0]) + (A[3] * B[1])\r\n        console.log(v11, v12)\r\n        console.log(v21, v22)\r\n        let vysMatica = (v11 * v22) - (v12 * v21)\r\n        if (vysMatica === 0) {\r\n            console.log(\"nie je riaditelny, lebo Mc= \" + vysMatica + \" a nemoze sa rovnat 0!\")\r\n        }\r\n        else {\r\n            console.log(\"Je riaditelny, lebo Mc= \" + vysMatica + \" co je rozdielne od nuly\")\r\n        }\r\n\r\n\r\n        console.log(\"Pozorovatelnost:\")\r\n        console.log(\"Pozorovatelnost:\")\r\n\r\n        let Ca = [((y[0] * A[0]) + (y[1] * A[2])), ((y[0] * A[1]) + (y[1] * A[3]))]\r\n        let Mo = [y[0], y[1], Ca[0], Ca[1]]\r\n        let MoVys = (Mo[0] * Mo[3]) - (Mo[1] * Mo[2])\r\n        console.log(\"Mo je:\")\r\n        console.log(Mo[0], Mo[1])\r\n        console.log(Mo[2], Mo[3])\r\n        // console.log(\"Vysledok Mo matice je: \" + MoVys)\r\n\r\n        if (MoVys === 0) {\r\n            console.log(\"nie je pozorovatelny, lebo Mo= \" + MoVys + \" a nemoze sa rovnat 0!\")\r\n        }\r\n        else {\r\n            console.log(\"Je pozorovatelny, lebo Mo= \" + MoVys + \" co je rozdielne od nuly\")\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"TodoMain\">\r\n\r\n            <h1>Todo APP</h1>\r\n            <div className=\"todo\">\r\n\r\n                <HandleTodo todos={todos} toggleTodo={toggleTodo} />\r\n                <form className=\"\">\r\n                    <input placeholder=\"Pridať nové TODO\" className=\"inputTodo\" ref={todoNameRef} type=\"text\" />\r\n                    <div className=\"divForDatePicker\">\r\n                        <DatePicker style={{ width: '100%' }} className=\"datePicker\"\r\n                            selected={selectedDate}\r\n                            onChange={date => setSelectedDate(date)}\r\n                            dateFormat='dd/MM/yyyy'\r\n                            isClearable\r\n                            placeholderText=\"Dokedy\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"musisVyplnitObePolia\" style={myStyle}>musiš vyplniť obe polia</div>\r\n                    <button className=\"btn btn1\" onClick={handleAddTodo}>Pridať</button>\r\n                    <button className=\"btn btn2\" onClick={handleClearTodos}>Odstraniť hotové</button>\r\n                    <button className=\"btn btnDel\" onClick={handleRemoveAllTodos}>Odstraniť všetky</button>\r\n                    {/* <button className=\"btn btn2\" onClick={handleNumber}>Zoradiť podľa názvu</button> */}\r\n                    <button className=\"btn btn2\" style={{ width: '100%' }} onClick={handleNumberTime}>Zoradiť podľa dátumu</button>\r\n                    {/* <button className=\"btn btn1\" onClick={hadnleSortComplete}>Zoradiť podľa dokončenia</button> */}\r\n                </form>\r\n\r\n                {\r\n                    (todos.length > 0 && todos.filter(todo => !todo.complete).length !== 0)\r\n                        ? <div className=\"nesplnene\">{todos.filter(todo => !todo.complete).length} nesplnené</div>\r\n                        : <div className=\"nesplnene splnene\">Všetky todo splnené</div>\r\n                }\r\n            </div>\r\n\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoApp\r\n","import React from 'react';\nimport './App.css';\nimport Nav from './Nav';\n\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom'\nimport CovidApp from './Covid/CovidApp';\nimport CovidSK from './Covid/CovidSK';\nimport TodoApp from './Todo/TodoApp';\nimport { polyfill } from 'es6-promise'; polyfill();\nrequire('es6-promise').polyfill();\nrequire('isomorphic-fetch');\n\n\nfunction App() {\n\n\n  return (\n    <Router basename=\"/\">\n      <div className=\"App\">\n        <Nav />\n        <Switch>\n          <Route path=\"/\" component={CovidApp} exact />\n          <Route path=\"/Covid/CovidApp\" component={CovidApp} />\n          <Route path=\"/Covid/CovidSK\" component={CovidSK} />\n          <Route path=\"/Todo\" component={TodoApp} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n","module.exports = __webpack_public_path__ + \"static/media/coronaIcon.02ed3e1a.svg\";","module.exports = __webpack_public_path__ + \"static/media/wideArrow.d20604a8.svg\";"],"sourceRoot":""}