{"version":3,"sources":["imgs/earth.svg","imgs/slovakiaIcon.svg","Nav.js","Covid/FormatNumber.js","Covid/SvetTabulka.js","Covid/DougnatChart.js","Covid/CovidApp.js","Covid/CompareCislo.js","Covid/TabulkaMesta.js","Covid/CovidSK.js","Todo/Todo.js","Todo/HandleTodo.js","Todo/CompareCislo.js","Todo/TodoApp.js","App.js","index.js","imgs/coronaIcon.svg","imgs/wideArrow.svg"],"names":["module","exports","Nav","navStyle","color","className","onClick","window","location","href","style","to","alt","src","earthIcon","slovakiaIcon","FormatNumber","num","prop","toString","replace","SvetTabulka","props","useState","ikonka","setIkonka","setKontinent","zmenIkonku","key","myStyle2","transform","KontinentZmena","nazov","type","id","onKeyUp","filter","tr","td","i","document","getElementById","value","toUpperCase","getElementsByTagName","length","textContent","innerText","indexOf","display","placeholder","sortBy","htmlFor","DougnatChart","data","labels","datasets","label","dataForGraph","backgroundColor","height","options","maintainAspectRatio","animation","duration","easing","CovidApp","mainData","setMainData","doughnatData","setDoughnatData","countriesData","setCountriesData","direction","price_usd","state","setState","useEffect","HandleLoadData2","HandleLoadData1","a","fetch","response1","json","data1","cases","recovered","deaths","response","sort","b","parseFloat","numberTrans3","output","toFixed","coronaIcon","active","CompareCislo","sorting","stlpec","A","amount","B","JSON","parse","localStorage","getItem","infected_delta","infected","TabulkaMesta","tabulkaData","setSorting","ShowHide","setShowHide","boolean","text","textPreZobrazenieObci","setTextPreZobrazenieObci","transition","marginBottom","marginLeft","sipkaObce","setSipkaObce","handleSortObce","setItem","stringify","s","map","jednaObec","index","title","CovidSK","dataSvk","setDataSvk","maxDate","setMaxDate","maxDateboolLean","setMaxDateboolLean","stav","styling","textDecoration","grafNegativneTesty","setGrafNegativneTesty","styleWideArrow","setStyleWideArrow","Object","keys","chart","LoadData","negatTestyMoje","Heading","keyframes","HomeHeader","styled","div","changeWideArrow","negatTesty","tested_chart","c","newRecovered","newDeaths","tested","lastDay","day","GetTheDay","handleData","districts","maxAktivnychInfikovanych","day1","MaxInfected","wideArrow","date","handleGraphAktivnePripady","handleGraph1","MaxDaily","pom1","handleGraph2","Todo","todo","toggleTodo","time","month","slice","year","handleFormatTime","onChange","checked","complete","name","HandleTodo","todos","casSort","TodoApp","setTodos","todoNameRef","useRef","setCasSort","selectedDate","setSelectedDate","myStyle","setMyStyle","storedTodos","newTodos","find","ref","width","selected","dateFormat","isClearable","placeholderText","e","preventDefault","current","d","dateFullNumber","getFullYear","getMonth","getDate","prev","uuidV4","confirm","polyfill","require","App","basename","path","component","exact","ReactDOM","render"],"mappings":"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","file":"static/js/main.0cbc9fe7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/earth.cdc4522b.svg\";","module.exports = __webpack_public_path__ + \"static/media/slovakiaIcon.a29682dd.svg\";","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport './nav.css'\r\nimport earthIcon from \"./imgs/earth.svg\"\r\nimport slovakiaIcon from \"./imgs/slovakiaIcon.svg\"\r\n\r\nfunction Nav() {\r\n\r\n    let navStyle = {\r\n        color: 'white',\r\n    }\r\n\r\n    function doubleClickFC() {\r\n        window.location.href = \"#/Todo\"\r\n    }\r\n\r\n    return (\r\n        <nav className=\"navApp\" >\r\n            <div className=\"doubleClick\" onClick={doubleClickFC}></div>\r\n            <ul className=\"navLinks\">\r\n                <li>\r\n                    <Link style={navStyle} to='/Covid/CovidApp'>\r\n                        <div>\r\n                            <img alt=\"\" src={earthIcon} className=\"earthIcon\" />Covid vo svete\r\n                        </div>\r\n                    </Link>\r\n                </li>\r\n                <li>\r\n                    <Link style={navStyle} to='/Covid/CovidSK'>\r\n                        <div>\r\n                            <img alt=\"\" src={slovakiaIcon} className=\"svkIcon\" />Covid na Slovensku\r\n                        </div>\r\n                    </Link>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","function FormatNumber(num) {\r\n    if (num) {\r\n        return (\r\n            num.prop.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \")\r\n        )\r\n    }\r\n    else { return null }\r\n\r\n}\r\n\r\nexport default FormatNumber\r\n","import React, { useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { FaSortAmountDown } from 'react-icons/fa';\r\nimport PrvyRiadokTabulky from './PrvyRiadokTabulky';\r\nimport FormatNumber from './FormatNumber'\r\nimport './css/TabulkaSvet.css'\r\n\r\n\r\nfunction SvetTabulka(props) {\r\n    const [ikonka, setIkonka] = useState('cases')\r\n    const [kontinent, setKontinent] = useState(\"Svet\")\r\n\r\n\r\n    function zmenIkonku(key) {\r\n        if (key === ikonka) {\r\n            setIkonka(key + \"2\")\r\n        }\r\n        else { setIkonka(key) }\r\n    }\r\n\r\n    const myStyle2 = {\r\n        transform: \"rotateX(180deg)\",\r\n    }\r\n\r\n\r\n    // useEffect(() => {\r\n    //     axios.get(`https://disease.sh/v2/continents`)\r\n    //         .then(res => {\r\n    //             setDataKontinenty([res.data])\r\n    //             // console.log(res.data)\r\n    //         })\r\n\r\n\r\n    // }, [])\r\n\r\n\r\n\r\n    function myFunction() {\r\n        var input, filter, table, tr, td, i, txtValue;\r\n        input = document.getElementById(\"myInput\");\r\n        filter = input.value.toUpperCase();\r\n        table = document.getElementById(\"myTable\");\r\n        tr = table.getElementsByTagName(\"tr\");\r\n        for (i = 0; i < tr.length; i++) {\r\n            td = tr[i].getElementsByTagName(\"td\")[0];\r\n            if (td) {\r\n                txtValue = td.textContent || td.innerText;\r\n                if (txtValue.toUpperCase().indexOf(filter) > -1) {\r\n                    tr[i].style.display = \"\";\r\n                } else {\r\n                    tr[i].style.display = \"none\";\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // function rollDownContintinents() {\r\n    //     setSipkyDole(!sipkyDole)\r\n    //     if (sipkyDole) {\r\n    //         setSipkaKontinenty({\r\n    //             transform: \"rotate(180deg)\",\r\n    //             transition: 'all .2s ease-in',\r\n    //             marginBottom: '-3px',\r\n    //             marginLeft: '3px',\r\n    //         })\r\n    //         setStyleForRollDown({\r\n    //             background: 'rgb(234, 234, 234)',\r\n    //             fontSize: '15px',\r\n    //             transition: 'all .2s ease-in',\r\n    //         })\r\n    //     }\r\n    //     else {\r\n    //         setStyleForRollDown({\r\n    //             position: 'absolute',\r\n    //             left: '-1000px',\r\n    //             transition: 'all .2s ease-in',\r\n    //             fontSize: '15px',\r\n    //         })\r\n\r\n    //         setSipkaKontinenty({\r\n    //             transform: \"rotate(0deg)\",\r\n    //             transition: 'all .2s ease-in',\r\n    //             marginBottom: '-3px',\r\n    //             marginLeft: '3px',\r\n    //         })\r\n    //     }\r\n    // }\r\n\r\n    // function functionForWorld(id) {\r\n    //     return (<>\r\n    //         <tr key={id} style={{ background: 'rgb(234, 234, 234)' }} >\r\n    //             <td style={{ width: '100px' }} onClick={rollDownContintinents}>\r\n    //                 Celý svet<span >\r\n    //                 </span>\r\n    //             </td>\r\n    //             {props ? <>\r\n    //                 <td>{FormatNum(props.mainData[0].cases)}</td>\r\n    //                 <td>{FormatNum(props.mainData[0].active)}</td>\r\n    //                 <td style={{ background: ' rgb(254, 255, 194, .4)' }}>+{FormatNum(props.mainData[0].todayCases)} </td>\r\n    //                 <td>{FormatNum(props.mainData[0].deaths)}</td>\r\n    //                 <td style={{ color: ' rgba(156, 20, 20, 0.849)', fontWeight: 'bold' }}>+{FormatNum(props.mainData[0].todayDeaths)} </td>\r\n    //                 <td style={{ fontWeight: 'bold', color: 'green' }}>{FormatNum(props.mainData[0].recovered)}</td>\r\n    //             </>\r\n    //                 : ''}\r\n    //         </tr>\r\n    //     </>\r\n    //     )\r\n    // }\r\n    function greenBackgroundforTR(active) {\r\n        if (active)\r\n            return null\r\n        else\r\n            return ({ background: 'rgb(190, 245, 204)' })\r\n    }\r\n\r\n    const KontinentZmena = (nazov) => {\r\n        setKontinent(nazov)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <input type=\"text\" id=\"myInput\" onKeyUp={myFunction} placeholder=\"Hľadať..\" className=\"inputSearch\" />\r\n            <div className=\"kontinenty\">\r\n                <button onClick={() => KontinentZmena(\"Svet\")}>\r\n\r\n                    Svet\r\n                </button>\r\n                <button onClick={() => KontinentZmena(\"Europe\")}>\r\n                    Európa\r\n                </button>\r\n                <button onClick={() => KontinentZmena(\"North America\")}>\r\n                    Severná Amerika\r\n                </button>\r\n                <button onClick={() => KontinentZmena(\"Asia\")}>\r\n                    Ázia\r\n                </button>\r\n                <button onClick={() => KontinentZmena(\"South America\")}>\r\n                    Južná Amerika\r\n                </button>\r\n                <button onClick={() => KontinentZmena(\"Africa\")}>\r\n                    Afrika\r\n                </button>\r\n                <button onClick={() => KontinentZmena(\"Australia/Oceania\")}>\r\n                    Austrália/Oceánia\r\n                </button>\r\n            </div>\r\n            <div className=\"divTable\" >\r\n                <table id=\"myTable\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th onClick={() => (props.sortBy(\"tests\") || zmenIkonku(\"tests\"))} >\r\n                                Krajina\r\n                            {ikonka === \"tests\"\r\n                                    ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                    : null\r\n                                }\r\n                                {ikonka === \"tests2\"\r\n                                    ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                    : null\r\n                                }\r\n                            </th>\r\n                            <th onClick={() => (props.sortBy('cases') || zmenIkonku('cases'))} >\r\n                                Počet nakazených\r\n                            {ikonka === \"cases\"\r\n                                    ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                    : null\r\n                                }\r\n                                {ikonka === \"cases2\"\r\n                                    ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                    : null\r\n                                }\r\n                            </th>\r\n                            <th onClick={() => (props.sortBy(\"active\") || zmenIkonku(\"active\"))} >\r\n                                Aktívne prípady\r\n                            {ikonka === \"active\"\r\n                                    ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                    : null\r\n                                }\r\n                                {ikonka === \"active2\"\r\n                                    ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                    : null\r\n                                }\r\n                            </th>\r\n                            <th onClick={() => (props.sortBy(\"todayCases\") || zmenIkonku(\"todayCases\"))} >\r\n                                Nové prípady\r\n                            {ikonka === \"todayCases\"\r\n                                    ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                    : null\r\n                                }\r\n                                {ikonka === \"todayCases2\"\r\n                                    ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                    : null\r\n                                }\r\n                            </th>\r\n                            <th onClick={() => (props.sortBy(\"deaths\") || zmenIkonku(\"deaths\"))} >\r\n                                Počet úmrtí\r\n                            {ikonka === \"deaths\"\r\n                                    ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                    : null\r\n                                }\r\n                                {ikonka === \"deaths2\"\r\n                                    ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                    : null\r\n                                }\r\n                            </th>\r\n                            <th onClick={() => (props.sortBy(\"todayDeaths\") || zmenIkonku(\"todayDeaths\"))} >\r\n                                Nové úmrtia\r\n                            {ikonka === \"todayDeaths\"\r\n                                    ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                    : null\r\n                                }\r\n                                {ikonka === \"todayDeaths2\"\r\n                                    ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                    : null\r\n                                }\r\n                            </th>\r\n                            <th onClick={() => (props.sortBy(\"recovered\") || zmenIkonku(\"recovered\"))} >\r\n                                Počet vyliečených\r\n                            {ikonka === \"recovered\"\r\n                                    ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                    : null\r\n                                }\r\n                                {ikonka === \"recovered2\"\r\n                                    ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                    : null\r\n                                }\r\n                            </th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n\r\n                        {/* <PrvyRiadokTabulky kontinent={kontinent} mainData={props.mainData} /> */}\r\n                        {/* \r\n                        {kontinent === \"Svet\" ?\r\n                            <>\r\n                                {props.countriesData.map((item, id) => (\r\n                                    <tr key={id} style={greenBackgroundforTR(item.active)}>\r\n                                        <td style={{ width: '100px' }}>{item.country}\r\n                                            {item.tests > 0 ?\r\n                                                <div className=\"firstCase\">Počet testov:\r\n                                        <div className=\"firstCaseNumber\">\r\n                                                        <FormatNumber prop={item.tests} />\r\n                                                    </div>\r\n                                                </div>\r\n                                                : null}\r\n                                        </td>\r\n                                        <td><FormatNumber prop={item.cases} /></td>\r\n                                        <td>{item.active ? <FormatNumber prop={item.active} /> : \"0\"}</td>\r\n\r\n                                        {item.todayCases > 0 ?\r\n                                            <td style={{ background: ' rgb(254, 255, 194)' }}>+<FormatNumber prop={item.todayCases} /> </td>\r\n                                            : <td></td>\r\n                                        }\r\n                                        <td><FormatNumber prop={item.deaths} /></td>\r\n                                        {item.todayDeaths > 0 ?\r\n                                            <td style={{ color: ' rgba(156, 20, 20, 0.849)', fontWeight: 'bold' }}>+<FormatNumber prop={item.todayDeaths} /> </td>\r\n                                            : <td></td>\r\n                                        }\r\n                                        <td style={{ fontWeight: 'bold', color: '#006600' }}><FormatNumber prop={item.recovered} /></td>\r\n                                    </tr>\r\n                                ))\r\n                                }\r\n                            </>\r\n                            :\r\n                            props.countriesData.map((item, id) => (\r\n                                item.continent === kontinent ?\r\n                                    <tr key={id} style={greenBackgroundforTR(item.active)}>\r\n                                        <td style={{ width: '100px' }}>\r\n                                            {item.country === 'Slovakia' ?\r\n                                                <div style={{ fontWeight: 'bold', textDecoration: 'underline' }}>\r\n                                                    <Link to='/Covid/CovidSK'>{item.country}</Link>\r\n                                                </div>\r\n                                                : item.country\r\n                                            }\r\n                                            {item.tests > 0 ?\r\n                                                <div className=\"firstCase\">Počet testov:\r\n                                                    <div className=\"firstCaseNumber\">\r\n                                                        <FormatNumber prop={item.tests} />\r\n                                                    </div>\r\n                                                </div>\r\n                                                : null}\r\n                                        </td>\r\n                                        <td><FormatNumber prop={item.cases} /></td>\r\n                                        <td>{item.active ? <FormatNumber prop={item.active} /> : \"0\"}</td>\r\n                                        {item.todayCases > 0 ?\r\n                                            <td style={{ background: ' rgb(254, 255, 194)' }}>+<FormatNumber prop={item.todayCases} /> </td>\r\n                                            : <td></td>\r\n                                        }\r\n                                        <td><FormatNumber prop={item.deaths} /></td>\r\n                                        {item.todayDeaths > 0 ?\r\n                                            <td style={{ color: ' rgba(156, 20, 20, 0.849)', fontWeight: 'bold' }}>+<FormatNumber prop={item.todayDeaths} /> </td>\r\n                                            : <td></td>\r\n                                        }\r\n                                        <td style={{ fontWeight: 'bold', color: 'green' }}><FormatNumber prop={item.recovered} /></td>\r\n                                    </tr>\r\n                                    : null\r\n                            ))\r\n                        } */}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                        {/* {\r\n                        props.countriesData.map((item, id) => (\r\n                            <>\r\n                                {item.continent === kontinent ?\r\n                            <tr key={id} style={greenBackgroundforTR(item.active)}>\r\n                                <td style={{ width: '100px' }}>\r\n                                    {item.country === 'Slovakia' ?\r\n                                        <div style={{ fontWeight: 'bold', textDecoration: 'underline' }}>\r\n                                            <Link to='/Covid/CovidSK'>{item.country}</Link>\r\n                                        </div>\r\n                                        : item.country\r\n                                    }\r\n                                    {item.tests > 0 ?\r\n                                        <div className=\"firstCase\">Počet testov:\r\n                                                    <div className=\"firstCaseNumber\">\r\n                                                <FormatNumber prop={item.tests} />\r\n                                            </div>\r\n                                        </div>\r\n                                        : null}\r\n                                </td>\r\n                                <td><FormatNumber prop={item.cases} /></td>\r\n                                <td>{item.active ? <FormatNumber prop={item.active} /> : \"0\"}</td>\r\n                                {item.todayCases > 0 ?\r\n                                    <td style={{ background: ' rgb(254, 255, 194)' }}>+<FormatNumber prop={item.todayCases} /> </td>\r\n                                    : <td></td>\r\n                                }\r\n                                <td><FormatNumber prop={item.deaths} /></td>\r\n                                {item.todayDeaths > 0 ?\r\n                                    <td style={{ color: ' rgba(156, 20, 20, 0.849)', fontWeight: 'bold' }}>+<FormatNumber prop={item.todayDeaths} /> </td>\r\n                                    : <td></td>\r\n                                }\r\n                                <td style={{ fontWeight: 'bold', color: 'green' }}><FormatNumber prop={item.recovered} /></td>\r\n                            </tr>\r\n                                    :\r\n                                    kontinent === \"Svet\" ?\r\n                            <tr key={id} style={greenBackgroundforTR(item.active)}>\r\n                                <td style={{ width: '100px' }}>\r\n                                    {item.country === 'Slovakia' ?\r\n                                        <div style={{ fontWeight: 'bold', textDecoration: 'underline' }}>\r\n                                            <Link to='/Covid/CovidSK'>{item.country}</Link>\r\n                                        </div>\r\n                                        : item.country\r\n                                    }\r\n                                    {item.tests > 0 ?\r\n                                        <div className=\"firstCase\">Počet testov:\r\n                                                    <div className=\"firstCaseNumber\">\r\n                                                <FormatNumber prop={item.tests} />\r\n                                            </div>\r\n                                        </div>\r\n                                        : null}\r\n                                </td>\r\n\r\n                                <td><FormatNumber prop={item.cases} /></td>\r\n                                <td>{item.active ? <FormatNumber prop={item.active} /> : \"0\"}</td>\r\n\r\n                                {item.todayCases > 0 ?\r\n                                    <td style={{ background: ' rgb(254, 255, 194)' }}>+<FormatNumber prop={item.todayCases} /> </td>\r\n                                    : <td></td>\r\n                                }\r\n                                <td><FormatNumber prop={item.deaths} /></td>\r\n                                {item.todayDeaths > 0 ?\r\n                                    <td style={{ color: ' rgba(156, 20, 20, 0.849)', fontWeight: 'bold' }}>+<FormatNumber prop={item.todayDeaths} /> </td>\r\n                                    : <td></td>\r\n                                }\r\n                                <td style={{ fontWeight: 'bold', color: 'green' }}><FormatNumber prop={item.recovered} /></td>\r\n                            </tr>\r\n                            : null\r\n                                }\r\n                            </>\r\n                        ))} */}\r\n                    </tbody>\r\n                </table>\r\n                <label htmlFor=\"myInput\">.</label>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SvetTabulka","import React from 'react'\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport './css/csspreSvk.css'\r\nfunction DougnatChart(props) {\r\n    const data = {\r\n        labels: ['Nakazení', 'Vyliečení', 'Úmrtia'],\r\n        datasets: [{\r\n            label: '# of Votes',\r\n            data: props.dataForGraph,\r\n            backgroundColor: [\r\n                '#f85959',\r\n                '#17b978',\r\n                '#430d27',\r\n            ],\r\n        }]\r\n    }\r\n\r\n    // const data = {\r\n    //     labels: props.dataForGraph.labels,\r\n    //     datasets: [{\r\n    //         label: '# of Votes',\r\n    //         data: props.dataForGraph.data,\r\n    //         backgroundColor: props.dataForGraph.backgroundColor,\r\n    //     }]\r\n    // }\r\n\r\n    // const data = {\r\n    //     labels: ['Nakazení', 'Vyliečení'],\r\n    //     datasets: [{\r\n    //         label: '# of Votes',\r\n    //         data: [10, 20],\r\n    //         backgroundColor: ['red', 'blue'],\r\n    //     }]\r\n    // }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"dougnut\">\r\n                <Doughnut\r\n                    data={data}\r\n                    height={300}\r\n                    options={{\r\n                        maintainAspectRatio: false,\r\n                        animation: { duration: 2000, easing: 'easeOutQuint' }\r\n                    }}\r\n                />\r\n\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DougnatChart\r\n","import React, { useState, useEffect } from 'react'\r\nimport './css/covid.css'\r\nimport './css/covidDesign.css'\r\nimport { Link } from 'react-router-dom'\r\nimport coronaIcon from \"../imgs/coronaIcon.svg\"\r\n// import CovidTable from \"./CovidTable\"\r\nimport SvetTabulka from \"./SvetTabulka\"\r\nimport { GiDeathSkull } from \"react-icons/gi\";\r\nimport { AiOutlineDoubleRight } from \"react-icons/ai\";\r\nimport { FaPlusCircle } from \"react-icons/fa\";\r\nimport DougnatChart from \"./DougnatChart\"\r\n// import DataGrid from \"./DataGrid\"\r\nimport FormatNumber from './FormatNumber'\r\n\r\n\r\nfunction CovidApp() {\r\n    const [mainData, setMainData] = useState()\r\n    const [doughnatData, setDoughnatData] = useState()\r\n    const [countriesData, setCountriesData] = useState([])\r\n    const [state, setState] = useState({\r\n        countriesData: countriesData,\r\n        direction: {\r\n            price_usd: 'asc',\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        // axios.get(`https://disease.sh/v2/all`)\r\n        //     .then(res => {\r\n        //         setDoughnatData([res.data.cases, res.data.recovered, res.data.deaths])\r\n        //         setMainData([res.data])\r\n        //     })\r\n\r\n        // axios.get(`https://disease.sh/v2/countries`)\r\n        //     .then(res => {\r\n        //         setCountriesData(res.data)\r\n        //         setState({\r\n        //             data: res.data.sort((a, b) => (\r\n        //                 state.direction['cases'] === 'asc'\r\n        //                     ? parseFloat(a['cases']) - parseFloat(b['cases'])\r\n        //                     : parseFloat(b['cases']) - parseFloat(a['cases'])\r\n        //             )),\r\n        //             direction: {\r\n        //                 'cases': state.direction['cases'] === 'asc'\r\n        //                     ? 'desc'\r\n        //                     : 'asc'\r\n        //             }\r\n        //         })\r\n        //     })\r\n        HandleLoadData2()\r\n        HandleLoadData1()\r\n\r\n    }, [])\r\n\r\n\r\n    const HandleLoadData1 = async () => {\r\n        const response1 = await fetch('https://disease.sh/v2/all')\r\n        let data1 = await response1.json()\r\n        setDoughnatData([data1.cases, data1.recovered, data1.deaths])\r\n        setMainData([data1])\r\n\r\n    }\r\n    const HandleLoadData2 = async () => {\r\n        const response = await fetch('https://disease.sh/v2/countries')\r\n        let data = await response.json()\r\n        setCountriesData(data)\r\n\r\n        setState({\r\n            data: data.sort((a, b) => (\r\n                state.direction['cases'] === 'asc'\r\n                    ? parseFloat(a['cases']) - parseFloat(b['cases'])\r\n                    : parseFloat(b['cases']) - parseFloat(a['cases'])\r\n            )),\r\n            direction: {\r\n                'cases': state.direction['cases'] === 'asc'\r\n                    ? 'desc'\r\n                    : 'asc'\r\n            }\r\n        })\r\n    }\r\n\r\n    // function FormatNum(num) {\r\n    //     if (num) {\r\n    //         return (\r\n    //             num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \")\r\n    //         )\r\n    //     }\r\n    // }\r\n\r\n    function numberTrans3(a, b) {\r\n        if (a) {\r\n            let output = b / (a / 100)\r\n            output = b / (a / 100)\r\n            output = output.toFixed(3)\r\n            output = output.toString()\r\n            output = output.replace(\".\", \",\")\r\n            return (\r\n                <div className=\"aktiveNakazenych\">\r\n                    <span>V percentách:</span> {output}%\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    function sortBy(key) {\r\n        setState({\r\n            countriesData: countriesData.sort((a, b) => (\r\n                state.direction[key] === 'asc'\r\n                    ? parseFloat(a[key]) - parseFloat(b[key])\r\n                    : parseFloat(b[key]) - parseFloat(a[key])\r\n            )),\r\n            direction: {\r\n                [key]: state.direction[key] === 'asc'\r\n                    ? 'desc'\r\n                    : 'asc'\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <div className=\"covidApp\">\r\n            {\r\n                mainData ?\r\n                    <div className=\"cardsDiv\">\r\n                        <div className=\"cards\">\r\n                            <div className=\"topCard\">\r\n                                <div className=\"obrDiv\">\r\n                                    <div className=\"circle\">\r\n                                        <img alt=\"\" src={coronaIcon} />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"textCard\">Počet nakazených</div>\r\n                            </div>\r\n                            <div className=\"mainText\">\r\n                                <FormatNumber prop={mainData[0].cases} />\r\n                                <div className=\"aktiveNakazenych\">\r\n                                    <span>Počet aktívnych prípadov:</span> <FormatNumber prop={mainData[0].active} />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                        <div className=\"cards\">\r\n                            <div className=\"topCard\">\r\n                                <div className=\"obrDiv\">\r\n                                    <div className=\"circle HP\">\r\n                                        <FaPlusCircle color={\"green\"} />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"textCard\"> Počet vyliečených</div>\r\n                            </div>\r\n                            <div className=\"mainText\">\r\n                                <FormatNumber prop={mainData[0].recovered} />\r\n                                {numberTrans3(mainData[0].cases, mainData[0].recovered)}\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"cards\">\r\n                            <div className=\"topCard\">\r\n                                <div className=\"obrDiv\">\r\n                                    <div className=\"circle skull\">\r\n                                        <GiDeathSkull color={\"white\"} />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"textCard\"> Počet úmrtí</div>\r\n                            </div>\r\n                            <div className=\"mainText\">\r\n                                <FormatNumber prop={mainData[0].deaths} />\r\n                                {numberTrans3(mainData[0].cases, mainData[0].deaths)}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    : ''\r\n            }\r\n            {/* <DataGrid /> */}\r\n            <DougnatChart dataForGraph={doughnatData} />\r\n            <br></br>\r\n            <br></br>\r\n            <div className=\"SlovenskeUdajeLink\" ><Link to='/Covid/CovidSK'>Slovenské údaje <AiOutlineDoubleRight className=\"iconSlovUdaje\" /></Link></div>\r\n            <br></br><br></br>\r\n            <SvetTabulka countriesData={countriesData} mainData={mainData} sortBy={sortBy} />\r\n        </div >\r\n\r\n    )\r\n}\r\n\r\nexport default CovidApp\r\n","function CompareCislo(data, sorting, stlpec) {\r\n    // const [stlpcek, setStlpcek] = useState(stlpec)\r\n    // if (stlpec === \"females\") {\r\n    //     data.sort(compareNum)\r\n    //     function compareNum(b, a) {\r\n    //         const A = a.females\r\n    //         const B = b.females\r\n    //         if (sorting) {\r\n    //             if (A > B) {\r\n    //                 return 1\r\n    //             } else if (A < B) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //         else {\r\n    //             if (B > A) {\r\n    //                 return 1\r\n    //             } else if (B < A) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //     }\r\n    // }\r\n    // else if (stlpec === \"males\") {\r\n    //     data.sort(compareNum)\r\n    //     function compareNum(b, a) {\r\n    //         const A = a.males\r\n    //         const B = b.males\r\n    //         if (sorting) {\r\n    //             if (A > B) {\r\n    //                 return 1\r\n    //             } else if (A < B) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //         else {\r\n    //             if (B > A) {\r\n    //                 return 1\r\n    //             } else if (B < A) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //     }\r\n    // }\r\n    if (stlpec === \"amountRecovered\") {\r\n        data.sort(compareNum)\r\n        function compareNum(b, a) {\r\n            const A = a.amount.recovered\r\n            const B = b.amount.recovered\r\n            if (sorting) {\r\n                if (A > B) {\r\n                    return 1\r\n                } else if (A < B) {\r\n                    return -1\r\n                } else return 0;\r\n            }\r\n            else {\r\n                if (B > A) {\r\n                    return 1\r\n                } else if (B < A) {\r\n                    return -1\r\n                } else return 0;\r\n            }\r\n        }\r\n    }\r\n    // else if (stlpec === \"amountDelta\") {\r\n    //     data.sort(compareNum)\r\n    //     function compareNum(b, a) {\r\n    //         const A = a.amount.infected_delta\r\n    //         const B = b.amount.infected_delta\r\n    //         if (sorting) {\r\n    //             if (A > B) {\r\n    //                 return 1\r\n    //             } else if (A < B) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //         else {\r\n    //             if (B > A) {\r\n    //                 return 1\r\n    //             } else if (B < A) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //     }\r\n    // }\r\n    // else {\r\n    //     data.sort(compareNum)\r\n    //     function compareNum(a, b) {\r\n    //         const A = a.amount.infected\r\n    //         const B = b.amount.infected\r\n    //         if (sorting) {\r\n    //             if (A > B) {\r\n    //                 return 1\r\n    //             } else if (A < B) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //         else {\r\n    //             if (B > A) {\r\n    //                 return 1\r\n    //             } else if (B < A) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //     }\r\n    // }\r\n    else {\r\n        if (JSON.parse(localStorage.getItem(\"zoradenieLocalStorage\")) === \"amountDelta\") {\r\n            data.sort(compareNum)\r\n            function compareNum(a, b) {\r\n                const A = a.amount.infected_delta\r\n                const B = b.amount.infected_delta\r\n                if (sorting) {\r\n                    if (A > B) {\r\n                        return 1\r\n                    } else if (A < B) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n                else {\r\n                    if (B > A) {\r\n                        return 1\r\n                    } else if (B < A) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n            }\r\n        }\r\n        else if (JSON.parse(localStorage.getItem(\"zoradenieLocalStorage\")) === \"amountInfected\") {\r\n            data.sort(compareNum)\r\n            function compareNum(a, b) {\r\n                const A = a.amount.infected\r\n                const B = b.amount.infected\r\n                if (sorting) {\r\n                    if (A > B) {\r\n                        return 1\r\n                    } else if (A < B) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n                else {\r\n                    if (B > A) {\r\n                        return 1\r\n                    } else if (B < A) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        else {\r\n            data.sort(compareNum)\r\n            function compareNum(a, b) {\r\n                const A = a.amount.infected\r\n                const B = b.amount.infected\r\n                if (sorting) {\r\n                    if (A > B) {\r\n                        return 1\r\n                    } else if (A < B) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n                else {\r\n                    if (B > A) {\r\n                        return 1\r\n                    } else if (B < A) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n}\r\n\r\nexport default CompareCislo ","import React, { useState, useEffect } from 'react'\r\nimport './css/tabulkaMesta.css'\r\nimport CompareCislo from './CompareCislo'\r\nimport { IoIosArrowDown } from 'react-icons/io';\r\n// import DougnatChart from \"./DougnatChart\"\r\n\r\nconst LOCAL_STORAGE_KEY = 'zoradenieLocalStorage'\r\n\r\n\r\nfunction TabulkaMesta(props) {\r\n    const data = props.tabulkaData\r\n    // const lastDay = props.tabulkaData.tested_chart[Object.keys(props.tested_chart).length - 1].day\r\n    // const [dataForTable, setDataForTable] = useState({})\r\n    const [sorting, setSorting] = useState(false)\r\n    const [ShowHide, setShowHide] = useState({\r\n        display: 'none'\r\n    })\r\n    const [textPreZobrazenieObci, setTextPreZobrazenieObci] = useState({\r\n        boolean: true,\r\n        text: \"Zobraziť údaje o jedntlivých obciach\"\r\n    })\r\n    const [sipkaObce, setSipkaObce] = useState({\r\n        transition: 'all .2s ease-in',\r\n        marginBottom: '-3px',\r\n        marginLeft: '3px',\r\n    })\r\n\r\n\r\n\r\n    // const [sorting, setSorting] = useState(false)\r\n    // console.log(props.tabulkaData)\r\n    // console.log(props.tabulkaData)\r\n    // const [dataTabulka, setDataTabulka] = useState(props.tabulkaData)\r\n    // const [state, setState] = useState({\r\n    //     dataTabulka: dataTabulka,\r\n    //     direction: {\r\n    //         price_usd: 'asc',\r\n    //     }\r\n    // })\r\n\r\n    useEffect(() => {\r\n        setSorting(s => !s)\r\n        CompareCislo(data, sorting, \"stlpec\")\r\n        // let zeny = 0;\r\n        // let muzi = 0;\r\n        // data.map(jednoData => {\r\n        //     zeny = zeny + jednoData.females\r\n        //     muzi = muzi + jednoData.males\r\n        // })\r\n        // setDataForTable({\r\n        //     labels: [\"Ženy\", \"Muži\"],\r\n        //     data: [zeny, muzi],\r\n        //     backgroundColor: [\"red\", \"blue\"]\r\n        // })\r\n    }, [])\r\n\r\n\r\n    // useEffect(() => {\r\n    //     setState({\r\n    //         dataTabulka: dataTabulka.sort((a, b) => (\r\n    //             state.direction['cases'] === 'asc'\r\n    //                 ? parseFloat(a['cases']) - parseFloat(b['cases'])\r\n    //                 : parseFloat(b['cases']) - parseFloat(a['cases'])\r\n    //         )),\r\n    //         direction: {\r\n    //             ['cases']: state.direction['cases'] === 'asc'\r\n    //                 ? 'desc'\r\n    //                 : 'asc'\r\n    //         }\r\n    //     })\r\n    // }, [])\r\n\r\n\r\n    // function sortBy(key) {\r\n    //     setState({\r\n    //         dataTabulka: dataTabulka.sort((a, b) => (\r\n    //             state.direction[key] === 'asc'\r\n    //                 ? parseFloat(a[key]) - parseFloat(b[key])\r\n    //                 : parseFloat(b[key]) - parseFloat(a[key])\r\n    //         )),\r\n    //         direction: {\r\n    //             [key]: state.direction[key] === 'asc'\r\n    //                 ? 'desc'\r\n    //                 : 'asc'\r\n    //         }\r\n    //     })\r\n    // }\r\n\r\n    function handleSortObce(stlpec) {\r\n        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(stlpec))\r\n\r\n        // const storedZoradenie = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY))\r\n        // if (storedZoradenie) console.log(storedZoradenie)\r\n\r\n\r\n        setSorting(!sorting)\r\n        CompareCislo(data, sorting, stlpec)\r\n    }\r\n\r\n    function zmenitText() {\r\n        if (textPreZobrazenieObci.boolean) {\r\n            setTextPreZobrazenieObci({\r\n                boolean: !textPreZobrazenieObci.boolean,\r\n                text: \"Schovať údaje o jedntlivých obciach\"\r\n            })\r\n            setShowHide({\r\n                display: 'flex',\r\n            })\r\n            setSipkaObce({\r\n                transform: \"rotateX(180deg)\",\r\n                transition: 'all .2s ease-in',\r\n                marginBottom: '-3px',\r\n                marginLeft: '3px',\r\n            })\r\n        }\r\n        else {\r\n            setTextPreZobrazenieObci({\r\n                boolean: !textPreZobrazenieObci.boolean,\r\n                text: \"Zobraziť údaje o jedntlivých obciach\"\r\n            })\r\n            setShowHide({\r\n                display: 'none',\r\n            })\r\n            setSipkaObce({\r\n                transform: \"rotateX(0deg)\",\r\n                transition: 'all .2s ease-in',\r\n                marginBottom: '-3px',\r\n                marginLeft: '3px',\r\n            })\r\n        }\r\n    }\r\n\r\n    function searchInputMesta() {\r\n        var input, filter, table, tr, td, i, txtValue;\r\n        input = document.getElementById(\"myInput\");\r\n        filter = input.value.toUpperCase();\r\n        table = document.getElementById(\"myTable\");\r\n        tr = table.getElementsByTagName(\"tr\");\r\n        for (i = 0; i < tr.length; i++) {\r\n            td = tr[i].getElementsByTagName(\"td\")[0];\r\n            if (td) {\r\n                txtValue = td.textContent || td.innerText;\r\n                if (txtValue.toUpperCase().indexOf(filter) > -1) {\r\n                    tr[i].style.display = \"\";\r\n                } else {\r\n                    tr[i].style.display = \"none\";\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"textPreZObrazenieTabulky\" onClick={zmenitText}>{textPreZobrazenieObci.text} <IoIosArrowDown style={sipkaObce} /></div>\r\n\r\n\r\n\r\n            <div style={ShowHide} className=\"tabulkaOkrajDivMain\">\r\n\r\n                <br></br>\r\n                <input type=\"text\" id=\"myInput\" onKeyUp={searchInputMesta} placeholder=\"Hľadať..\" className=\"inputSearch\" />\r\n                <div className=\"tabulkaMesta\">\r\n\r\n                    <table id=\"myTable\">\r\n                        <thead>\r\n                            <tr >\r\n                                <th >Obec</th>\r\n                                <th onClick={() => handleSortObce('amountInfected')} >Počet nakazených</th>\r\n                                <th onClick={() => handleSortObce('amountDelta')} >Za posledný deň</th>\r\n                                {/* <th onClick={() => handleSortObce('amountRecovered')} >Počet vyliečených</th> */}\r\n                                {/* <th onClick={() => handleSortObce('females')} >Ženy</th> */}\r\n                                {/* <th onClick={() => handleSortObce('males')} >Muži</th> */}\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {data.map((jednaObec, index) => <>\r\n                                <tr key={index} >\r\n                                    {/* {jednaObec.title === \"Bratislava II\" ? null\r\n                                        : jednaObec.title === \"Bratislava III\" ? null\r\n                                            : jednaObec.title === \"Bratislava IV\" ? null\r\n                                                : jednaObec.title === \"Bratislava V\" ? null\r\n                                                    : jednaObec.title === \"Košice II \" ? null\r\n                                                        : jednaObec.title === \"Košice III \" ? null\r\n                                                            : jednaObec.title === \"Košice IV \" ? null\r\n                                                                : jednaObec.title === \"Bratislava I \"\r\n                                                                    ? <td>{jednaObec.title}</td>\r\n                                                                    : jednaObec.title === \"Košice I\" ? <td>{jednaObec.title}</td>\r\n                                                                        : <td>{jednaObec.title}</td>} */}\r\n                                    {jednaObec.title === \"Bratislava II\"\r\n                                        || jednaObec.title === \"Bratislava III\"\r\n                                        || jednaObec.title === \"Bratislava IV\"\r\n                                        || jednaObec.title === \"Bratislava V\"\r\n                                        || jednaObec.title === \"Košice II\"\r\n                                        || jednaObec.title === \"Košice III\"\r\n                                        || jednaObec.title === \"Košice IV\" ? null\r\n                                        : <>\r\n                                            <td>{jednaObec.title === \"Bratislava I\" ? \"Bratislava\" :\r\n                                                jednaObec.title === \"Košice I\" ? \"Košice\" : jednaObec.title}</td>\r\n                                            <td>{jednaObec.amount.infected}</td>\r\n                                            <td style={{ color: 'red' }}>\r\n                                                {jednaObec.amount.infected_delta > 0 ?\r\n                                                    \"+\" + jednaObec.amount.infected_delta\r\n                                                    : null}\r\n                                            </td>\r\n                                        </>}\r\n\r\n                                    {/* <td>{jednaObec.amount.infected}\r\n                                        <span className=\"plusPreObecInfected\">{jednaObec.amount.infected_delta > 0 ? \"+\" + jednaObec.amount.infected_delta : ''}</span>\r\n                                    </td> */}\r\n\r\n                                    {/* <td><span className=\"plusPreObecRecovered\">{jednaObec.amount.recovered}</span></td> */}\r\n                                    {/* <td>{jednaObec.females}</td> */}\r\n                                    {/* <td>{jednaObec.males}</td> */}\r\n                                </tr>\r\n                            </>\r\n                            )}\r\n                        </tbody>\r\n                        {/* <tfoot>\r\n                        <tr>\r\n                            <td>Sum</td>\r\n                            <td>$180</td>\r\n                        </tr>\r\n                    </tfoot> */}\r\n                    </table>\r\n\r\n                </div>\r\n                {/* <DougnatChart dataForGraph={dataForTable} /> */}\r\n                {/* {dataForTable ? <DougnatChart dataForGraph={dataForTable} /> : null} */}\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TabulkaMesta\r\n","import React, { useState, useEffect } from 'react'\r\n// import CountUp from 'react-countup'\r\nimport styled, { keyframes } from \"styled-components\";\r\nimport './css/covid.css'\r\n// import './tooltip.css'\r\nimport coronaIcon from \"../imgs/coronaIcon.svg\"\r\nimport wideArrow from \"../imgs/wideArrow.svg\"\r\nimport TabulkaMesta from \"./TabulkaMesta\"\r\nimport FormatNumber from './FormatNumber';\r\n// import DataGrid from \"./DataGrid\"\r\n\r\n\r\n// import DougnatChart from \"./DougnatChart\"\r\n\r\nfunction CovidSK() {\r\n    const [dataSvk, setDataSvk] = useState()\r\n    const svk = 'https://mapa.covid.chat/map_data'\r\n    // const [tabulkaMestaData, setTabulkaMestaData] = useState([])\r\n    const [maxDate, setMaxDate] = useState()\r\n    const [maxDateboolLean, setMaxDateboolLean] = useState(false)\r\n    const [grafNegativneTesty, setGrafNegativneTesty] = useState({ stav: true, styling: { textDecoration: 'none' } })\r\n    const [styleWideArrow, setStyleWideArrow] = useState()\r\n    // const [toolTip, setToolTip] = useState({ background: 'red' })\r\n\r\n    const [state, setState] = useState({\r\n        dataSvk: dataSvk,\r\n        direction: {\r\n            price_usd: 'asc',\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n\r\n        const LoadData = async () => {\r\n            const response = await fetch(svk)\r\n            const data = await response.json()\r\n\r\n            setMaxDate(Object.keys(data.chart).length - 25)\r\n\r\n            setDataSvk([data])\r\n            setState({\r\n                dataSvk: data.map.sort((a, b) => (\r\n                    state.direction['cases'] === 'asc'\r\n                        ? parseFloat(a['cases']) - parseFloat(b['cases'])\r\n                        : parseFloat(b['cases']) - parseFloat(a['cases'])\r\n                )),\r\n                direction: {\r\n                    'cases': state.direction['cases'] === 'asc'\r\n                        ? 'desc'\r\n                        : 'asc'\r\n                }\r\n            })\r\n        }\r\n\r\n        LoadData()\r\n\r\n\r\n    }, [])\r\n\r\n    const negatTestyMoje = [83, 102, 50, 42, 120, 129, 118, 197, 228]\r\n\r\n    // const LoadData = async () => {\r\n    //     const response = await fetch(svk)\r\n    //     const data = await response.json()\r\n\r\n    //     setMaxDate(Object.keys(data.chart).length - 25)\r\n\r\n    //     setDataSvk([data])\r\n    //     setState({\r\n    //         dataSvk: data.map.sort((a, b) => (\r\n    //             state.direction['cases'] === 'asc'\r\n    //                 ? parseFloat(a['cases']) - parseFloat(b['cases'])\r\n    //                 : parseFloat(b['cases']) - parseFloat(a['cases'])\r\n    //         )),\r\n    //         direction: {\r\n    //             'cases': state.direction['cases'] === 'asc'\r\n    //                 ? 'desc'\r\n    //                 : 'asc'\r\n    //         }\r\n    //     })\r\n    // }\r\n\r\n    function handleData() {\r\n        let a = dataSvk[0].chart[Object.keys(dataSvk[0].tested_chart).length].recovered\r\n        let b = dataSvk[0].chart[Object.keys(dataSvk[0].tested_chart).length - 1].recovered\r\n        let c = a - b\r\n        let newRecovered = 0\r\n        if (c > 0) {\r\n            newRecovered = a - b\r\n        }\r\n\r\n        a = dataSvk[0].chart[Object.keys(dataSvk[0].tested_chart).length].deaths\r\n        b = dataSvk[0].chart[Object.keys(dataSvk[0].tested_chart).length - 1].deaths\r\n        c = a - b\r\n        let newDeaths = 0\r\n        if (c > 0) {\r\n            newDeaths = a - b\r\n        }\r\n\r\n\r\n        function GetTheDay() {\r\n            const lastDay = dataSvk[0].tested_chart[Object.keys(dataSvk[0].tested_chart).length - 1].day\r\n            if (lastDay === \"Pondelok\")\r\n                return \"pondelok\"\r\n            else if (lastDay === \"Utorok\")\r\n                return \"utorok\"\r\n            else if (lastDay === \"Streda\")\r\n                return \"stredu\"\r\n            else if (lastDay === \"Štvrtok\")\r\n                return \"štvrtok\"\r\n            else if (lastDay === \"Piatok\")\r\n                return \"piatok\"\r\n            else if (lastDay === \"Sobota\")\r\n                return \"sobotu\"\r\n            else return \"nedeľu\"\r\n\r\n        }\r\n        return (\r\n            <div>\r\n                <div className=\"cardsDiv\">\r\n                    <div className=\"cards cardsSVK\">\r\n                        <div className=\"topCard\">\r\n                            <div className=\"obrDiv\">\r\n                                <div className=\"circle\">\r\n                                    <img alt=\"\" src={coronaIcon} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"textCard\"><b>Slovenské údaje</b></div>\r\n                        </div>\r\n                        <div className=\"mainTextSK\">\r\n                            Počet testovaných: <FormatNumber prop={dataSvk[0].tested} /><br />\r\n                                Z toho pozitívnych testov: {dataSvk[0].infected}<br />\r\n                            Počet aktívnych prípadov: <b>{dataSvk[0].active}</b><br />\r\n                                Počet vyliečených: <span style={{ color: \"green\" }}>{dataSvk[0].recovered}</span><br />\r\n                            {dataSvk[0].deaths > 0 ? <>Počet úmrtí: {dataSvk[0].deaths}<br /></>\r\n                                : null}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"cards cardsSVK\">\r\n                        <div className=\"topCard\"><div className=\"textCard\"><b>Údaje za {GetTheDay()}</b></div></div>\r\n                        <div className=\"mainTextSK\">\r\n                            Počet nových testovaných: <span>{dataSvk[0].tested_chart[Object.keys(dataSvk[0].tested_chart).length - 1].tested}</span><br />\r\n                                Počet negatívnych testov: <span>{dataSvk[0].tested_chart[Object.keys(dataSvk[0].tested_chart).length - 1].tested - dataSvk[0].tested_chart[Object.keys(dataSvk[0].tested_chart).length - 1].infected}</span><br />\r\n                                Počet pozitívnych testov: <span>+{dataSvk[0].tested_chart[Object.keys(dataSvk[0].tested_chart).length - 1].infected}</span>\r\n                            {\r\n                                newRecovered > 0 ?\r\n                                    <> <br />Počet nových vyliečených: {newRecovered}</>\r\n                                    : null\r\n                            }\r\n                            {\r\n                                newDeaths > 0 ?\r\n                                    <>  <br />Počet nových úmrtí: {newDeaths}</>\r\n                                    : null\r\n                            }\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    const Heading = keyframes`\r\n    0%{\r\n        height: 0%;\r\n      }\r\n      100%{\r\n        height: 100%;\r\n      }\r\n    `;\r\n\r\n    const HomeHeader = styled.div`\r\n    height: 100%;\r\n    animation: ${Heading} .7s;\r\n    bottom: 0;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-evenly;\r\n    `;\r\n\r\n    function changeWideArrow() {\r\n        if (!maxDateboolLean) {\r\n            setMaxDate(-1)\r\n            setStyleWideArrow({\r\n                transform: 'rotateY(180deg)',\r\n            })\r\n        }\r\n        else {\r\n            setMaxDate(Object.keys(dataSvk[0].chart).length - 25)\r\n            setStyleWideArrow({\r\n                transform: 'rotateY(0deg)',\r\n            })\r\n        }\r\n        // dataSvk\r\n        setMaxDateboolLean(!maxDateboolLean)\r\n    }\r\n\r\n    function handleGraphAktivnePripady() {\r\n        let maxAktivnychInfikovanych = 0\r\n        dataSvk[0].chart.map(day1 => {\r\n            if (maxAktivnychInfikovanych < (day1.infected - day1.recovered - day1.deaths))\r\n                maxAktivnychInfikovanych = (day1.infected - day1.recovered - day1.deaths)\r\n            return maxAktivnychInfikovanych\r\n        })\r\n        const MaxInfected = 100 / maxAktivnychInfikovanych\r\n\r\n        // function testHover() {\r\n        //     setToolTip({\r\n        //         background: 'blue'\r\n        //     })\r\n        // }\r\n\r\n        // function testLeave() {\r\n        //     setToolTip({\r\n        //         background: 'red'\r\n        //     })\r\n        // }\r\n        return (\r\n            <div className=\"outsideDivGraf\">\r\n                <h1>Aktívne prípady</h1>\r\n                <div className=\"test\" onClick={changeWideArrow} style={styleWideArrow}>\r\n                    <div className=\"wideArrow\">\r\n                        <img alt=\"\" src={wideArrow} />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"svkGraf\">\r\n                    {dataSvk[0].chart.map((day1, index) =>\r\n                        index > maxDate ?\r\n                            <HomeHeader key={index}>\r\n                                {/* <div className=\"divInGraf\" style={toolTip}>{day1.infected}</div> */}\r\n                                <div className=\"aktivnePripadyGraf\" style={{ height: `calc(${MaxInfected * (day1.infected - day1.recovered - day1.deaths)}% )` }} >\r\n                                    {/* <div onMouseOver={testHover} onMouseLeave={testLeave} className=\"stlpcePrvehoGrafu\" style={{ height: `calc(${MaxInfected * (day1.infected - day1.recovered - day1.deaths)}% )` }} > */}\r\n                                    <span className=\"CountPrvehoGrafu\" >{day1.infected - day1.recovered - day1.deaths}</span>\r\n                                    {maxDateboolLean ?\r\n                                        index % 2 === 0 ?\r\n                                            <div className=\"spanDate\">{day1.date}</div>\r\n                                            : null\r\n                                        : <div className=\"spanDate\">{day1.date}</div>}\r\n                                </div>\r\n                            </HomeHeader>\r\n                            : null)}\r\n                </div>\r\n                <div className=\"medzeraPodDatumomGraf1\"></div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function handleGraph1() {\r\n        const MaxInfected = 100 / dataSvk[0].chart[Object.keys(dataSvk[0].chart).length - 1].infected\r\n        return (\r\n            <div className=\"outsideDivGraf\">\r\n                <h1>Celkový prírastok nakazených</h1>\r\n                <div className=\"test\" onClick={changeWideArrow} style={styleWideArrow}>\r\n                    <div className=\"wideArrow\">\r\n                        <img alt=\"\" src={wideArrow} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"svkGraf\">\r\n                    {\r\n                        dataSvk[0].chart.map((day1, index) =>\r\n                            index > maxDate ?\r\n                                <HomeHeader key={index}>\r\n                                    <div className=\"stlpcePrvehoGrafu tooltip\" style={{ height: `calc(${MaxInfected * day1.infected}% )` }} >\r\n                                        <span className=\"CountPrvehoGrafu\" >{day1.infected}</span>\r\n                                        {dataSvk[0].tested_chart[index - 1]\r\n                                            ? <><span className=\"countupFirstRed\">+{dataSvk[0].tested_chart[index - 1].infected}</span>\r\n                                            </>\r\n                                            : <><span className=\"countupFirstRed\">+1</span>\r\n                                            </>}\r\n                                        {\r\n                                            maxDateboolLean ?\r\n                                                index % 2 === 0 ?\r\n                                                    <div className=\"spanDate\">{day1.date}</div>\r\n                                                    : null\r\n                                                : <div className=\"spanDate\">{day1.date}</div>\r\n                                        }\r\n                                    </div>\r\n                                </HomeHeader>\r\n                                : null\r\n                        )\r\n                    }\r\n                </div>\r\n                <div className=\"medzeraPodDatumomGraf1\"></div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function negatTesty() {\r\n        if (grafNegativneTesty.stav)\r\n            setGrafNegativneTesty({ stav: false, styling: { textDecoration: 'line-through' } })\r\n        else\r\n            setGrafNegativneTesty({ stav: true, styling: { textDecoration: 'none' } })\r\n    }\r\n\r\n    function handleGraph2() {\r\n        let MaxDaily = 0\r\n        if (grafNegativneTesty.stav) {\r\n            if (dataSvk) {\r\n                dataSvk[0].tested_chart.map(pom1 => {\r\n                    if (pom1.tested > MaxDaily) {\r\n                        MaxDaily = pom1.tested - pom1.infected\r\n                    }\r\n                    return MaxDaily\r\n                })\r\n                MaxDaily = MaxDaily / 100\r\n            }\r\n        }\r\n        else {\r\n            if (dataSvk) {\r\n                dataSvk[0].tested_chart.map(pom1 => {\r\n                    if (pom1.infected > MaxDaily) {\r\n                        MaxDaily = pom1.infected\r\n                    }\r\n                    return MaxDaily\r\n                })\r\n                MaxDaily = MaxDaily / 100\r\n            }\r\n        }\r\n        return (\r\n            <div className=\"outsideDivGraf\">\r\n                <h1>Denný prírastok negatívnych a pozitívnych testov</h1>\r\n                <div className=\"test\" onClick={changeWideArrow} style={styleWideArrow}>\r\n                    <div className=\"wideArrow\">\r\n                        <img alt=\"\" src={wideArrow} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"svkGraf\">\r\n                    {maxDate === -1 ?\r\n                        <HomeHeader >  {/* prvy stlpec pre druhy graf */}\r\n                            <div className=\"PozitivneTestyDruhyGraf\" style={{ height: `calc(${1 / MaxDaily}%)` }} >\r\n                                <div className=\"spanDate\">{\"06-03-2020\"}</div>\r\n                            </div>\r\n\r\n                            {grafNegativneTesty.stav ?\r\n                                <div className=\"Graf2Stlpce\" style={{ height: `calc(${306 / MaxDaily}%)` }} >\r\n                                    <span className=\"CountDruhehoGrafu\">306</span>\r\n                                    <span className=\"CountDruhehoGrafu nakazeniZaDen\">+1</span>\r\n                                </div>\r\n                                : <div className=\"Graf2Stlpce\" style={{ height: `calc(${1 / MaxDaily}%)` }} >\r\n                                    <span className=\"CountDruhehoGrafu druhyGrafJedenTypSltpca\">+1</span>\r\n                                </div>}\r\n                        </HomeHeader>\r\n                        : ''}\r\n\r\n                    {dataSvk[0].tested_chart.map((day1, index) =>\r\n                        index > maxDate - 1 ?\r\n                            <HomeHeader key={index}>\r\n                                {\r\n                                    <>\r\n                                        <div className=\"PozitivneTestyDruhyGraf\" style={{ height: `calc(${(day1.infected) / MaxDaily}% )` }} >\r\n                                            {/* <div className=\"spanDate\">{day1.date}</div> */}\r\n\r\n                                            {\r\n                                                maxDateboolLean ?\r\n                                                    index % 2 === 0 ?\r\n                                                        null\r\n                                                        : <div className=\"spanDate\">{day1.date}</div>\r\n                                                    : <div className=\"spanDate\">{day1.date}</div>\r\n                                            }\r\n\r\n\r\n                                            {!grafNegativneTesty.stav ?\r\n                                                <span className=\" CountDruhehoGrafu druhyGrafJedenTypSltpca\" >+{day1.infected}</span>\r\n                                                : null}\r\n                                        </div>\r\n                                        {\r\n                                            negatTestyMoje[index]\r\n                                                ? grafNegativneTesty.stav ?\r\n                                                    <div className=\"Graf2Stlpce\" style={{ height: `calc(${negatTestyMoje[index] / MaxDaily}% )` }} >\r\n                                                        {(negatTestyMoje[index] > 99) ? <>\r\n                                                            <span className=\"CountDruhehoGrafu\" style={{ marginLeft: '-2px' }}>{negatTestyMoje[index]}</span>\r\n                                                            <span className=\" CountDruhehoGrafu nakazeniZaDen\">{day1.infected}</span>\r\n                                                        </>\r\n                                                            : <>\r\n                                                                <span className=\"CountDruhehoGrafu\">{negatTestyMoje[index]}</span>\r\n                                                                <span className=\" CountDruhehoGrafu nakazeniZaDen\">+{day1.infected}</span>\r\n                                                            </>\r\n                                                        }\r\n                                                    </div>\r\n                                                    : null\r\n                                                : grafNegativneTesty.stav ?\r\n                                                    <div className=\"Graf2Stlpce\" style={{ height: `calc(${day1.tested / MaxDaily}%)` }} >\r\n                                                        <span className=\"CountDruhehoGrafu\">{day1.tested - day1.infected}</span>\r\n                                                        <span className=\" CountDruhehoGrafu nakazeniZaDen\">+{day1.infected}</span>\r\n                                                    </div>\r\n                                                    : null\r\n                                        }\r\n                                    </>\r\n                                }\r\n                            </HomeHeader>\r\n                            : null\r\n                    )}\r\n                </div>\r\n                <div className=\"vysvetlivkyPodGrafom\">\r\n                    <div style={grafNegativneTesty.styling} onClick={negatTesty}><div className=\"blue\" ></div>Počet negatívnych testov</div>\r\n                    <div><div className=\"red\"></div>Počet pozitívnych testov</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    function sortBy(key) {\r\n        setState({\r\n            dataSvk: dataSvk[0].map.sort((a, b) => (\r\n\r\n                state.direction[key] === 'asc'\r\n                    ? parseFloat(a[key]) - parseFloat(b[key])\r\n                    : <>{parseFloat(b[key]) - parseFloat(a[key])} </>\r\n            )),\r\n            direction: {\r\n                [key]: state.direction[key] === 'asc'\r\n                    ? 'desc'\r\n                    : 'asc'\r\n            }\r\n        })\r\n    }\r\n    return (\r\n        <div className=\"covidApp\">\r\n            {\r\n                dataSvk\r\n                    ? <>\r\n                        {handleData()}\r\n                        {/* <DataGrid data={dataSvk[0].map} /> */}\r\n\r\n                        <TabulkaMesta tabulkaData={dataSvk[0].districts} sortBy={sortBy} />\r\n                        {/* <div className=\"tooltip\">Hover over me\r\n                        <div className=\"tooltiptext\">Tooltip text</div>\r\n                        </div> */}\r\n                        {/* <DougnatChart /> */}\r\n\r\n                        {handleGraphAktivnePripady()}\r\n\r\n                        {handleGraph1()}\r\n                        {handleGraph2()}\r\n                    </>\r\n                    : ''\r\n\r\n\r\n            }\r\n            <br></br><br></br><br></br><br></br>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default CovidSK\r\n","import React from 'react'\r\n\r\nfunction Todo({ todo, toggleTodo }) {\r\n\r\n    function handleTodoClick() {\r\n        toggleTodo(todo.id)\r\n    }\r\n    function handleTodoClick2() {\r\n    }\r\n\r\n    function handleFormatTime(time) {\r\n        var month = time.slice(-4, -2)\r\n        var year = time.slice(-8, -4)\r\n        var day = time.slice(-2)\r\n        return (day + \".\" + month + \".\" + year)\r\n    }\r\n    return (\r\n        <div onClick={handleTodoClick}>\r\n            <div className=\"todoList\">\r\n                <div className=\"naLavo\">{handleFormatTime(todo.time)}</div>\r\n                <input className=\"checkboX\" type=\"checkbox\" onChange={handleTodoClick2} checked={todo.complete} />\r\n                <div style={{ textDecoration: todo.complete ? 'line-through' : '' }}>{todo.name}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todo\r\n","import React from 'react'\r\nimport Todo from './Todo'\r\nexport default function HandleTodo({ todos, toggleTodo, time }) {\r\n    return (<>\r\n        {todos.map((todo) => {\r\n            return (\r\n                <Todo key={todo.id} todo={todo} toggleTodo={toggleTodo} time={time} />\r\n            )\r\n        })}\r\n    </>)\r\n}\r\n","function CompareCislo(todos, casSort) {\r\n    todos.sort(compareNum)\r\n    function compareNum(a, b) {\r\n        const A = a.time\r\n        const B = b.time\r\n        if (casSort) {\r\n            if (A > B) {\r\n                return 1\r\n            } else if (A < B) {\r\n                return -1\r\n            } else return 0;\r\n        }\r\n        else {\r\n            if (B > A) {\r\n                return 1\r\n            } else if (B < A) {\r\n                return -1\r\n            } else return 0;\r\n        }\r\n    }\r\n}\r\n\r\nexport default CompareCislo ","import React, { useState, useRef, useEffect } from 'react'\r\nimport uuidV4 from 'uuid/v4'\r\nimport './Todo.css'\r\nimport HandleTodo from './HandleTodo'\r\nimport CompareCislo from './CompareCislo'\r\nimport DatePicker from 'react-datepicker'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\n\r\nconst LOCAL_STORAGE_KEY = 'todoApp.todos'\r\n\r\n\r\nfunction TodoApp() {\r\n\r\n    const [todos, setTodos] = useState([])\r\n    const todoNameRef = useRef()\r\n    const [casSort, setCasSort] = useState(false)\r\n    const [selectedDate, setSelectedDate] = useState(null)\r\n    const [myStyle, setMyStyle] = useState({ display: 'none' })\r\n\r\n    useEffect(() => {\r\n        const storedTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY))\r\n        if (storedTodos) setTodos(storedTodos)\r\n        // handleNumberTime()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos))\r\n    }, [todos])\r\n\r\n    function toggleTodo(id) {\r\n        const newTodos = [...todos]\r\n        const todo = newTodos.find(todo => todo.id === id)\r\n        todo.complete = !todo.complete\r\n        setTodos(newTodos)\r\n    }\r\n\r\n    function handleAddTodo(e) {\r\n        e.preventDefault()\r\n        const name = todoNameRef.current.value\r\n        if (selectedDate) {\r\n            var d = selectedDate\r\n            var dateFullNumber = d.getFullYear() + (\"0\" + (d.getMonth() + 1)).slice(-2) + (\"0\" + d.getDate()).slice(-2)\r\n        }\r\n\r\n        if (!name || !dateFullNumber) {\r\n            setMyStyle({ display: 'block' })\r\n        }\r\n        else {\r\n            setMyStyle({ display: 'none' })\r\n            setTodos(prev => {\r\n                return [...prev, { id: uuidV4(), name: name, complete: false, time: dateFullNumber }]\r\n            })\r\n            todoNameRef.current.value = null\r\n            setSelectedDate(null)\r\n        }\r\n\r\n\r\n    }\r\n\r\n    function handleClearTodos(e) {\r\n        e.preventDefault()\r\n        const newTodos = todos.filter(todo => !todo.complete)\r\n        setTodos(newTodos)\r\n    }\r\n\r\n    function handleRemoveAllTodos(e) {\r\n        e.preventDefault()\r\n\r\n        if (window.confirm('Are u sure?')) {\r\n            setTodos([])\r\n        }\r\n    }\r\n\r\n\r\n    function handleNumberTime() {\r\n        setCasSort(!casSort)\r\n        CompareCislo(todos, casSort)\r\n        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos))\r\n    }\r\n\r\n\r\n    // function Priklad3(A1, A2, A3, A4, B1, B2, y1, y2) {\r\n    //     let A = [A1, A2, A3, A4]\r\n    //     let B = [B1, B2]\r\n    //     let y = [y1, y2]\r\n\r\n    //     // console.log(A1, A2, A3, A4, B1, B2, y1, y2)\r\n\r\n    //     console.log(\"Riaditelnost:\")\r\n    //     console.log(\"Riaditelnost:\")\r\n    //     let v11 = B[0]\r\n    //     let v12 = (A[0] * B[0]) + (A[1] * B[1])\r\n    //     let v21 = B[1]\r\n    //     let v22 = (A[2] * B[0]) + (A[3] * B[1])\r\n    //     console.log(v11, v12)\r\n    //     console.log(v21, v22)\r\n    //     let vysMatica = (v11 * v22) - (v12 * v21)\r\n    //     if (vysMatica === 0) {\r\n    //         console.log(\"nie je riaditelny, lebo Mc= \" + vysMatica + \" a nemoze sa rovnat 0!\")\r\n    //     }\r\n    //     else {\r\n    //         console.log(\"Je riaditelny, lebo Mc= \" + vysMatica + \" co je rozdielne od nuly\")\r\n    //     }\r\n\r\n\r\n    //     console.log(\"Pozorovatelnost:\")\r\n    //     console.log(\"Pozorovatelnost:\")\r\n\r\n    //     let Ca = [((y[0] * A[0]) + (y[1] * A[2])), ((y[0] * A[1]) + (y[1] * A[3]))]\r\n    //     let Mo = [y[0], y[1], Ca[0], Ca[1]]\r\n    //     let MoVys = (Mo[0] * Mo[3]) - (Mo[1] * Mo[2])\r\n    //     console.log(\"Mo je:\")\r\n    //     console.log(Mo[0], Mo[1])\r\n    //     console.log(Mo[2], Mo[3])\r\n    //     // console.log(\"Vysledok Mo matice je: \" + MoVys)\r\n\r\n    //     if (MoVys === 0) {\r\n    //         console.log(\"nie je pozorovatelny, lebo Mo= \" + MoVys + \" a nemoze sa rovnat 0!\")\r\n    //     }\r\n    //     else {\r\n    //         console.log(\"Je pozorovatelny, lebo Mo= \" + MoVys + \" co je rozdielne od nuly\")\r\n    //     }\r\n\r\n\r\n    // }\r\n\r\n\r\n    return (\r\n        <div className=\"TodoMain\">\r\n\r\n            <h1>Todo APP</h1>\r\n            <div className=\"todo\">\r\n\r\n                <HandleTodo todos={todos} toggleTodo={toggleTodo} />\r\n                <form className=\"\">\r\n                    <input placeholder=\"Pridať nové TODO\" className=\"inputTodo\" ref={todoNameRef} type=\"text\" />\r\n                    <div className=\"divForDatePicker\">\r\n                        <DatePicker style={{ width: '100%' }} className=\"datePicker\"\r\n                            selected={selectedDate}\r\n                            onChange={date => setSelectedDate(date)}\r\n                            dateFormat='dd/MM/yyyy'\r\n                            isClearable\r\n                            placeholderText=\"Dokedy\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"musisVyplnitObePolia\" style={myStyle}>musiš vyplniť obe polia</div>\r\n                    <button className=\"btn btn1\" onClick={handleAddTodo}>Pridať</button>\r\n                    <button className=\"btn btn2\" onClick={handleClearTodos}>Odstraniť hotové</button>\r\n                    <button className=\"btn btnDel\" onClick={handleRemoveAllTodos}>Odstraniť všetky</button>\r\n                    {/* <button className=\"btn btn2\" onClick={handleNumber}>Zoradiť podľa názvu</button> */}\r\n                    <button className=\"btn btn2\" style={{ width: '100%' }} onClick={handleNumberTime}>Zoradiť podľa dátumu</button>\r\n                    {/* <button className=\"btn btn1\" onClick={hadnleSortComplete}>Zoradiť podľa dokončenia</button> */}\r\n                </form>\r\n\r\n                {\r\n                    (todos.length > 0 && todos.filter(todo => !todo.complete).length !== 0)\r\n                        ? <div className=\"nesplnene\">{todos.filter(todo => !todo.complete).length} nesplnené</div>\r\n                        : <div className=\"nesplnene splnene\">Všetky todo splnené</div>\r\n                }\r\n            </div>\r\n\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoApp\r\n","import React from 'react';\nimport './App.css';\nimport Nav from './Nav';\n\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom'\nimport CovidApp from './Covid/CovidApp';\nimport CovidSK from './Covid/CovidSK';\nimport TodoApp from './Todo/TodoApp';\nimport { polyfill } from 'es6-promise'; polyfill();\nrequire('es6-promise').polyfill();\nrequire('isomorphic-fetch');\n\n\nfunction App() {\n\n\n  return (\n    <Router basename=\"/\">\n      <div className=\"App\">\n        <Nav />\n        <Switch>\n          <Route path=\"/\" component={CovidApp} exact />\n          <Route path=\"/Covid/CovidApp\" component={CovidApp} />\n          <Route path=\"/Covid/CovidSK\" component={CovidSK} />\n          <Route path=\"/Todo\" component={TodoApp} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n","module.exports = __webpack_public_path__ + \"static/media/coronaIcon.02ed3e1a.svg\";","module.exports = __webpack_public_path__ + \"static/media/wideArrow.d20604a8.svg\";"],"sourceRoot":""}