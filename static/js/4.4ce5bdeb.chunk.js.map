{"version":3,"sources":["imgs/wideArrow.svg","Covid/CompareCislo.js","Covid/TabulkaMesta.js","Covid/CovidSK.js"],"names":["module","exports","CompareCislo","data","sorting","stlpec","sort","b","a","A","amount","recovered","B","JSON","parse","localStorage","getItem","infected_delta","infected","TabulkaMesta","props","tabulkaData","useState","setSorting","display","ShowHide","setShowHide","boolean","text","textPreZobrazenieObci","setTextPreZobrazenieObci","transition","marginBottom","marginLeft","sipkaObce","setSipkaObce","handleSortObce","setItem","stringify","useEffect","s","className","onClick","transform","style","type","id","onKeyUp","filter","tr","td","i","document","getElementById","value","toUpperCase","getElementsByTagName","length","textContent","innerText","indexOf","placeholder","map","jednaObec","index","key","title","color","CovidSK","dataSvk","setDataSvk","maxDate","setMaxDate","maxDateboolLean","setMaxDateboolLean","stav","styling","textDecoration","grafNegativneTesty","setGrafNegativneTesty","styleWideArrow","setStyleWideArrow","direction","price_usd","state","setState","fetch","response","json","Object","keys","chart","parseFloat","LoadData","negatTestyMoje","Heading","keyframes","HomeHeader","styled","div","changeWideArrow","negatTesty","tested_chart","c","newRecovered","newDeaths","deaths","alt","src","coronaIcon","FormatNumber","prop","tested","active","lastDay","day","GetTheDay","handleData","districts","sortBy","maxAktivnychInfikovanych","day1","MaxInfected","wideArrow","height","date","handleGraphAktivnePripady","handleGraph1","MaxDaily","pom1","handleGraph2"],"mappings":"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","file":"static/js/4.4ce5bdeb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wideArrow.d20604a8.svg\";","function CompareCislo(data, sorting, stlpec) {\r\n\r\n    // const [stlpcek, setStlpcek] = useState(stlpec)\r\n    // if (stlpec === \"females\") {\r\n    //     data.sort(compareNum)\r\n    //     function compareNum(b, a) {\r\n    //         const A = a.females\r\n    //         const B = b.females\r\n    //         if (sorting) {\r\n    //             if (A > B) {\r\n    //                 return 1\r\n    //             } else if (A < B) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //         else {\r\n    //             if (B > A) {\r\n    //                 return 1\r\n    //             } else if (B < A) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //     }\r\n    // }\r\n    // else if (stlpec === \"males\") {\r\n    //     data.sort(compareNum)\r\n    //     function compareNum(b, a) {\r\n    //         const A = a.males\r\n    //         const B = b.males\r\n    //         if (sorting) {\r\n    //             if (A > B) {\r\n    //                 return 1\r\n    //             } else if (A < B) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //         else {\r\n    //             if (B > A) {\r\n    //                 return 1\r\n    //             } else if (B < A) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //     }\r\n    // }\r\n    if (stlpec === \"amountRecovered\") {\r\n        data.sort(compareNum)\r\n        function compareNum(b, a) {\r\n            const A = a.amount.recovered\r\n            const B = b.amount.recovered\r\n            if (sorting) {\r\n                if (A > B) {\r\n                    return 1\r\n                } else if (A < B) {\r\n                    return -1\r\n                } else return 0;\r\n            }\r\n            else {\r\n                if (B > A) {\r\n                    return 1\r\n                } else if (B < A) {\r\n                    return -1\r\n                } else return 0;\r\n            }\r\n        }\r\n    }\r\n    // else if (stlpec === \"amountDelta\") {\r\n    //     data.sort(compareNum)\r\n    //     function compareNum(b, a) {\r\n    //         const A = a.amount.infected_delta\r\n    //         const B = b.amount.infected_delta\r\n    //         if (sorting) {\r\n    //             if (A > B) {\r\n    //                 return 1\r\n    //             } else if (A < B) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //         else {\r\n    //             if (B > A) {\r\n    //                 return 1\r\n    //             } else if (B < A) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //     }\r\n    // }\r\n    // else {\r\n    //     data.sort(compareNum)\r\n    //     function compareNum(a, b) {\r\n    //         const A = a.amount.infected\r\n    //         const B = b.amount.infected\r\n    //         if (sorting) {\r\n    //             if (A > B) {\r\n    //                 return 1\r\n    //             } else if (A < B) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //         else {\r\n    //             if (B > A) {\r\n    //                 return 1\r\n    //             } else if (B < A) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //     }\r\n    // }\r\n    else {\r\n        if (JSON.parse(localStorage.getItem(\"zoradenieLocalStorage\")) === \"amountDelta\") {\r\n            data.sort(compareNum)\r\n            function compareNum(a, b) {\r\n                const A = a.amount.infected_delta\r\n                const B = b.amount.infected_delta\r\n                if (sorting) {\r\n                    if (A > B) {\r\n                        return 1\r\n                    } else if (A < B) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n                else {\r\n                    if (B > A) {\r\n                        return 1\r\n                    } else if (B < A) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n            }\r\n        }\r\n        else if (JSON.parse(localStorage.getItem(\"zoradenieLocalStorage\")) === \"amountInfected\") {\r\n            data.sort(compareNum)\r\n            function compareNum(a, b) {\r\n                const A = a.amount.infected\r\n                const B = b.amount.infected\r\n                if (sorting) {\r\n                    if (A > B) {\r\n                        return 1\r\n                    } else if (A < B) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n                else {\r\n                    if (B > A) {\r\n                        return 1\r\n                    } else if (B < A) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        else {\r\n            data.sort(compareNum)\r\n            function compareNum(a, b) {\r\n                const A = a.amount.infected\r\n                const B = b.amount.infected\r\n                if (sorting) {\r\n                    if (A > B) {\r\n                        return 1\r\n                    } else if (A < B) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n                else {\r\n                    if (B > A) {\r\n                        return 1\r\n                    } else if (B < A) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n}\r\n\r\nexport default CompareCislo ","import React, { useState, useEffect } from 'react'\r\nimport './css/tabulkaMesta.css'\r\nimport CompareCislo from './CompareCislo'\r\nimport { IoIosArrowDown } from 'react-icons/io';\r\n// import DougnatChart from \"./DougnatChart\"\r\n\r\nconst LOCAL_STORAGE_KEY = 'zoradenieLocalStorage'\r\n\r\n\r\nfunction TabulkaMesta(props) {\r\n    const data = props.tabulkaData\r\n    // const lastDay = props.tabulkaData.tested_chart[Object.keys(props.tested_chart).length - 1].day\r\n    // const [dataForTable, setDataForTable] = useState({})\r\n    const [sorting, setSorting] = useState(false)\r\n    const [ShowHide, setShowHide] = useState({\r\n        display: 'none'\r\n    })\r\n    const [textPreZobrazenieObci, setTextPreZobrazenieObci] = useState({\r\n        boolean: true,\r\n        text: \"Zobraziť údaje o jedntlivých obciach\"\r\n    })\r\n    const [sipkaObce, setSipkaObce] = useState({\r\n        transition: 'all .2s ease-in',\r\n        marginBottom: '-3px',\r\n        marginLeft: '3px',\r\n    })\r\n\r\n\r\n\r\n    // const [sorting, setSorting] = useState(false)\r\n    // console.log(props.tabulkaData)\r\n    // console.log(props.tabulkaData)\r\n    // const [dataTabulka, setDataTabulka] = useState(props.tabulkaData)\r\n    // const [state, setState] = useState({\r\n    //     dataTabulka: dataTabulka,\r\n    //     direction: {\r\n    //         price_usd: 'asc',\r\n    //     }\r\n    // })\r\n\r\n    useEffect(() => {\r\n        setSorting(s => !s)\r\n        CompareCislo(data, sorting, \"stlpec\")\r\n        // let zeny = 0;\r\n        // let muzi = 0;\r\n        // data.map(jednoData => {\r\n        //     zeny = zeny + jednoData.females\r\n        //     muzi = muzi + jednoData.males\r\n        // })\r\n        // setDataForTable({\r\n        //     labels: [\"Ženy\", \"Muži\"],\r\n        //     data: [zeny, muzi],\r\n        //     backgroundColor: [\"red\", \"blue\"]\r\n        // })\r\n    }, [])\r\n\r\n\r\n    // useEffect(() => {\r\n    //     setState({\r\n    //         dataTabulka: dataTabulka.sort((a, b) => (\r\n    //             state.direction['cases'] === 'asc'\r\n    //                 ? parseFloat(a['cases']) - parseFloat(b['cases'])\r\n    //                 : parseFloat(b['cases']) - parseFloat(a['cases'])\r\n    //         )),\r\n    //         direction: {\r\n    //             ['cases']: state.direction['cases'] === 'asc'\r\n    //                 ? 'desc'\r\n    //                 : 'asc'\r\n    //         }\r\n    //     })\r\n    // }, [])\r\n\r\n\r\n    // function sortBy(key) {\r\n    //     setState({\r\n    //         dataTabulka: dataTabulka.sort((a, b) => (\r\n    //             state.direction[key] === 'asc'\r\n    //                 ? parseFloat(a[key]) - parseFloat(b[key])\r\n    //                 : parseFloat(b[key]) - parseFloat(a[key])\r\n    //         )),\r\n    //         direction: {\r\n    //             [key]: state.direction[key] === 'asc'\r\n    //                 ? 'desc'\r\n    //                 : 'asc'\r\n    //         }\r\n    //     })\r\n    // }\r\n\r\n    function handleSortObce(stlpec) {\r\n        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(stlpec))\r\n\r\n        // const storedZoradenie = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY))\r\n        // if (storedZoradenie) console.log(storedZoradenie)\r\n\r\n\r\n        setSorting(!sorting)\r\n        CompareCislo(data, sorting, stlpec)\r\n    }\r\n\r\n    function zmenitText() {\r\n        if (textPreZobrazenieObci.boolean) {\r\n            setTextPreZobrazenieObci({\r\n                boolean: !textPreZobrazenieObci.boolean,\r\n                text: \"Schovať údaje o jedntlivých obciach\"\r\n            })\r\n            setShowHide({\r\n                display: 'flex',\r\n            })\r\n            setSipkaObce({\r\n                transform: \"rotateX(180deg)\",\r\n                transition: 'all .2s ease-in',\r\n                marginBottom: '-3px',\r\n                marginLeft: '3px',\r\n            })\r\n        }\r\n        else {\r\n            setTextPreZobrazenieObci({\r\n                boolean: !textPreZobrazenieObci.boolean,\r\n                text: \"Zobraziť údaje o jedntlivých obciach\"\r\n            })\r\n            setShowHide({\r\n                display: 'none',\r\n            })\r\n            setSipkaObce({\r\n                transform: \"rotateX(0deg)\",\r\n                transition: 'all .2s ease-in',\r\n                marginBottom: '-3px',\r\n                marginLeft: '3px',\r\n            })\r\n        }\r\n    }\r\n\r\n    function searchInputMesta() {\r\n        var input, filter, table, tr, td, i, txtValue;\r\n        input = document.getElementById(\"myInput\");\r\n        filter = input.value.toUpperCase();\r\n        table = document.getElementById(\"myTable\");\r\n        tr = table.getElementsByTagName(\"tr\");\r\n        for (i = 0; i < tr.length; i++) {\r\n            td = tr[i].getElementsByTagName(\"td\")[0];\r\n            if (td) {\r\n                txtValue = td.textContent || td.innerText;\r\n                if (txtValue.toUpperCase().indexOf(filter) > -1) {\r\n                    tr[i].style.display = \"\";\r\n                } else {\r\n                    tr[i].style.display = \"none\";\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"textPreZObrazenieTabulky\" onClick={zmenitText}>{textPreZobrazenieObci.text} <IoIosArrowDown style={sipkaObce} /></div>\r\n\r\n\r\n\r\n            <div style={ShowHide} className=\"tabulkaOkrajDivMain\">\r\n\r\n                <br></br>\r\n                <input type=\"text\" id=\"myInput\" onKeyUp={searchInputMesta} placeholder=\"Hľadať..\" className=\"inputSearch\" />\r\n                <div className=\"tabulkaMesta\">\r\n\r\n                    <table id=\"myTable\">\r\n                        <thead>\r\n                            <tr >\r\n                                <th >Obec</th>\r\n                                <th onClick={() => handleSortObce('amountInfected')} >Počet nakazených</th>\r\n                                <th onClick={() => handleSortObce('amountDelta')} >Za posledný deň</th>\r\n                                {/* <th onClick={() => handleSortObce('amountRecovered')} >Počet vyliečených</th> */}\r\n                                {/* <th onClick={() => handleSortObce('females')} >Ženy</th> */}\r\n                                {/* <th onClick={() => handleSortObce('males')} >Muži</th> */}\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {data.map((jednaObec, index) => <>\r\n                                <tr key={index} >\r\n                                    {/* {jednaObec.title === \"Bratislava II\" ? null\r\n                                        : jednaObec.title === \"Bratislava III\" ? null\r\n                                            : jednaObec.title === \"Bratislava IV\" ? null\r\n                                                : jednaObec.title === \"Bratislava V\" ? null\r\n                                                    : jednaObec.title === \"Košice II \" ? null\r\n                                                        : jednaObec.title === \"Košice III \" ? null\r\n                                                            : jednaObec.title === \"Košice IV \" ? null\r\n                                                                : jednaObec.title === \"Bratislava I \"\r\n                                                                    ? <td>{jednaObec.title}</td>\r\n                                                                    : jednaObec.title === \"Košice I\" ? <td>{jednaObec.title}</td>\r\n                                                                        : <td>{jednaObec.title}</td>} */}\r\n                                    {jednaObec.title === \"Bratislava II\"\r\n                                        || jednaObec.title === \"Bratislava III\"\r\n                                        || jednaObec.title === \"Bratislava IV\"\r\n                                        || jednaObec.title === \"Bratislava V\"\r\n                                        || jednaObec.title === \"Košice II\"\r\n                                        || jednaObec.title === \"Košice III\"\r\n                                        || jednaObec.title === \"Košice IV\" ? null\r\n                                        : <>\r\n                                            <td>{jednaObec.title === \"Bratislava I\" ? \"Bratislava\" :\r\n                                                jednaObec.title === \"Košice I\" ? \"Košice\" : jednaObec.title}</td>\r\n                                            <td>{jednaObec.amount.infected}</td>\r\n                                            <td style={{ color: 'red' }}>\r\n                                                {jednaObec.amount.infected_delta > 0 ?\r\n                                                    \"+\" + jednaObec.amount.infected_delta\r\n                                                    : null}\r\n                                            </td>\r\n                                        </>}\r\n\r\n                                    {/* <td>{jednaObec.amount.infected}\r\n                                        <span className=\"plusPreObecInfected\">{jednaObec.amount.infected_delta > 0 ? \"+\" + jednaObec.amount.infected_delta : ''}</span>\r\n                                    </td> */}\r\n\r\n                                    {/* <td><span className=\"plusPreObecRecovered\">{jednaObec.amount.recovered}</span></td> */}\r\n                                    {/* <td>{jednaObec.females}</td> */}\r\n                                    {/* <td>{jednaObec.males}</td> */}\r\n                                </tr>\r\n                            </>\r\n                            )}\r\n                        </tbody>\r\n                        {/* <tfoot>\r\n                        <tr>\r\n                            <td>Sum</td>\r\n                            <td>$180</td>\r\n                        </tr>\r\n                    </tfoot> */}\r\n                    </table>\r\n\r\n                </div>\r\n                {/* <DougnatChart dataForGraph={dataForTable} /> */}\r\n                {/* {dataForTable ? <DougnatChart dataForGraph={dataForTable} /> : null} */}\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TabulkaMesta\r\n","import React, { useState, useEffect } from 'react'\r\n// import CountUp from 'react-countup'\r\nimport styled, { keyframes } from \"styled-components\";\r\nimport './css/covid.css'\r\n// import './tooltip.css'\r\nimport coronaIcon from \"../imgs/coronaIcon.svg\"\r\nimport wideArrow from \"../imgs/wideArrow.svg\"\r\nimport TabulkaMesta from \"./TabulkaMesta\"\r\nimport FormatNumber from './FormatNumber';\r\n// import DataGrid from \"./DataGrid\"\r\n\r\n\r\n// import DougnatChart from \"./DougnatChart\"\r\n\r\nfunction CovidSK() {\r\n    const [dataSvk, setDataSvk] = useState()\r\n    const svk = 'https://mapa.covid.chat/map_data'\r\n    // const [tabulkaMestaData, setTabulkaMestaData] = useState([])\r\n    const [maxDate, setMaxDate] = useState()\r\n    const [maxDateboolLean, setMaxDateboolLean] = useState(false)\r\n    const [grafNegativneTesty, setGrafNegativneTesty] = useState({ stav: true, styling: { textDecoration: 'none' } })\r\n    const [styleWideArrow, setStyleWideArrow] = useState()\r\n    // const [toolTip, setToolTip] = useState({ background: 'red' })\r\n\r\n    const [state, setState] = useState({\r\n        dataSvk: dataSvk,\r\n        direction: {\r\n            price_usd: 'asc',\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n\r\n        const LoadData = async () => {\r\n            const response = await fetch(svk)\r\n            const data = await response.json()\r\n\r\n            setMaxDate(Object.keys(data.chart).length - 25)\r\n\r\n            setDataSvk([data])\r\n            setState({\r\n                dataSvk: data.map.sort((a, b) => (\r\n                    state.direction['cases'] === 'asc'\r\n                        ? parseFloat(a['cases']) - parseFloat(b['cases'])\r\n                        : parseFloat(b['cases']) - parseFloat(a['cases'])\r\n                )),\r\n                direction: {\r\n                    'cases': state.direction['cases'] === 'asc'\r\n                        ? 'desc'\r\n                        : 'asc'\r\n                }\r\n            })\r\n        }\r\n\r\n        LoadData()\r\n\r\n\r\n    }, [])\r\n\r\n    const negatTestyMoje = [83, 102, 50, 42, 120, 129, 118, 197, 228]\r\n\r\n    // const LoadData = async () => {\r\n    //     const response = await fetch(svk)\r\n    //     const data = await response.json()\r\n\r\n    //     setMaxDate(Object.keys(data.chart).length - 25)\r\n\r\n    //     setDataSvk([data])\r\n    //     setState({\r\n    //         dataSvk: data.map.sort((a, b) => (\r\n    //             state.direction['cases'] === 'asc'\r\n    //                 ? parseFloat(a['cases']) - parseFloat(b['cases'])\r\n    //                 : parseFloat(b['cases']) - parseFloat(a['cases'])\r\n    //         )),\r\n    //         direction: {\r\n    //             'cases': state.direction['cases'] === 'asc'\r\n    //                 ? 'desc'\r\n    //                 : 'asc'\r\n    //         }\r\n    //     })\r\n    // }\r\n\r\n    function handleData() {\r\n        let a = dataSvk[0].chart[Object.keys(dataSvk[0].tested_chart).length].recovered\r\n        let b = dataSvk[0].chart[Object.keys(dataSvk[0].tested_chart).length - 1].recovered\r\n        let c = a - b\r\n        let newRecovered = 0\r\n        if (c > 0) {\r\n            newRecovered = a - b\r\n        }\r\n\r\n        a = dataSvk[0].chart[Object.keys(dataSvk[0].tested_chart).length].deaths\r\n        b = dataSvk[0].chart[Object.keys(dataSvk[0].tested_chart).length - 1].deaths\r\n        c = a - b\r\n        let newDeaths = 0\r\n        if (c > 0) {\r\n            newDeaths = a - b\r\n        }\r\n\r\n\r\n        function GetTheDay() {\r\n            const lastDay = dataSvk[0].tested_chart[Object.keys(dataSvk[0].tested_chart).length - 1].day\r\n            if (lastDay === \"Pondelok\")\r\n                return \"pondelok\"\r\n            else if (lastDay === \"Utorok\")\r\n                return \"utorok\"\r\n            else if (lastDay === \"Streda\")\r\n                return \"stredu\"\r\n            else if (lastDay === \"Štvrtok\")\r\n                return \"štvrtok\"\r\n            else if (lastDay === \"Piatok\")\r\n                return \"piatok\"\r\n            else if (lastDay === \"Sobota\")\r\n                return \"sobotu\"\r\n            else return \"nedeľu\"\r\n\r\n        }\r\n        return (\r\n            <div>\r\n                <div className=\"cardsDiv\">\r\n                    <div className=\"cards cardsSVK\">\r\n                        <div className=\"topCard\">\r\n                            <div className=\"obrDiv\">\r\n                                <div className=\"circle\">\r\n                                    <img alt=\"\" src={coronaIcon} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"textCard\"><b>Slovenské údaje</b></div>\r\n                        </div>\r\n                        <div className=\"mainTextSK\">\r\n                            Počet testovaných: <FormatNumber prop={dataSvk[0].tested} /><br />\r\n                                Z toho pozitívnych testov: {dataSvk[0].infected}<br />\r\n                            Počet aktívnych prípadov: <b>{dataSvk[0].active}</b><br />\r\n                                Počet vyliečených: <span style={{ color: \"green\" }}>{dataSvk[0].recovered}</span><br />\r\n                            {dataSvk[0].deaths > 0 ? <>Počet úmrtí: {dataSvk[0].deaths}<br /></>\r\n                                : null}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"cards cardsSVK\">\r\n                        <div className=\"topCard\"><div className=\"textCard\"><b>Údaje za {GetTheDay()}</b></div></div>\r\n                        <div className=\"mainTextSK\">\r\n                            Počet nových testovaných: <span>{dataSvk[0].tested_chart[Object.keys(dataSvk[0].tested_chart).length - 1].tested}</span><br />\r\n                                Počet negatívnych testov: <span>{dataSvk[0].tested_chart[Object.keys(dataSvk[0].tested_chart).length - 1].tested - dataSvk[0].tested_chart[Object.keys(dataSvk[0].tested_chart).length - 1].infected}</span><br />\r\n                                Počet pozitívnych testov: <span>+{dataSvk[0].tested_chart[Object.keys(dataSvk[0].tested_chart).length - 1].infected}</span>\r\n                            {\r\n                                newRecovered > 0 ?\r\n                                    <> <br />Počet nových vyliečených: {newRecovered}</>\r\n                                    : null\r\n                            }\r\n                            {\r\n                                newDeaths > 0 ?\r\n                                    <>  <br />Počet nových úmrtí: {newDeaths}</>\r\n                                    : null\r\n                            }\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    const Heading = keyframes`\r\n    0%{\r\n        height: 0%;\r\n      }\r\n      100%{\r\n        height: 100%;\r\n      }\r\n    `;\r\n\r\n    const HomeHeader = styled.div`\r\n    height: 100%;\r\n    animation: ${Heading} .7s;\r\n    bottom: 0;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-evenly;\r\n    `;\r\n\r\n    function changeWideArrow() {\r\n        if (!maxDateboolLean) {\r\n            setMaxDate(-1)\r\n            setStyleWideArrow({\r\n                transform: 'rotateY(180deg)',\r\n            })\r\n        }\r\n        else {\r\n            setMaxDate(Object.keys(dataSvk[0].chart).length - 25)\r\n            setStyleWideArrow({\r\n                transform: 'rotateY(0deg)',\r\n            })\r\n        }\r\n        // dataSvk\r\n        setMaxDateboolLean(!maxDateboolLean)\r\n    }\r\n\r\n    function handleGraphAktivnePripady() {\r\n        let maxAktivnychInfikovanych = 0\r\n        dataSvk[0].chart.map(day1 => {\r\n            if (maxAktivnychInfikovanych < (day1.infected - day1.recovered - day1.deaths))\r\n                maxAktivnychInfikovanych = (day1.infected - day1.recovered - day1.deaths)\r\n            return maxAktivnychInfikovanych\r\n        })\r\n        const MaxInfected = 100 / maxAktivnychInfikovanych\r\n\r\n        // function testHover() {\r\n        //     setToolTip({\r\n        //         background: 'blue'\r\n        //     })\r\n        // }\r\n\r\n        // function testLeave() {\r\n        //     setToolTip({\r\n        //         background: 'red'\r\n        //     })\r\n        // }\r\n        return (\r\n            <div className=\"outsideDivGraf\">\r\n                <h1>Aktívne prípady</h1>\r\n                <div className=\"test\" onClick={changeWideArrow} style={styleWideArrow}>\r\n                    <div className=\"wideArrow\">\r\n                        <img alt=\"\" src={wideArrow} />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"svkGraf\">\r\n                    {dataSvk[0].chart.map((day1, index) =>\r\n                        index > maxDate ?\r\n                            <HomeHeader key={index}>\r\n                                {/* <div className=\"divInGraf\" style={toolTip}>{day1.infected}</div> */}\r\n                                <div className=\"aktivnePripadyGraf\" style={{ height: `calc(${MaxInfected * (day1.infected - day1.recovered - day1.deaths)}% )` }} >\r\n                                    {/* <div onMouseOver={testHover} onMouseLeave={testLeave} className=\"stlpcePrvehoGrafu\" style={{ height: `calc(${MaxInfected * (day1.infected - day1.recovered - day1.deaths)}% )` }} > */}\r\n                                    <span className=\"CountPrvehoGrafu\" >{day1.infected - day1.recovered - day1.deaths}</span>\r\n                                    {maxDateboolLean ?\r\n                                        index % 2 === 0 ?\r\n                                            <div className=\"spanDate\">{day1.date}</div>\r\n                                            : null\r\n                                        : <div className=\"spanDate\">{day1.date}</div>}\r\n                                </div>\r\n                            </HomeHeader>\r\n                            : null)}\r\n                </div>\r\n                <div className=\"medzeraPodDatumomGraf1\"></div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function handleGraph1() {\r\n        const MaxInfected = 100 / dataSvk[0].chart[Object.keys(dataSvk[0].chart).length - 1].infected\r\n        return (\r\n            <div className=\"outsideDivGraf\">\r\n                <h1>Celkový prírastok nakazených</h1>\r\n                <div className=\"test\" onClick={changeWideArrow} style={styleWideArrow}>\r\n                    <div className=\"wideArrow\">\r\n                        <img alt=\"\" src={wideArrow} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"svkGraf\">\r\n                    {\r\n                        dataSvk[0].chart.map((day1, index) =>\r\n                            index > maxDate ?\r\n                                <HomeHeader key={index}>\r\n                                    <div className=\"stlpcePrvehoGrafu tooltip\" style={{ height: `calc(${MaxInfected * day1.infected}% )` }} >\r\n                                        <span className=\"CountPrvehoGrafu\" >{day1.infected}</span>\r\n                                        {dataSvk[0].tested_chart[index - 1]\r\n                                            ? <><span className=\"countupFirstRed\">+{dataSvk[0].tested_chart[index - 1].infected}</span>\r\n                                            </>\r\n                                            : <><span className=\"countupFirstRed\">+1</span>\r\n                                            </>}\r\n                                        {\r\n                                            maxDateboolLean ?\r\n                                                index % 2 === 0 ?\r\n                                                    <div className=\"spanDate\">{day1.date}</div>\r\n                                                    : null\r\n                                                : <div className=\"spanDate\">{day1.date}</div>\r\n                                        }\r\n                                    </div>\r\n                                </HomeHeader>\r\n                                : null\r\n                        )\r\n                    }\r\n                </div>\r\n                <div className=\"medzeraPodDatumomGraf1\"></div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function negatTesty() {\r\n        if (grafNegativneTesty.stav)\r\n            setGrafNegativneTesty({ stav: false, styling: { textDecoration: 'line-through' } })\r\n        else\r\n            setGrafNegativneTesty({ stav: true, styling: { textDecoration: 'none' } })\r\n    }\r\n\r\n    function handleGraph2() {\r\n        let MaxDaily = 0\r\n        if (grafNegativneTesty.stav) {\r\n            if (dataSvk) {\r\n                dataSvk[0].tested_chart.map(pom1 => {\r\n                    if (pom1.tested > MaxDaily) {\r\n                        MaxDaily = pom1.tested - pom1.infected\r\n                    }\r\n                    return MaxDaily\r\n                })\r\n                MaxDaily = MaxDaily / 100\r\n            }\r\n        }\r\n        else {\r\n            if (dataSvk) {\r\n                dataSvk[0].tested_chart.map(pom1 => {\r\n                    if (pom1.infected > MaxDaily) {\r\n                        MaxDaily = pom1.infected\r\n                    }\r\n                    return MaxDaily\r\n                })\r\n                MaxDaily = MaxDaily / 100\r\n            }\r\n        }\r\n        return (\r\n            <div className=\"outsideDivGraf\">\r\n                <h1>Denný prírastok negatívnych a pozitívnych testov</h1>\r\n                <div className=\"test\" onClick={changeWideArrow} style={styleWideArrow}>\r\n                    <div className=\"wideArrow\">\r\n                        <img alt=\"\" src={wideArrow} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"svkGraf\">\r\n                    {maxDate === -1 ?\r\n                        <HomeHeader >  {/* prvy stlpec pre druhy graf */}\r\n                            <div className=\"PozitivneTestyDruhyGraf\" style={{ height: `calc(${1 / MaxDaily}%)` }} >\r\n                                <div className=\"spanDate\">{\"06-03-2020\"}</div>\r\n                            </div>\r\n\r\n                            {grafNegativneTesty.stav ?\r\n                                <div className=\"Graf2Stlpce\" style={{ height: `calc(${306 / MaxDaily}%)` }} >\r\n                                    <span className=\"CountDruhehoGrafu\">306</span>\r\n                                    <span className=\"CountDruhehoGrafu nakazeniZaDen\">+1</span>\r\n                                </div>\r\n                                : <div className=\"Graf2Stlpce\" style={{ height: `calc(${1 / MaxDaily}%)` }} >\r\n                                    <span className=\"CountDruhehoGrafu druhyGrafJedenTypSltpca\">+1</span>\r\n                                </div>}\r\n                        </HomeHeader>\r\n                        : ''}\r\n\r\n                    {dataSvk[0].tested_chart.map((day1, index) =>\r\n                        index > maxDate - 1 ?\r\n                            <HomeHeader key={index}>\r\n                                {\r\n                                    <>\r\n                                        <div className=\"PozitivneTestyDruhyGraf\" style={{ height: `calc(${(day1.infected) / MaxDaily}% )` }} >\r\n                                            {/* <div className=\"spanDate\">{day1.date}</div> */}\r\n\r\n                                            {\r\n                                                maxDateboolLean ?\r\n                                                    index % 2 === 0 ?\r\n                                                        null\r\n                                                        : <div className=\"spanDate\">{day1.date}</div>\r\n                                                    : <div className=\"spanDate\">{day1.date}</div>\r\n                                            }\r\n\r\n\r\n                                            {!grafNegativneTesty.stav ?\r\n                                                <span className=\" CountDruhehoGrafu druhyGrafJedenTypSltpca\" >+{day1.infected}</span>\r\n                                                : null}\r\n                                        </div>\r\n                                        {\r\n                                            negatTestyMoje[index]\r\n                                                ? grafNegativneTesty.stav ?\r\n                                                    <div className=\"Graf2Stlpce\" style={{ height: `calc(${negatTestyMoje[index] / MaxDaily}% )` }} >\r\n                                                        {(negatTestyMoje[index] > 99) ? <>\r\n                                                            <span className=\"CountDruhehoGrafu\" style={{ marginLeft: '-2px' }}>{negatTestyMoje[index]}</span>\r\n                                                            <span className=\" CountDruhehoGrafu nakazeniZaDen\">{day1.infected}</span>\r\n                                                        </>\r\n                                                            : <>\r\n                                                                <span className=\"CountDruhehoGrafu\">{negatTestyMoje[index]}</span>\r\n                                                                <span className=\" CountDruhehoGrafu nakazeniZaDen\">+{day1.infected}</span>\r\n                                                            </>\r\n                                                        }\r\n                                                    </div>\r\n                                                    : null\r\n                                                : grafNegativneTesty.stav ?\r\n                                                    <div className=\"Graf2Stlpce\" style={{ height: `calc(${day1.tested / MaxDaily}%)` }} >\r\n                                                        <span className=\"CountDruhehoGrafu\">{day1.tested - day1.infected}</span>\r\n                                                        <span className=\" CountDruhehoGrafu nakazeniZaDen\">+{day1.infected}</span>\r\n                                                    </div>\r\n                                                    : null\r\n                                        }\r\n                                    </>\r\n                                }\r\n                            </HomeHeader>\r\n                            : null\r\n                    )}\r\n                </div>\r\n                <div className=\"vysvetlivkyPodGrafom\">\r\n                    <div style={grafNegativneTesty.styling} onClick={negatTesty}><div className=\"blue\" ></div>Počet negatívnych testov</div>\r\n                    <div><div className=\"red\"></div>Počet pozitívnych testov</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    function sortBy(key) {\r\n        setState({\r\n            dataSvk: dataSvk[0].map.sort((a, b) => (\r\n\r\n                state.direction[key] === 'asc'\r\n                    ? parseFloat(a[key]) - parseFloat(b[key])\r\n                    : <>{parseFloat(b[key]) - parseFloat(a[key])} </>\r\n            )),\r\n            direction: {\r\n                [key]: state.direction[key] === 'asc'\r\n                    ? 'desc'\r\n                    : 'asc'\r\n            }\r\n        })\r\n    }\r\n    return (\r\n        <div className=\"covidApp\">\r\n            {\r\n                dataSvk\r\n                    ? <>\r\n                        {handleData()}\r\n                        {/* <DataGrid data={dataSvk[0].map} /> */}\r\n\r\n                        <TabulkaMesta tabulkaData={dataSvk[0].districts} sortBy={sortBy} />\r\n                        {/* <div className=\"tooltip\">Hover over me\r\n                        <div className=\"tooltiptext\">Tooltip text</div>\r\n                        </div> */}\r\n                        {/* <DougnatChart /> */}\r\n\r\n                        {handleGraphAktivnePripady()}\r\n\r\n                        {handleGraph1()}\r\n                        {handleGraph2()}\r\n                    </>\r\n                    : ''\r\n\r\n\r\n            }\r\n            <br></br><br></br><br></br><br></br>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default CovidSK\r\n"],"sourceRoot":""}