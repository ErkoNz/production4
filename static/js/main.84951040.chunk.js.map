{"version":3,"sources":["Nav.js","Covid/components/FormatNumber.js","Covid/PrvyRiadokTabulky.js","Covid/SvetTabulka.js","Covid/DougnatChart.js","Covid/CovidApp.js","Covid/CompareCislo.js","Covid/TabulkaMesta.js","Covid/CovidSK.js","Covid/BarGraf.js","Covid/GrafyKrajina.js","App.js","index.js","imgs/coronaIcon.svg","imgs/wideArrow.svg","imgs/earth.svg","imgs/slovakiaIcon.svg"],"names":["Nav","useState","state","setState","navStyle","color","useEffect","a","fetch","response","json","data","tested_chart","length","LoadData","className","style","to","alt","src","earthIcon","slovakiaIcon","day","infected","FormatNumber","num","prop","toString","replace","PrvyRiadokTabulky","props","dataKontinenty","setDataKontinenty","doTabulkyPrvyRiadok","setDoTabulkyPrvyRiadok","sipkyDole","setSipkyDole","transition","marginBottom","marginLeft","sipkaKontinenty","setSipkaKontinenty","position","left","styleForRollDown","setStyleForRollDown","axios","get","then","res","result","filter","obj","continent","kontinent","mainData","console","log","key","background","onClick","transform","tests","cases","active","todayCases","deaths","fontWeight","todayDeaths","recovered","map","oneKontinent","id","width","SvetTabulka","ikonka","setIkonka","setKontinent","scrollPerformance","setScrollPerformance","Svet","boxShadow","Europe","V4","North_America","Asia","South_America","Africa","Australia_Oceania","style4Buttons","setStyle4Buttons","pomForStyleButtons","constStyleforButtons","useReducer","action","type","prevState","Error","dispatch","zmenIkonku","myStyle2","window","addEventListener","document","querySelector","getBoundingClientRect","y","greenBackgroundforTR","onKeyUp","tr","td","i","getElementById","value","toUpperCase","getElementsByTagName","textContent","innerText","indexOf","display","placeholder","sortBy","countriesData","item","country","htmlFor","DougnatChart","labels","datasets","label","backgroundColor","height","options","maintainAspectRatio","tooltips","callbacks","title","tooltipItem","dataset","totalSpolu","percent","Math","round","centerText","text","animation","duration","easing","CovidApp","setMainData","doughnatData","setDoughnatData","setCountriesData","direction","price_usd","numberTrans3","b","output","toFixed","response1","data1","sort","parseFloat","fetchData","coronaIcon","CompareCislo","sorting","stlpec","A","amount","B","JSON","parse","localStorage","getItem","infected_delta","TabulkaMesta","tabulkaData","setSorting","ShowHide","setShowHide","boolean","textPreZobrazenieObci","setTextPreZobrazenieObci","sipkaObce","setSipkaObce","handleSortObce","setItem","stringify","s","jednaObec","index","CovidSK","dataSvk","setDataSvk","maxDate","setMaxDate","maxDateboolLean","setMaxDateboolLean","stav","styling","textDecoration","grafNegativneTesty","setGrafNegativneTesty","styleWideArrow","setStyleWideArrow","Object","keys","chart","negatTestyMoje","Heading","keyframes","HomeHeader","styled","div","changeWideArrow","negatTesty","c","newRecovered","newDeaths","tested","lastDay","GetTheDay","handleData","districts","maxAktivnychInfikovanych","day1","MaxInfected","wideArrow","date","handleGraphAktivnePripady","handleGraph1","MaxDaily","pom1","handleGraph2","BarGraf","allData","dataSetsCases","datumy","dataSetsDeaths","dataSetsRecovered","dataSetsActiveCases","dataSetsDailyCases","slice","responsive","legend","padding","e","legendItem","Chart","defaults","datasetIndex","ci","this","meta","getDatasetMeta","hidden","update","scales","xAxes","stacked","gridLines","yAxes","ticks","callback","mode","intersect","yLabel","onProgress","nacitatViacUdajov","chartInstance","ctx","textAlign","fillStyle","textBaseline","innerWidth","font","forEach","controller","bar","_chartjs","listeners","legendItems","jedno","_model","datasetLabel","fillText","FormatNumberShorter","x","isNaN","GrafyKrajina","match","dataforChart","setDataforChart","bool","loadMoreData","setLoadMoreData","dailyCases","valueActiveCases","params","valuesCases","values","valueRecovered","valueDeaths","timeline","jedenDatum","d","Date","datestring","getDate","getMonth","getFullYear","oneCase","splice","fillColor","hoverBackgroundColor","App","basename","path","component","exact","ReactDOM","render","module","exports"],"mappings":"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","file":"static/js/main.84951040.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport './nav.css'\r\nimport earthIcon from \"./imgs/earth.svg\"\r\nimport slovakiaIcon from \"./imgs/slovakiaIcon.svg\"\r\n\r\nfunction Nav() {\r\n    const [state, setState] = useState()\r\n    let navStyle = {\r\n        color: 'white',\r\n    }\r\n    useEffect(() => {\r\n        const LoadData = async () => {\r\n            const response = await fetch('https://mapa.covid.chat/map_data')\r\n            const data = await response.json()\r\n\r\n            setState(data.tested_chart[data.tested_chart.length - 1])\r\n        }\r\n        LoadData()\r\n    }, [])\r\n\r\n\r\n\r\n\r\n    // function doubleClickFC() {\r\n    //     window.location.href = \"#/Todo\"\r\n    // }\r\n\r\n    return (\r\n        <nav className=\"navApp\" >\r\n            <ul className=\"navLinks\">\r\n                <li>\r\n                    <Link style={navStyle} to='/Covid/CovidApp'>\r\n                        <div>\r\n                            <img alt=\"\" src={earthIcon} className=\"earthIcon\" />Covid vo svete\r\n                        </div>\r\n                    </Link>\r\n                </li>\r\n                <li>\r\n                    <Link style={navStyle} to='/Covid/CovidSK'>\r\n                        <div>\r\n                            <img alt=\"\" src={slovakiaIcon} className=\"svkIcon\" />Covid na Slovensku\r\n                           <div className=\"novePripady\">\r\n                                {state ? <div>{state.day}: <span>{state.infected}</span> prípadov</div> : null}\r\n                            </div>\r\n                        </div>\r\n                    </Link>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","function FormatNumber(num) {\r\n    if (num && num.prop > 999) {\r\n        return num.prop.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \")\r\n    }\r\n    else if (num) { return num.prop }\r\n    else { return null }\r\n}\r\n\r\nexport default FormatNumber\r\n","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport FormatNumber from './components/FormatNumber'\r\nimport { IoIosArrowUp } from 'react-icons/io';\r\n\r\nfunction PrvyRiadokTabulky(props) {\r\n    // console.log(props)\r\n    const [dataKontinenty, setDataKontinenty] = useState()\r\n    const [doTabulkyPrvyRiadok, setDoTabulkyPrvyRiadok] = useState()\r\n    const [sipkyDole, setSipkyDole] = useState(true)\r\n    const [sipkaKontinenty, setSipkaKontinenty] = useState({\r\n        transition: 'all .2s ease-in',\r\n        marginBottom: '-3px',\r\n        marginLeft: '3px',\r\n    })\r\n    const [styleForRollDown, setStyleForRollDown] = useState({\r\n        position: 'absolute',\r\n        left: '-1000px',\r\n        transition: 'all .2s ease-in',\r\n        // fontSize: '15px',\r\n    })\r\n\r\n    useEffect(() => {\r\n        axios.get(`https://disease.sh/v2/continents`)\r\n            .then(res => {\r\n                setDataKontinenty([res.data])\r\n            })\r\n\r\n        // const fetchData = async () => {\r\n        //     let result = await fetch(\"https://disease.sh/v2/continents\");\r\n        //     let response = await result.json();\r\n        //     setDataKontinenty([response]);\r\n        // };\r\n        // fetchData();\r\n\r\n        // console.log(pom1)\r\n        // if (pom1) {\r\n        //     let result = pom1.filter(obj => {\r\n        //         return obj.continent === props.kontinent\r\n        //     })\r\n        //     console.log(result[0])\r\n        //     setDoTabulkyPrvyRiadok(result[0])\r\n        //     console.log(\"asdasdasdasdadadadadasd\")\r\n        // }\r\n\r\n        if (dataKontinenty) {\r\n            let result = dataKontinenty[0].filter(obj => {\r\n                return obj.continent === props.kontinent\r\n            })\r\n            setDoTabulkyPrvyRiadok(result[0])\r\n        }\r\n    }, [props.kontinent])\r\n\r\n\r\n    const rollDownContintinents = () => {\r\n        setSipkyDole(!sipkyDole)\r\n        if (sipkyDole) {\r\n            setSipkaKontinenty({\r\n                transform: \"rotate(180deg)\",\r\n                transition: 'all .2s ease-in',\r\n                marginBottom: '-3px',\r\n                marginLeft: '3px',\r\n            })\r\n            setStyleForRollDown({\r\n                // background: 'rgb(234, 234, 234)',\r\n                // fontSize: '15px',\r\n                transition: 'all .2s ease-in',\r\n            })\r\n        }\r\n        else {\r\n            setStyleForRollDown({\r\n                position: 'absolute',\r\n                left: '-1000px',\r\n                transition: 'all .2s ease-in',\r\n                // fontSize: '15px',\r\n            })\r\n\r\n            setSipkaKontinenty({\r\n                transform: \"rotate(0deg)\",\r\n                transition: 'all .2s ease-in',\r\n                marginBottom: '-3px',\r\n                marginLeft: '3px',\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        styleForRollDown && dataKontinenty && sipkaKontinenty && styleForRollDown && props.mainData && props ?\r\n            <>\r\n                {console.log(\"PrvyRiadokTabulky\")}\r\n                {/* {console.log(styleForRollDown, dataKontinenty, sipkaKontinenty, styleForRollDown, props.mainData, props)} */}\r\n                {props.kontinent === \"Svet\" ?\r\n                    <>\r\n                        <tr key={-1} style={{ background: 'rgb(234, 234, 234)' }} >\r\n                            <td onClick={rollDownContintinents}>\r\n                                <span className=\"spanJustHoverPointer\" >Celý Svet <IoIosArrowUp style={sipkaKontinenty} />\r\n                                    <div className=\"firstCase\">\r\n                                        <div className=\"firstCaseNumber\"><FormatNumber prop={props.mainData[0].tests} />\r\n                                        </div>\r\n                                    </div>\r\n                                </span>\r\n                            </td>\r\n                            <td><FormatNumber prop={props.mainData[0].cases} /></td>\r\n                            <td><FormatNumber prop={props.mainData[0].active} /></td>\r\n                            <td style={{ background: 'rgba(254, 255, 194, .4)' }}>+<FormatNumber prop={props.mainData[0].todayCases} /></td>\r\n                            <td><FormatNumber prop={props.mainData[0].deaths} /></td>\r\n                            <td style={{ color: ' rgba(156, 20, 20, 0.849)', fontWeight: 'bold' }}>+<FormatNumber prop={props.mainData[0].todayDeaths} /></td>\r\n                            <td style={{ fontWeight: 'bold', color: '#006600' }}><FormatNumber prop={props.mainData[0].recovered} /></td>\r\n                        </tr>\r\n                        {\r\n                            dataKontinenty[0].map((oneKontinent, id) => (\r\n                                <tr key={id} className=\"zrolovaneKontinenty\" style={styleForRollDown} >\r\n                                    <td style={{ width: '100px' }}>\r\n                                        {oneKontinent.continent}\r\n                                        <div className=\"firstCase\"><div className=\"firstCaseNumber\"><FormatNumber prop={oneKontinent.tests} /></div></div>\r\n                                    </td>\r\n                                    <td><FormatNumber prop={oneKontinent.cases} /></td>\r\n                                    <td><FormatNumber prop={oneKontinent.active} /></td>\r\n                                    <td style={{}}>+<FormatNumber prop={oneKontinent.todayCases} /></td>\r\n                                    <td><FormatNumber prop={oneKontinent.deaths} /></td>\r\n                                    <td style={{ color: ' rgba(156, 20, 20, 0.849)', fontWeight: 'bold' }}>+<FormatNumber prop={oneKontinent.todayDeaths} /></td>\r\n                                    <td style={{ fontWeight: 'bold', color: '#006600' }}><FormatNumber prop={oneKontinent.recovered} /></td>\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                    </>\r\n                    :\r\n                    <>\r\n                        {doTabulkyPrvyRiadok ?\r\n                            <tr key={-10} style={{ background: 'rgb(234, 234, 234)' }} >\r\n                                <td style={{ width: '100px' }}>\r\n                                    {doTabulkyPrvyRiadok.continent}\r\n                                    <div className=\"firstCase\"><div className=\"firstCaseNumber\"><FormatNumber prop={doTabulkyPrvyRiadok.tests} /></div></div>\r\n                                </td>\r\n                                <td><FormatNumber prop={doTabulkyPrvyRiadok.cases} /></td>\r\n                                <td><FormatNumber prop={doTabulkyPrvyRiadok.active} /></td>\r\n                                <td style={{}}>+<FormatNumber prop={doTabulkyPrvyRiadok.todayCases} /></td>\r\n                                <td><FormatNumber prop={doTabulkyPrvyRiadok.deaths} /></td>\r\n                                <td style={{ color: ' rgba(156, 20, 20, 0.849)', fontWeight: 'bold' }}>+<FormatNumber prop={doTabulkyPrvyRiadok.todayDeaths} /></td>\r\n                                <td style={{ fontWeight: 'bold', color: '#006600' }}><FormatNumber prop={doTabulkyPrvyRiadok.recovered} /></td>\r\n                            </tr>\r\n                            : null}\r\n                    </>\r\n                }\r\n            </>\r\n            : null\r\n    )\r\n}\r\n\r\nexport default PrvyRiadokTabulky\r\n","import React, { useState, useReducer } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { FaSortAmountDown } from 'react-icons/fa';\r\nimport PrvyRiadokTabulky from './PrvyRiadokTabulky';\r\nimport FormatNumber from './components/FormatNumber'\r\nimport './css/TabulkaSvet.css'\r\n\r\n\r\nfunction SvetTabulka(props) {\r\n    const [ikonka, setIkonka] = useState('cases')\r\n    const [kontinent, setKontinent] = useState(\"Svet\")\r\n    const [scrollPerformance, setScrollPerformance] = useState(false)\r\n    const [style4Buttons, setStyle4Buttons] = useState({\r\n        Svet: { background: '#e5e5e5', boxShadow: 'inset 0px 0px 5px #c1c1c1' },\r\n        Europe: null,\r\n        V4: null,\r\n        North_America: null,\r\n        Asia: null,\r\n        South_America: null,\r\n        Africa: null,\r\n        Australia_Oceania: null,\r\n    })\r\n\r\n    const pomForStyleButtons = {\r\n        Svet: null,\r\n        Europe: null,\r\n        V4: null,\r\n        North_America: null,\r\n        Asia: null,\r\n        South_America: null,\r\n        Africa: null,\r\n        Australia_Oceania: null,\r\n    }\r\n    const constStyleforButtons = {\r\n        background: '#e5e5e5',\r\n        // background: 'rgb(216, 216, 216)',\r\n        boxShadow: 'inset 0px 0px 5px rgb(179, 179, 179)',\r\n        // transform: \"translate(1px,2px)\",\r\n        // fontWeight: 'bold'\r\n        // color: 'white'\r\n    }\r\n    const [state, dispatch] = useReducer(reducer, 1);\r\n\r\n\r\n    function reducer(state, action) {\r\n        switch (action.type) {\r\n            case 'Svet':\r\n                setKontinent(\"Svet\")\r\n                return (setStyle4Buttons(prevState => {\r\n                    return { ...pomForStyleButtons, Svet: constStyleforButtons }\r\n                }))\r\n            case 'Europe':\r\n                setKontinent(\"Europe\")\r\n                return (setStyle4Buttons(prevState => {\r\n                    return { ...pomForStyleButtons, Europe: constStyleforButtons }\r\n                }))\r\n            case 'V4':\r\n                setKontinent(\"V4\")\r\n                return (setStyle4Buttons(prevState => {\r\n                    return { ...pomForStyleButtons, V4: constStyleforButtons }\r\n                }))\r\n            case 'North America':\r\n                setKontinent(\"North America\")\r\n                return (setStyle4Buttons(prevState => {\r\n                    return { ...pomForStyleButtons, North_America: constStyleforButtons }\r\n                }))\r\n            case 'Asia':\r\n                setKontinent(\"Asia\")\r\n                return (setStyle4Buttons(prevState => {\r\n                    return { ...pomForStyleButtons, Asia: constStyleforButtons }\r\n                }))\r\n            case 'South America':\r\n                setKontinent(\"South America\")\r\n                return (setStyle4Buttons(prevState => {\r\n                    return { ...pomForStyleButtons, South_America: constStyleforButtons }\r\n                }))\r\n            case 'Africa':\r\n                setKontinent(\"Africa\")\r\n                return (setStyle4Buttons(prevState => {\r\n                    return { ...pomForStyleButtons, Africa: constStyleforButtons }\r\n                }))\r\n            case 'Australia/Oceania':\r\n                setKontinent(\"Australia/Oceania\")\r\n                return (setStyle4Buttons(prevState => {\r\n                    return { ...pomForStyleButtons, Australia_Oceania: constStyleforButtons }\r\n                }))\r\n\r\n\r\n            default:\r\n                throw new Error();\r\n        }\r\n    }\r\n\r\n\r\n\r\n    function zmenIkonku(key) {\r\n        if (key === ikonka) {\r\n            setIkonka(key + \"2\")\r\n        }\r\n        else { setIkonka(key) }\r\n    }\r\n\r\n    const myStyle2 = {\r\n        transform: \"rotateX(180deg)\",\r\n    }\r\n\r\n    // useEffect(() => {\r\n    //     axios.get(`https://disease.sh/v2/continents`)\r\n    //         .then(res => {\r\n    //             setDataKontinenty([res.data])\r\n    //             // console.log(res.data)\r\n    //         })\r\n    // }, [])\r\n\r\n\r\n    const myFunction = () => {\r\n        var input, filter, table, tr, td, i, txtValue;\r\n        input = document.getElementById(\"myInput\");\r\n        filter = input.value.toUpperCase();\r\n        table = document.getElementById(\"myTable\");\r\n        tr = table.getElementsByTagName(\"tr\");\r\n        for (i = 0; i < tr.length; i++) {\r\n            td = tr[i].getElementsByTagName(\"td\")[0];\r\n            if (td) {\r\n                txtValue = td.textContent || td.innerText;\r\n                if (txtValue.toUpperCase().indexOf(filter) > -1) {\r\n                    tr[i].style.display = \"\";\r\n                } else {\r\n                    tr[i].style.display = \"none\";\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    window.addEventListener('scroll', function () {\r\n        if (document.querySelector('.scrollingSvet')) {\r\n            if (document.querySelector('.scrollingSvet').getBoundingClientRect().y < 170)\r\n                setScrollPerformance(true)\r\n        }\r\n    });\r\n\r\n    const greenBackgroundforTR = (active) => {\r\n        if (active)\r\n            return null\r\n        else\r\n            return ({ background: 'rgb(190, 245, 204)' })\r\n    }\r\n\r\n    // function Testing2(pom) {\r\n    //     setKontinent(prevKontinent => { return pom })\r\n\r\n\r\n    //     // });\r\n    // }\r\n\r\n    return (\r\n        ikonka && kontinent && props ?\r\n            <>\r\n                {console.log(\"svetTabulka\")}\r\n                <input type=\"text\" id=\"myInput\" onKeyUp={myFunction} placeholder=\"Hľadať..\" className=\"inputSearch\" />\r\n                <div className=\"kontinenty\">\r\n                    <button onClick={() => dispatch({ type: 'Svet' })} style={style4Buttons.Svet}>\r\n                        Svet\r\n                    </button>\r\n                    <button onClick={() => dispatch({ type: 'Europe' })} style={style4Buttons.Europe}>\r\n                        Európa\r\n                    </button>\r\n                    <button onClick={() => dispatch({ type: 'V4' })} style={style4Buttons.V4}>\r\n                        V4\r\n                    </button>\r\n                    <button onClick={() => dispatch({ type: 'North America' })} style={style4Buttons.North_America}>\r\n                        Severná Amerika\r\n                    </button>\r\n                    <button onClick={() => dispatch({ type: 'Asia' })} style={style4Buttons.Asia}>\r\n                        Ázia\r\n                    </button>\r\n                    <button onClick={() => dispatch({ type: 'South America' })} style={style4Buttons.South_America}>\r\n                        Južná Amerika\r\n                    </button>\r\n                    <button onClick={() => dispatch({ type: 'Africa' })} style={style4Buttons.Africa}>\r\n                        Afrika\r\n                    </button>\r\n                    <button onClick={() => dispatch({ type: 'Australia/Oceania' })} style={style4Buttons.Australia_Oceania}>\r\n                        Austrália/Oceánia\r\n                    </button>\r\n\r\n                </div>\r\n                <div className=\"divTable\" >\r\n                    <table id=\"myTable\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th onClick={() => (props.sortBy(\"tests\") || zmenIkonku(\"tests\"))} >\r\n                                    Krajina<br></br>\r\n                                    <div className=\"firstCase\" style={{ fontWeight: 'normal' }}>Počet testov</div>\r\n                                    {ikonka === \"tests\"\r\n                                        ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                    {ikonka === \"tests2\"\r\n                                        ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                </th>\r\n                                <th onClick={() => (props.sortBy('cases') || zmenIkonku('cases'))} >\r\n                                    Počet nakazených\r\n                            {ikonka === \"cases\"\r\n                                        ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                    {ikonka === \"cases2\"\r\n                                        ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                </th>\r\n                                <th onClick={() => (props.sortBy(\"active\") || zmenIkonku(\"active\"))} >\r\n                                    Aktívne prípady\r\n                            {ikonka === \"active\"\r\n                                        ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                    {ikonka === \"active2\"\r\n                                        ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                </th>\r\n                                <th onClick={() => (props.sortBy(\"todayCases\") || zmenIkonku(\"todayCases\"))} >\r\n                                    Nové prípady\r\n                            {ikonka === \"todayCases\"\r\n                                        ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                    {ikonka === \"todayCases2\"\r\n                                        ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                </th>\r\n                                <th onClick={() => (props.sortBy(\"deaths\") || zmenIkonku(\"deaths\"))} >\r\n                                    Počet úmrtí\r\n                            {ikonka === \"deaths\"\r\n                                        ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                    {ikonka === \"deaths2\"\r\n                                        ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                </th>\r\n                                <th onClick={() => (props.sortBy(\"todayDeaths\") || zmenIkonku(\"todayDeaths\"))} >\r\n                                    Nové úmrtia\r\n                            {ikonka === \"todayDeaths\"\r\n                                        ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                    {ikonka === \"todayDeaths2\"\r\n                                        ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                </th>\r\n                                <th onClick={() => (props.sortBy(\"recovered\") || zmenIkonku(\"recovered\"))} >\r\n                                    Počet vyliečených\r\n                            {ikonka === \"recovered\"\r\n                                        ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                    {ikonka === \"recovered2\"\r\n                                        ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {console.log(\"tbodyyyy\")}\r\n\r\n                            <PrvyRiadokTabulky kontinent={kontinent} mainData={props.mainData} />\r\n\r\n                            {kontinent === \"Svet\" ?\r\n                                <>\r\n                                    {props.countriesData.map((item, id) => (\r\n                                        scrollPerformance || id < 20 ?\r\n                                            <tr className=\"scrollingSvet\" key={id} style={greenBackgroundforTR(item.active)}>\r\n                                                <td style={{ width: '100px' }}>\r\n                                                    <Link to={`/Covid/CovidApp/${item.country}`} >\r\n\r\n                                                        <span className=\"KrajinaLink\" >{item.country}</span>\r\n                                                        {/* <Link to={`/Covid/GrafyKrajina/${item.country}`}>{item.country}</Link> */}\r\n                                                        {/*<Link to='/Covid/CovidSK'>Slovenské údaje </Link> */}\r\n\r\n                                                        {item.tests > 0 ?\r\n                                                            <div className=\"firstCase\">\r\n                                                                <div className=\"firstCaseNumber\">\r\n                                                                    <FormatNumber prop={item.tests} />\r\n                                                                </div>\r\n                                                            </div>\r\n                                                            : null}\r\n                                                    </Link>\r\n\r\n                                                </td>\r\n                                                <td><FormatNumber prop={item.cases} /></td>\r\n                                                <td>{item.active ? <FormatNumber prop={item.active} /> : \"0\"}</td>\r\n\r\n                                                {item.todayCases > 0 ?\r\n                                                    <td style={{ background: ' rgb(254, 255, 194)' }}>+<FormatNumber prop={item.todayCases} /> </td>\r\n                                                    : <td></td>\r\n                                                }\r\n                                                <td><FormatNumber prop={item.deaths} /></td>\r\n                                                {item.todayDeaths > 0 ?\r\n                                                    <td style={{ color: ' rgba(156, 20, 20, 0.849)', fontWeight: 'bold' }}>+<FormatNumber prop={item.todayDeaths} /> </td>\r\n                                                    : <td></td>\r\n                                                }\r\n                                                <td style={{ fontWeight: 'bold', color: '#006600' }}><FormatNumber prop={item.recovered} /></td>\r\n                                            </tr>\r\n                                            : null\r\n                                    ))\r\n                                    }\r\n                                </>\r\n\r\n                                : kontinent === \"V4\" ?\r\n                                    <>\r\n                                        {props.countriesData.map((item, id) => (\r\n                                            item.country === \"Slovakia\"\r\n                                                || item.country === \"Czechia\"\r\n                                                || item.country === \"Hungary\"\r\n                                                || item.country === \"Poland\"\r\n                                                || item.country === \"Austria\"\r\n                                                || item.country === \"Ukraine\" ?\r\n\r\n                                                <tr className=\"scrollingSvet\" key={id} style={greenBackgroundforTR(item.active)}>\r\n                                                    {console.log(item.country)}\r\n\r\n                                                    <td style={{ width: '100px' }}>\r\n                                                        <Link to={`/Covid/CovidApp/${item.country}`} >\r\n\r\n                                                            <span className=\"KrajinaLink\" >{item.country}</span>\r\n                                                            {/* <Link to={`/Covid/GrafyKrajina/${item.country}`}>{item.country}</Link> */}\r\n                                                            {/*<Link to='/Covid/CovidSK'>Slovenské údaje </Link> */}\r\n\r\n                                                            {item.tests > 0 ?\r\n                                                                <div className=\"firstCase\">\r\n                                                                    <div className=\"firstCaseNumber\">\r\n                                                                        <FormatNumber prop={item.tests} />\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                                : null}\r\n                                                        </Link>\r\n\r\n                                                    </td>\r\n                                                    <td><FormatNumber prop={item.cases} /></td>\r\n                                                    <td>{item.active ? <FormatNumber prop={item.active} /> : \"0\"}</td>\r\n\r\n                                                    {item.todayCases > 0 ?\r\n                                                        <td style={{ background: ' rgb(254, 255, 194)' }}>+<FormatNumber prop={item.todayCases} /> </td>\r\n                                                        : <td></td>\r\n                                                    }\r\n                                                    <td><FormatNumber prop={item.deaths} /></td>\r\n                                                    {item.todayDeaths > 0 ?\r\n                                                        <td style={{ color: ' rgba(156, 20, 20, 0.849)', fontWeight: 'bold' }}>+<FormatNumber prop={item.todayDeaths} /> </td>\r\n                                                        : <td></td>\r\n                                                    }\r\n                                                    <td style={{ fontWeight: 'bold', color: '#006600' }}><FormatNumber prop={item.recovered} /></td>\r\n                                                </tr>\r\n                                                : null\r\n                                        ))\r\n                                        }\r\n                                    </>\r\n\r\n                                    :\r\n                                    props.countriesData.map((item, id) => (\r\n                                        item.continent === kontinent ?\r\n                                            <tr key={id} style={greenBackgroundforTR(item.active)}>\r\n                                                {/* {console.log(item)} */}\r\n                                                <td style={{ width: '100px' }}>\r\n                                                    <Link to={`/Covid/CovidApp/${item.country}`} >\r\n\r\n                                                        <span className=\"KrajinaLink\" >{item.country}</span>\r\n                                                        {/* <Link to={`/Covid/GrafyKrajina/${item.country}`}>{item.country}</Link> */}\r\n                                                        {/*<Link to='/Covid/CovidSK'>Slovenské údaje </Link> */}\r\n\r\n                                                        {item.tests > 0 ?\r\n                                                            <div className=\"firstCase\">\r\n                                                                <div className=\"firstCaseNumber\">\r\n                                                                    <FormatNumber prop={item.tests} />\r\n                                                                </div>\r\n                                                            </div>\r\n                                                            : null}\r\n                                                    </Link>\r\n\r\n                                                </td>\r\n                                                <td><FormatNumber prop={item.cases} /></td>\r\n                                                <td>{item.active ? <FormatNumber prop={item.active} /> : \"0\"}</td>\r\n                                                {item.todayCases > 0 ?\r\n                                                    <td style={{ background: ' rgb(254, 255, 194)' }}>+<FormatNumber prop={item.todayCases} /> </td>\r\n                                                    : <td></td>\r\n                                                }\r\n                                                <td><FormatNumber prop={item.deaths} /></td>\r\n                                                {item.todayDeaths > 0 ?\r\n                                                    <td style={{ color: ' rgba(156, 20, 20, 0.849)', fontWeight: 'bold' }}>+<FormatNumber prop={item.todayDeaths} /> </td>\r\n                                                    : <td></td>\r\n                                                }\r\n                                                <td style={{ fontWeight: 'bold', color: 'green' }}><FormatNumber prop={item.recovered} /></td>\r\n                                            </tr>\r\n                                            : null\r\n                                    ))\r\n                            }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                            {/* {\r\n                        props.countriesData.map((item, id) => (\r\n                            <>\r\n                                {item.continent === kontinent ?\r\n                            <tr key={id} style={greenBackgroundforTR(item.active)}>\r\n                                <td style={{ width: '100px' }}>\r\n                                    {item.country === 'Slovakia' ?\r\n                                        <div style={{ fontWeight: 'bold', textDecoration: 'underline' }}>\r\n                                            <Link to='/Covid/CovidSK'>{item.country}</Link>\r\n                                        </div>\r\n                                        : item.country\r\n                                    }\r\n                                    {item.tests > 0 ?\r\n                                        <div className=\"firstCase\">Počet testov:\r\n                                                    <div className=\"firstCaseNumber\">\r\n                                                <FormatNumber prop={item.tests} />\r\n                                            </div>\r\n                                        </div>\r\n                                        : null}\r\n                                </td>\r\n                                <td><FormatNumber prop={item.cases} /></td>\r\n                                <td>{item.active ? <FormatNumber prop={item.active} /> : \"0\"}</td>\r\n                                {item.todayCases > 0 ?\r\n                                    <td style={{ background: ' rgb(254, 255, 194)' }}>+<FormatNumber prop={item.todayCases} /> </td>\r\n                                    : <td></td>\r\n                                }\r\n                                <td><FormatNumber prop={item.deaths} /></td>\r\n                                {item.todayDeaths > 0 ?\r\n                                    <td style={{ color: ' rgba(156, 20, 20, 0.849)', fontWeight: 'bold' }}>+<FormatNumber prop={item.todayDeaths} /> </td>\r\n                                    : <td></td>\r\n                                }\r\n                                <td style={{ fontWeight: 'bold', color: 'green' }}><FormatNumber prop={item.recovered} /></td>\r\n                            </tr>\r\n                                    :\r\n                                    kontinent === \"Svet\" ?\r\n                            <tr key={id} style={greenBackgroundforTR(item.active)}>\r\n                                <td style={{ width: '100px' }}>\r\n                                    {item.country === 'Slovakia' ?\r\n                                        <div style={{ fontWeight: 'bold', textDecoration: 'underline' }}>\r\n                                            <Link to='/Covid/CovidSK'>{item.country}</Link>\r\n                                        </div>\r\n                                        : item.country\r\n                                    }\r\n                                    {item.tests > 0 ?\r\n                                        <div className=\"firstCase\">Počet testov:\r\n                                                    <div className=\"firstCaseNumber\">\r\n                                                <FormatNumber prop={item.tests} />\r\n                                            </div>\r\n                                        </div>\r\n                                        : null}\r\n                                </td>\r\n\r\n                                <td><FormatNumber prop={item.cases} /></td>\r\n                                <td>{item.active ? <FormatNumber prop={item.active} /> : \"0\"}</td>\r\n\r\n                                {item.todayCases > 0 ?\r\n                                    <td style={{ background: ' rgb(254, 255, 194)' }}>+<FormatNumber prop={item.todayCases} /> </td>\r\n                                    : <td></td>\r\n                                }\r\n                                <td><FormatNumber prop={item.deaths} /></td>\r\n                                {item.todayDeaths > 0 ?\r\n                                    <td style={{ color: ' rgba(156, 20, 20, 0.849)', fontWeight: 'bold' }}>+<FormatNumber prop={item.todayDeaths} /> </td>\r\n                                    : <td></td>\r\n                                }\r\n                                <td style={{ fontWeight: 'bold', color: 'green' }}><FormatNumber prop={item.recovered} /></td>\r\n                            </tr>\r\n                            : null\r\n                                }\r\n                            </>\r\n                        ))} */}\r\n                        </tbody>\r\n                    </table>\r\n                    <label htmlFor=\"myInput\">.</label>\r\n                </div>\r\n            </>\r\n            : null\r\n    )\r\n}\r\n\r\nexport default SvetTabulka","import React from 'react'\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport './css/csspreSvk.css'\r\nfunction DougnatChart(props) {\r\n    // console.log(props.dataForGraph[props.dataForGraph.length - 1])\r\n    // console.log(props)\r\n    const data = {\r\n        labels: ['Nakazení', 'Vyliečení', 'Úmrtia'],\r\n        datasets: [{\r\n            label: '# of Votes',\r\n            data: [props.cases, props.recovered, props.deaths],\r\n            backgroundColor: [\r\n                '#f85959',\r\n                '#17b978',\r\n                '#430d27',\r\n            ],\r\n        }]\r\n    }\r\n\r\n\r\n    // const data = {\r\n    //     labels: props.dataForGraph.labels,\r\n    //     datasets: [{\r\n    //         label: '# of Votes',\r\n    //         data: props.dataForGraph.data,\r\n    //         backgroundColor: props.dataForGraph.backgroundColor,\r\n    //     }]\r\n    // }\r\n\r\n    // const data = {\r\n    //     labels: ['Nakazení', 'Vyliečení'],\r\n    //     datasets: [{\r\n    //         label: '# of Votes',\r\n    //         data: [10, 20],\r\n    //         backgroundColor: ['red', 'blue'],\r\n    //     }]\r\n    // }\r\n\r\n\r\n    return (\r\n        props && data ?\r\n            <div>\r\n                {console.log(\"DougnatChart\")}\r\n                <div className=\"dougnut\">\r\n                    <Doughnut\r\n                        data={data}\r\n                        height={300}\r\n                        options={{\r\n                            maintainAspectRatio: false,\r\n                            tooltips: {\r\n                                callbacks: {\r\n                                    title: function (tooltipItem, data) {\r\n                                        return data['labels'][tooltipItem[0]['index']];\r\n                                    },\r\n                                    label: function (tooltipItem, data) {\r\n                                        var dataset = data.datasets[0]\r\n                                        // console.log(dataset.data[0])\r\n                                        let totalSpolu = dataset.data[0] + dataset.data[1] + dataset.data[2]\r\n                                        let percent = data['datasets'][0]['data'][tooltipItem['index']] / totalSpolu\r\n                                        // console.log(data['datasets'][0]['data'][tooltipItem['index']])\r\n                                        // console.log(dataset._meta[0].total)\r\n                                        // console.log(dataset.data[tooltipItem['index']])\r\n                                        // if (dataset)\r\n                                        //     var percent = Math.round((dataset.data[tooltipItem['index']] / dataset._meta[0].total) * 100)\r\n                                        return data['datasets'][0]['data'][tooltipItem['index']] + \" (\" + Math.round(percent * 100) + \"%)\";\r\n                                    },\r\n\r\n                                    // label: function (tooltipItem, data) {\r\n                                    //     var percent = Math.round((dataset.data[tooltipItem['index']] / dataset._meta[0].total) * 100)\r\n\r\n                                    //     return data['datasets'][0]['data'][tooltipItem['index']] + \" (\" + percent + \"%)\";\r\n                                    // }\r\n\r\n\r\n                                    // afterLabel: function (tooltipItem, data) {\r\n                                    //     var dataset = data['datasets'][0];\r\n                                    //     var percent = Math.round((dataset['data'][tooltipItem['index']] / dataset[\"_meta\"][0]['total']) * 100)\r\n                                    //     return '(' + percent + '%)';\r\n                                    // },\r\n                                },\r\n                            },\r\n                            centerText: {\r\n                                display: true,\r\n                                text: `90%`\r\n                            },\r\n                            animation: {\r\n                                duration: 2000,\r\n                                easing: 'easeOutQuint',\r\n                                // beforeDraw: function (chart) {\r\n                                //     var width = chart.chart.width,\r\n                                //         height = chart.chart.height,\r\n                                //         ctx = chart.chart.ctx;\r\n                                //     ctx.restore();\r\n                                //     var fontSize = (height / 160).toFixed(2);\r\n                                //     ctx.font = fontSize + \"em sans-serif\";\r\n                                //     ctx.textBaseline = \"top\";\r\n                                //     var text = \"Foo-bar\",\r\n                                //         textX = Math.round((width - ctx.measureText(text).width) / 2),\r\n                                //         textY = height / 2;\r\n                                //     ctx.fillText(text, textX, textY);\r\n                                //     ctx.save();\r\n                                // },\r\n                                // onProgress: function () {\r\n                                //     var chartInstance = this.chart,\r\n                                //         ctx = chartInstance.ctx;\r\n                                //     ctx.textAlign = 'center';\r\n                                //     ctx.fillStyle = \"rgba(0, 0, 0, .75)\";\r\n                                //     ctx.textBaseline = 'bottom';\r\n\r\n\r\n                                //     if (window.innerWidth > 1220) {\r\n                                //         ctx.font = \"bold 12px Arial\";\r\n                                //     }\r\n                                //     else if (window.innerWidth > 720) {\r\n                                //         ctx.font = \"bold 11px Arial\";\r\n                                //     }\r\n                                //     else {\r\n                                //         ctx.font = \"bold 6px Arial\";\r\n                                //     }\r\n                                //     // if (window.innerWidth > 720) {\r\n                                //     this.data.datasets.forEach(function (dataset, i) {\r\n                                //         var meta = chartInstance.controller.getDatasetMeta(i);\r\n                                //         meta.data.forEach(function (bar, index) {\r\n                                //             var data = dataset.data[index];\r\n                                //             console.log(bar._model)\r\n                                //             console.log(index)\r\n                                //             // ctx.fillText(data, bar._model.x + index * 100, bar._model.y - 4);\r\n                                //             ctx.fillText(\"o\", bar._model.x + index * 100, bar._model.y - 4);\r\n                                //             // console.log(data, bar._model.x + 0, bar._model.y - 4)\r\n                                //             // console.log(Math.abs(data) > 999 ? Math.sign(data) * ((Math.abs(data) / 1000).toFixed(1)) + 'k' : Math.sign(data) * Math.abs(data))\r\n                                //         })\r\n                                //     })\r\n                                //     // }\r\n                                // }\r\n                            }\r\n                        }\r\n                        }\r\n                    />\r\n                </div>\r\n\r\n            </div>\r\n            : null\r\n    )\r\n}\r\n\r\nexport default DougnatChart\r\n","import React, { useState, useEffect } from 'react'\r\nimport './css/covid.css'\r\nimport './css/covidDesign.css'\r\nimport { Link } from 'react-router-dom'\r\nimport coronaIcon from \"../imgs/coronaIcon.svg\"\r\n// import CovidTable from \"./CovidTable\"\r\nimport SvetTabulka from \"./SvetTabulka\"\r\nimport { GiDeathSkull } from \"react-icons/gi\";\r\nimport { AiOutlineDoubleRight } from \"react-icons/ai\";\r\nimport { FaPlusCircle } from \"react-icons/fa\";\r\nimport DougnatChart from \"./DougnatChart\"\r\n// import DataGrid from \"./DataGrid\"\r\nimport FormatNumber from './components/FormatNumber'\r\n\r\nfunction CovidApp() {\r\n    const [mainData, setMainData] = useState()\r\n    const [doughnatData, setDoughnatData] = useState()\r\n    const [countriesData, setCountriesData] = useState()\r\n    const [state, setState] = useState({\r\n        countriesData: countriesData,\r\n        direction: {\r\n            price_usd: 'asc',\r\n        }\r\n    })\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        // axios.get(`https://disease.sh/v2/all`)\r\n        //     .then(res => {\r\n        //         setDoughnatData([res.data.cases, res.data.recovered, res.data.deaths])\r\n        //         setMainData([res.data])\r\n        //     })\r\n\r\n        // axios.get(`https://disease.sh/v2/countries`)\r\n        //     .then(res => {\r\n        //         setCountriesData(res.data)\r\n        //         setState({\r\n        //             data: res.data.sort((a, b) => (\r\n        //                 state.direction['cases'] === 'asc'\r\n        //                     ? parseFloat(a['cases']) - parseFloat(b['cases'])\r\n        //                     : parseFloat(b['cases']) - parseFloat(a['cases'])\r\n        //             )),\r\n        //             direction: {\r\n        //                 'cases': state.direction['cases'] === 'asc'\r\n        //                     ? 'desc'\r\n        //                     : 'asc'\r\n        //             }\r\n        //         })\r\n        //     })\r\n        // HandleLoadData2()\r\n        // HandleLoadData1()\r\n\r\n        const fetchData = async () => {\r\n            const response1 = await fetch('https://disease.sh/v2/all')\r\n            let data1 = await response1.json()\r\n            setDoughnatData([data1.cases, data1.recovered, data1.deaths])\r\n            setMainData([data1])\r\n\r\n            const response = await fetch('https://disease.sh/v2/countries')\r\n            let data = await response.json()\r\n            setCountriesData(data)\r\n            setState({\r\n                data: data.sort((a, b) => (\r\n                    state.direction['cases'] === 'asc'\r\n                        ? parseFloat(a['cases']) - parseFloat(b['cases'])\r\n                        : parseFloat(b['cases']) - parseFloat(a['cases'])\r\n                )),\r\n                direction: {\r\n                    'cases': state.direction['cases'] === 'asc'\r\n                        ? 'desc'\r\n                        : 'asc'\r\n                }\r\n            })\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n\r\n    // const HandleLoadData1 = async () => {\r\n    //     const response1 = await fetch('https://disease.sh/v2/all')\r\n    //     let data1 = await response1.json()\r\n    //     setDoughnatData([data1.cases, data1.recovered, data1.deaths])\r\n    //     setMainData([data1])\r\n    // }\r\n\r\n    // const HandleLoadData2 = async () => {\r\n    //     const response = await fetch('https://disease.sh/v2/countries')\r\n    //     let data = await response.json()\r\n    //     setCountriesData(data)\r\n\r\n    //     setState({\r\n    //         data: data.sort((a, b) => (\r\n    //             state.direction['cases'] === 'asc'\r\n    //                 ? parseFloat(a['cases']) - parseFloat(b['cases'])\r\n    //                 : parseFloat(b['cases']) - parseFloat(a['cases'])\r\n    //         )),\r\n    //         direction: {\r\n    //             'cases': state.direction['cases'] === 'asc'\r\n    //                 ? 'desc'\r\n    //                 : 'asc'\r\n    //         }\r\n    //     })\r\n    // }\r\n\r\n    // function FormatNum(num) {\r\n    //     if (num) {\r\n    //         return (\r\n    //             num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \")\r\n    //         )\r\n    //     }\r\n    // }\r\n\r\n    function numberTrans3(a, b) {\r\n        if (a) {\r\n            let output = b / (a / 100)\r\n            output = b / (a / 100)\r\n            output = output.toFixed(3)\r\n            output = output.toString()\r\n            output = output.replace(\".\", \",\")\r\n            return (\r\n                <div className=\"aktiveNakazenych\">\r\n                    <span>V percentách:</span> {output}%\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    function sortBy(key) {\r\n        setState({\r\n            countriesData: countriesData.sort((a, b) => (\r\n                state.direction[key] === 'asc'\r\n                    ? parseFloat(a[key]) - parseFloat(b[key])\r\n                    : parseFloat(b[key]) - parseFloat(a[key])\r\n            )),\r\n            direction: {\r\n                [key]: state.direction[key] === 'asc'\r\n                    ? 'desc'\r\n                    : 'asc'\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        mainData && doughnatData && countriesData && (state.direction['cases'] || state.direction['tests']\r\n            || state.direction['active']\r\n            || state.direction['todayCases']\r\n            || state.direction['deaths']\r\n            || state.direction['recovered']\r\n            || state.direction['todayDeaths']) ?\r\n            <div className=\"covidApp\">\r\n                {console.log(\"CovidApp\")}\r\n                {\r\n                    mainData ?\r\n                        <div className=\"cardsDiv\">\r\n                            <div className=\"cards\">\r\n                                <div className=\"topCard\">\r\n                                    <div className=\"obrDiv\">\r\n                                        <div className=\"circle\">\r\n                                            <img alt=\"\" src={coronaIcon} />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"textCard\">Počet nakazených</div>\r\n                                </div>\r\n                                <div className=\"mainText\">\r\n                                    <FormatNumber prop={mainData[0].cases} />\r\n                                    <div className=\"aktiveNakazenych\">\r\n                                        <span>Počet aktívnych prípadov:</span> <FormatNumber prop={mainData[0].active} />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n\r\n                            <div className=\"cards\">\r\n                                <div className=\"topCard\">\r\n                                    <div className=\"obrDiv\">\r\n                                        <div className=\"circle HP\">\r\n                                            <FaPlusCircle color={\"green\"} />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"textCard\"> Počet vyliečených</div>\r\n                                </div>\r\n                                <div className=\"mainText\">\r\n                                    <FormatNumber prop={mainData[0].recovered} />\r\n                                    {numberTrans3(mainData[0].cases, mainData[0].recovered)}\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"cards\">\r\n                                <div className=\"topCard\">\r\n                                    <div className=\"obrDiv\">\r\n                                        <div className=\"circle skull\">\r\n                                            <GiDeathSkull color={\"white\"} />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"textCard\"> Počet úmrtí</div>\r\n                                </div>\r\n                                <div className=\"mainText\">\r\n                                    <FormatNumber prop={mainData[0].deaths} />\r\n                                    {numberTrans3(mainData[0].cases, mainData[0].deaths)}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        : ''\r\n                }\r\n                {/* <DataGrid /> */}\r\n                <DougnatChart cases={doughnatData[0]} recovered={doughnatData[1]} deaths={doughnatData[2]} />\r\n                <br></br>\r\n                <br></br>\r\n                <div className=\"SlovenskeUdajeLink\" >\r\n                    <Link to='/Covid/CovidSK'>Slovenské údaje <AiOutlineDoubleRight className=\"iconSlovUdaje\" />\r\n                    </Link>\r\n                </div>\r\n                <br></br>\r\n                <div className=\"SlovenskeUdajeLink\" >\r\n                    <Link to={`/Covid/CovidApp/Svet`} >Grafy pre celý svet <AiOutlineDoubleRight className=\"iconSlovUdaje\" />\r\n                    </Link>\r\n                </div>\r\n                {/* <Link to={`/Covid/CovidApp/${item.country}`} > */}\r\n\r\n                {/* <div className=\"SlovenskeUdajeLink\" ><Link to={`/Covid/SamostatnaKrajina/GrafyKrajina/${Slovakiatest}`}>samosts údaje </Link></div> */}\r\n                {/* <Link to={`/ReceptyV2/ReceptyV2/${recepty.recipe.label}`}></Link> */}\r\n                <br></br><br></br>\r\n                <SvetTabulka countriesData={countriesData} mainData={mainData} sortBy={sortBy} />\r\n                {/* <SvetTabulka countriesData={countriesData} mainData={mainData} sortBy={useMemo(() => { return sortBy }, [])} /> */}\r\n\r\n            </div >\r\n            : null\r\n\r\n    )\r\n}\r\n\r\nexport default CovidApp\r\n","function CompareCislo(data, sorting, stlpec) {\r\n\r\n    // const [stlpcek, setStlpcek] = useState(stlpec)\r\n    // if (stlpec === \"females\") {\r\n    //     data.sort(compareNum)\r\n    //     function compareNum(b, a) {\r\n    //         const A = a.females\r\n    //         const B = b.females\r\n    //         if (sorting) {\r\n    //             if (A > B) {\r\n    //                 return 1\r\n    //             } else if (A < B) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //         else {\r\n    //             if (B > A) {\r\n    //                 return 1\r\n    //             } else if (B < A) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //     }\r\n    // }\r\n    // else if (stlpec === \"males\") {\r\n    //     data.sort(compareNum)\r\n    //     function compareNum(b, a) {\r\n    //         const A = a.males\r\n    //         const B = b.males\r\n    //         if (sorting) {\r\n    //             if (A > B) {\r\n    //                 return 1\r\n    //             } else if (A < B) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //         else {\r\n    //             if (B > A) {\r\n    //                 return 1\r\n    //             } else if (B < A) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //     }\r\n    // }\r\n    if (stlpec === \"amountRecovered\") {\r\n        data.sort(compareNum)\r\n        function compareNum(b, a) {\r\n            const A = a.amount.recovered\r\n            const B = b.amount.recovered\r\n            if (sorting) {\r\n                if (A > B) {\r\n                    return 1\r\n                } else if (A < B) {\r\n                    return -1\r\n                } else return 0;\r\n            }\r\n            else {\r\n                if (B > A) {\r\n                    return 1\r\n                } else if (B < A) {\r\n                    return -1\r\n                } else return 0;\r\n            }\r\n        }\r\n    }\r\n    // else if (stlpec === \"amountDelta\") {\r\n    //     data.sort(compareNum)\r\n    //     function compareNum(b, a) {\r\n    //         const A = a.amount.infected_delta\r\n    //         const B = b.amount.infected_delta\r\n    //         if (sorting) {\r\n    //             if (A > B) {\r\n    //                 return 1\r\n    //             } else if (A < B) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //         else {\r\n    //             if (B > A) {\r\n    //                 return 1\r\n    //             } else if (B < A) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //     }\r\n    // }\r\n    // else {\r\n    //     data.sort(compareNum)\r\n    //     function compareNum(a, b) {\r\n    //         const A = a.amount.infected\r\n    //         const B = b.amount.infected\r\n    //         if (sorting) {\r\n    //             if (A > B) {\r\n    //                 return 1\r\n    //             } else if (A < B) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //         else {\r\n    //             if (B > A) {\r\n    //                 return 1\r\n    //             } else if (B < A) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //     }\r\n    // }\r\n    else {\r\n        if (JSON.parse(localStorage.getItem(\"zoradenieLocalStorage\")) === \"amountDelta\") {\r\n            data.sort(compareNum)\r\n            function compareNum(a, b) {\r\n                const A = a.amount.infected_delta\r\n                const B = b.amount.infected_delta\r\n                if (sorting) {\r\n                    if (A > B) {\r\n                        return 1\r\n                    } else if (A < B) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n                else {\r\n                    if (B > A) {\r\n                        return 1\r\n                    } else if (B < A) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n            }\r\n        }\r\n        else if (JSON.parse(localStorage.getItem(\"zoradenieLocalStorage\")) === \"amountInfected\") {\r\n            data.sort(compareNum)\r\n            function compareNum(a, b) {\r\n                const A = a.amount.infected\r\n                const B = b.amount.infected\r\n                if (sorting) {\r\n                    if (A > B) {\r\n                        return 1\r\n                    } else if (A < B) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n                else {\r\n                    if (B > A) {\r\n                        return 1\r\n                    } else if (B < A) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        else {\r\n            data.sort(compareNum)\r\n            function compareNum(a, b) {\r\n                const A = a.amount.infected\r\n                const B = b.amount.infected\r\n                if (sorting) {\r\n                    if (A > B) {\r\n                        return 1\r\n                    } else if (A < B) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n                else {\r\n                    if (B > A) {\r\n                        return 1\r\n                    } else if (B < A) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n}\r\n\r\nexport default CompareCislo ","import React, { useState, useEffect } from 'react'\r\nimport './css/tabulkaMesta.css'\r\nimport CompareCislo from './CompareCislo'\r\nimport { IoIosArrowDown } from 'react-icons/io';\r\n// import DougnatChart from \"./DougnatChart\"\r\n\r\nconst LOCAL_STORAGE_KEY = 'zoradenieLocalStorage'\r\n\r\n\r\nfunction TabulkaMesta(props) {\r\n    const data = props.tabulkaData\r\n    // const lastDay = props.tabulkaData.tested_chart[Object.keys(props.tested_chart).length - 1].day\r\n    // const [dataForTable, setDataForTable] = useState({})\r\n    const [sorting, setSorting] = useState(false)\r\n    const [ShowHide, setShowHide] = useState({\r\n        display: 'none'\r\n    })\r\n    const [textPreZobrazenieObci, setTextPreZobrazenieObci] = useState({\r\n        boolean: true,\r\n        text: \"Zobraziť údaje o jedntlivých obciach\"\r\n    })\r\n    const [sipkaObce, setSipkaObce] = useState({\r\n        transition: 'all .2s ease-in',\r\n        marginBottom: '-3px',\r\n        marginLeft: '3px',\r\n    })\r\n\r\n\r\n\r\n    // const [sorting, setSorting] = useState(false)\r\n    // console.log(props.tabulkaData)\r\n    // console.log(props.tabulkaData)\r\n    // const [dataTabulka, setDataTabulka] = useState(props.tabulkaData)\r\n    // const [state, setState] = useState({\r\n    //     dataTabulka: dataTabulka,\r\n    //     direction: {\r\n    //         price_usd: 'asc',\r\n    //     }\r\n    // })\r\n\r\n    useEffect(() => {\r\n        setSorting(s => !s)\r\n        CompareCislo(data, sorting, \"stlpec\")\r\n        // let zeny = 0;\r\n        // let muzi = 0;\r\n        // data.map(jednoData => {\r\n        //     zeny = zeny + jednoData.females\r\n        //     muzi = muzi + jednoData.males\r\n        // })\r\n        // setDataForTable({\r\n        //     labels: [\"Ženy\", \"Muži\"],\r\n        //     data: [zeny, muzi],\r\n        //     backgroundColor: [\"red\", \"blue\"]\r\n        // })\r\n    }, [])\r\n\r\n\r\n    // useEffect(() => {\r\n    //     setState({\r\n    //         dataTabulka: dataTabulka.sort((a, b) => (\r\n    //             state.direction['cases'] === 'asc'\r\n    //                 ? parseFloat(a['cases']) - parseFloat(b['cases'])\r\n    //                 : parseFloat(b['cases']) - parseFloat(a['cases'])\r\n    //         )),\r\n    //         direction: {\r\n    //             ['cases']: state.direction['cases'] === 'asc'\r\n    //                 ? 'desc'\r\n    //                 : 'asc'\r\n    //         }\r\n    //     })\r\n    // }, [])\r\n\r\n\r\n    // function sortBy(key) {\r\n    //     setState({\r\n    //         dataTabulka: dataTabulka.sort((a, b) => (\r\n    //             state.direction[key] === 'asc'\r\n    //                 ? parseFloat(a[key]) - parseFloat(b[key])\r\n    //                 : parseFloat(b[key]) - parseFloat(a[key])\r\n    //         )),\r\n    //         direction: {\r\n    //             [key]: state.direction[key] === 'asc'\r\n    //                 ? 'desc'\r\n    //                 : 'asc'\r\n    //         }\r\n    //     })\r\n    // }\r\n\r\n    function handleSortObce(stlpec) {\r\n        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(stlpec))\r\n\r\n        // const storedZoradenie = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY))\r\n        // if (storedZoradenie) console.log(storedZoradenie)\r\n\r\n\r\n        setSorting(!sorting)\r\n        CompareCislo(data, sorting, stlpec)\r\n    }\r\n\r\n    function zmenitText() {\r\n        if (textPreZobrazenieObci.boolean) {\r\n            setTextPreZobrazenieObci({\r\n                boolean: !textPreZobrazenieObci.boolean,\r\n                text: \"Schovať údaje o jedntlivých obciach\"\r\n            })\r\n            setShowHide({\r\n                display: 'flex',\r\n            })\r\n            setSipkaObce({\r\n                transform: \"rotateX(180deg)\",\r\n                transition: 'all .2s ease-in',\r\n                marginBottom: '-3px',\r\n                marginLeft: '3px',\r\n            })\r\n        }\r\n        else {\r\n            setTextPreZobrazenieObci({\r\n                boolean: !textPreZobrazenieObci.boolean,\r\n                text: \"Zobraziť údaje o jedntlivých obciach\"\r\n            })\r\n            setShowHide({\r\n                display: 'none',\r\n            })\r\n            setSipkaObce({\r\n                transform: \"rotateX(0deg)\",\r\n                transition: 'all .2s ease-in',\r\n                marginBottom: '-3px',\r\n                marginLeft: '3px',\r\n            })\r\n        }\r\n    }\r\n\r\n    function searchInputMesta() {\r\n        var input, filter, table, tr, td, i, txtValue;\r\n        input = document.getElementById(\"myInput\");\r\n        filter = input.value.toUpperCase();\r\n        table = document.getElementById(\"myTable\");\r\n        tr = table.getElementsByTagName(\"tr\");\r\n        for (i = 0; i < tr.length; i++) {\r\n            td = tr[i].getElementsByTagName(\"td\")[0];\r\n            if (td) {\r\n                txtValue = td.textContent || td.innerText;\r\n                if (txtValue.toUpperCase().indexOf(filter) > -1) {\r\n                    tr[i].style.display = \"\";\r\n                } else {\r\n                    tr[i].style.display = \"none\";\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"textPreZObrazenieTabulky\" onClick={zmenitText}>{textPreZobrazenieObci.text} <IoIosArrowDown style={sipkaObce} /></div>\r\n\r\n\r\n\r\n            <div style={ShowHide} className=\"tabulkaOkrajDivMain\">\r\n\r\n                <br></br>\r\n                <input type=\"text\" id=\"myInput\" onKeyUp={searchInputMesta} placeholder=\"Hľadať..\" className=\"inputSearch\" />\r\n                <div className=\"tabulkaMesta\">\r\n\r\n                    <table id=\"myTable\">\r\n                        <thead>\r\n                            <tr >\r\n                                <th >Obec</th>\r\n                                <th onClick={() => handleSortObce('amountInfected')} >Počet nakazených</th>\r\n                                <th onClick={() => handleSortObce('amountDelta')} >Za posledný deň</th>\r\n                                {/* <th onClick={() => handleSortObce('amountRecovered')} >Počet vyliečených</th> */}\r\n                                {/* <th onClick={() => handleSortObce('females')} >Ženy</th> */}\r\n                                {/* <th onClick={() => handleSortObce('males')} >Muži</th> */}\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {data.map((jednaObec, index) => <>\r\n                                <tr key={index} >\r\n                                    {/* {jednaObec.title === \"Bratislava II\" ? null\r\n                                        : jednaObec.title === \"Bratislava III\" ? null\r\n                                            : jednaObec.title === \"Bratislava IV\" ? null\r\n                                                : jednaObec.title === \"Bratislava V\" ? null\r\n                                                    : jednaObec.title === \"Košice II \" ? null\r\n                                                        : jednaObec.title === \"Košice III \" ? null\r\n                                                            : jednaObec.title === \"Košice IV \" ? null\r\n                                                                : jednaObec.title === \"Bratislava I \"\r\n                                                                    ? <td>{jednaObec.title}</td>\r\n                                                                    : jednaObec.title === \"Košice I\" ? <td>{jednaObec.title}</td>\r\n                                                                        : <td>{jednaObec.title}</td>} */}\r\n                                    {jednaObec.title === \"Bratislava II\"\r\n                                        || jednaObec.title === \"Bratislava III\"\r\n                                        || jednaObec.title === \"Bratislava IV\"\r\n                                        || jednaObec.title === \"Bratislava V\"\r\n                                        || jednaObec.title === \"Košice II\"\r\n                                        || jednaObec.title === \"Košice III\"\r\n                                        || jednaObec.title === \"Košice IV\" ? null\r\n                                        : <>\r\n                                            <td>{jednaObec.title === \"Bratislava I\" ? \"Bratislava\" :\r\n                                                jednaObec.title === \"Košice I\" ? \"Košice\" : jednaObec.title}</td>\r\n                                            <td>{jednaObec.amount.infected}</td>\r\n                                            <td style={{ color: 'red' }}>\r\n                                                {jednaObec.amount.infected_delta > 0 ?\r\n                                                    \"+\" + jednaObec.amount.infected_delta\r\n                                                    : null}\r\n                                            </td>\r\n                                        </>}\r\n\r\n                                    {/* <td>{jednaObec.amount.infected}\r\n                                        <span className=\"plusPreObecInfected\">{jednaObec.amount.infected_delta > 0 ? \"+\" + jednaObec.amount.infected_delta : ''}</span>\r\n                                    </td> */}\r\n\r\n                                    {/* <td><span className=\"plusPreObecRecovered\">{jednaObec.amount.recovered}</span></td> */}\r\n                                    {/* <td>{jednaObec.females}</td> */}\r\n                                    {/* <td>{jednaObec.males}</td> */}\r\n                                </tr>\r\n                            </>\r\n                            )}\r\n                        </tbody>\r\n                        {/* <tfoot>\r\n                        <tr>\r\n                            <td>Sum</td>\r\n                            <td>$180</td>\r\n                        </tr>\r\n                    </tfoot> */}\r\n                    </table>\r\n\r\n                </div>\r\n                {/* <DougnatChart dataForGraph={dataForTable} /> */}\r\n                {/* {dataForTable ? <DougnatChart dataForGraph={dataForTable} /> : null} */}\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TabulkaMesta\r\n","import React, { useState, useEffect } from 'react'\r\n// import CountUp from 'react-countup'\r\nimport styled, { keyframes } from \"styled-components\";\r\nimport './css/covid.css'\r\n// import './tooltip.css'\r\nimport coronaIcon from \"../imgs/coronaIcon.svg\"\r\nimport wideArrow from \"../imgs/wideArrow.svg\"\r\nimport TabulkaMesta from \"./TabulkaMesta\"\r\nimport FormatNumber from './components/FormatNumber';\r\n// import DataGrid from \"./DataGrid\"\r\n\r\n\r\n// import DougnatChart from \"./DougnatChart\"\r\n\r\nfunction CovidSK() {\r\n    const [dataSvk, setDataSvk] = useState()\r\n    const svk = 'https://mapa.covid.chat/map_data'\r\n    // const [tabulkaMestaData, setTabulkaMestaData] = useState([])\r\n    const [maxDate, setMaxDate] = useState()\r\n    const [maxDateboolLean, setMaxDateboolLean] = useState(false)\r\n    const [grafNegativneTesty, setGrafNegativneTesty] = useState({ stav: true, styling: { textDecoration: 'none' } })\r\n    const [styleWideArrow, setStyleWideArrow] = useState()\r\n    // const [toolTip, setToolTip] = useState({ background: 'red' })\r\n\r\n    const [state, setState] = useState({\r\n        dataSvk: dataSvk,\r\n        direction: {\r\n            price_usd: 'asc',\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n\r\n        const LoadData = async () => {\r\n            const response = await fetch(svk)\r\n            const data = await response.json()\r\n\r\n            setMaxDate(Object.keys(data.chart).length - 25)\r\n\r\n            setDataSvk([data])\r\n            setState({\r\n                dataSvk: data.map.sort((a, b) => (\r\n                    state.direction['cases'] === 'asc'\r\n                        ? parseFloat(a['cases']) - parseFloat(b['cases'])\r\n                        : parseFloat(b['cases']) - parseFloat(a['cases'])\r\n                )),\r\n                direction: {\r\n                    'cases': state.direction['cases'] === 'asc'\r\n                        ? 'desc'\r\n                        : 'asc'\r\n                }\r\n            })\r\n        }\r\n\r\n        LoadData()\r\n\r\n\r\n    }, [])\r\n\r\n    const negatTestyMoje = [83, 102, 50, 42, 120, 129, 118, 197, 228]\r\n\r\n    // const LoadData = async () => {\r\n    //     const response = await fetch(svk)\r\n    //     const data = await response.json()\r\n\r\n    //     setMaxDate(Object.keys(data.chart).length - 25)\r\n\r\n    //     setDataSvk([data])\r\n    //     setState({\r\n    //         dataSvk: data.map.sort((a, b) => (\r\n    //             state.direction['cases'] === 'asc'\r\n    //                 ? parseFloat(a['cases']) - parseFloat(b['cases'])\r\n    //                 : parseFloat(b['cases']) - parseFloat(a['cases'])\r\n    //         )),\r\n    //         direction: {\r\n    //             'cases': state.direction['cases'] === 'asc'\r\n    //                 ? 'desc'\r\n    //                 : 'asc'\r\n    //         }\r\n    //     })\r\n    // }\r\n\r\n    function handleData() {\r\n        let a = dataSvk[0].chart[Object.keys(dataSvk[0].tested_chart).length].recovered\r\n        let b = dataSvk[0].chart[Object.keys(dataSvk[0].tested_chart).length - 1].recovered\r\n        let c = a - b\r\n        let newRecovered = 0\r\n        if (c > 0) {\r\n            newRecovered = a - b\r\n        }\r\n\r\n        a = dataSvk[0].chart[Object.keys(dataSvk[0].tested_chart).length].deaths\r\n        b = dataSvk[0].chart[Object.keys(dataSvk[0].tested_chart).length - 1].deaths\r\n        c = a - b\r\n        let newDeaths = 0\r\n        if (c > 0) {\r\n            newDeaths = a - b\r\n        }\r\n\r\n\r\n        const GetTheDay = () => {\r\n            const lastDay = dataSvk[0].tested_chart[Object.keys(dataSvk[0].tested_chart).length - 1].day\r\n            if (lastDay === \"Pondelok\")\r\n                return \"pondelok\"\r\n            else if (lastDay === \"Utorok\")\r\n                return \"utorok\"\r\n            else if (lastDay === \"Streda\")\r\n                return \"stredu\"\r\n            else if (lastDay === \"Štvrtok\")\r\n                return \"štvrtok\"\r\n            else if (lastDay === \"Piatok\")\r\n                return \"piatok\"\r\n            else if (lastDay === \"Sobota\")\r\n                return \"sobotu\"\r\n            else return \"nedeľu\"\r\n\r\n        }\r\n        return (\r\n            <div>\r\n                <div className=\"cardsDiv\">\r\n                    <div className=\"cards cardsSVK\">\r\n                        <div className=\"topCard\">\r\n                            <div className=\"obrDiv\">\r\n                                <div className=\"circle\">\r\n                                    <img alt=\"\" src={coronaIcon} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"textCard\"><b>Slovenské údaje</b></div>\r\n                        </div>\r\n                        <div className=\"mainTextSK\">\r\n                            Počet testovaných: <FormatNumber prop={dataSvk[0].tested} /><br />\r\n                                Z toho pozitívnych testov: {dataSvk[0].infected}<br />\r\n                            Počet aktívnych prípadov: <b>{dataSvk[0].active}</b><br />\r\n                                Počet vyliečených: <span style={{ color: \"green\" }}>{dataSvk[0].recovered}</span><br />\r\n                            {dataSvk[0].deaths > 0 ? <>Počet úmrtí: {dataSvk[0].deaths}<br /></>\r\n                                : null}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"cards cardsSVK\">\r\n                        <div className=\"topCard\"><div className=\"textCard\"><b>Údaje za {GetTheDay()}</b></div></div>\r\n                        <div className=\"mainTextSK\">\r\n                            Počet nových testovaných: <span>{dataSvk[0].tested_chart[Object.keys(dataSvk[0].tested_chart).length - 1].tested}</span><br />\r\n                                Počet negatívnych testov: <span>{dataSvk[0].tested_chart[Object.keys(dataSvk[0].tested_chart).length - 1].tested - dataSvk[0].tested_chart[Object.keys(dataSvk[0].tested_chart).length - 1].infected}</span><br />\r\n                                Počet pozitívnych testov: <span>+{dataSvk[0].tested_chart[Object.keys(dataSvk[0].tested_chart).length - 1].infected}</span>\r\n                            {\r\n                                newRecovered > 0 ?\r\n                                    <> <br />Počet nových vyliečených: {newRecovered}</>\r\n                                    : null\r\n                            }\r\n                            {\r\n                                newDeaths > 0 ?\r\n                                    <>  <br />Počet nových úmrtí: {newDeaths}</>\r\n                                    : null\r\n                            }\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    const Heading = keyframes`\r\n    0%{\r\n        height: 0%;\r\n      }\r\n      100%{\r\n        height: 100%;\r\n      }\r\n    `;\r\n\r\n    const HomeHeader = styled.div`\r\n    height: 100%;\r\n    animation: ${Heading} .7s;\r\n    bottom: 0;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-evenly;\r\n    `;\r\n\r\n    function changeWideArrow() {\r\n        if (!maxDateboolLean) {\r\n            setMaxDate(-1)\r\n            setStyleWideArrow({\r\n                transform: 'rotateY(180deg)',\r\n            })\r\n        }\r\n        else {\r\n            setMaxDate(Object.keys(dataSvk[0].chart).length - 25)\r\n            setStyleWideArrow({\r\n                transform: 'rotateY(0deg)',\r\n            })\r\n        }\r\n        // dataSvk\r\n        setMaxDateboolLean(!maxDateboolLean)\r\n    }\r\n\r\n    function handleGraphAktivnePripady() {\r\n        let maxAktivnychInfikovanych = 0\r\n        dataSvk[0].chart.map(day1 => {\r\n            if (maxAktivnychInfikovanych < (day1.infected - day1.recovered - day1.deaths))\r\n                maxAktivnychInfikovanych = (day1.infected - day1.recovered - day1.deaths)\r\n            return maxAktivnychInfikovanych\r\n        })\r\n        const MaxInfected = 100 / maxAktivnychInfikovanych\r\n\r\n        // function testHover() {\r\n        //     setToolTip({\r\n        //         background: 'blue'\r\n        //     })\r\n        // }\r\n\r\n        // function testLeave() {\r\n        //     setToolTip({\r\n        //         background: 'red'\r\n        //     })\r\n        // }\r\n        return (\r\n            <div className=\"outsideDivGraf\">\r\n                <h1>Aktívne prípady</h1>\r\n                <div className=\"test\" onClick={changeWideArrow} style={styleWideArrow}>\r\n                    <div className=\"wideArrow\">\r\n                        <img alt=\"\" src={wideArrow} />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"svkGraf\">\r\n                    {dataSvk[0].chart.map((day1, index) =>\r\n                        index > maxDate ?\r\n                            <HomeHeader key={index}>\r\n                                {/* <div className=\"divInGraf\" style={toolTip}>{day1.infected}</div> */}\r\n                                <div className=\"aktivnePripadyGraf\" style={{ height: `calc(${MaxInfected * (day1.infected - day1.recovered - day1.deaths)}% )` }} >\r\n                                    {/* <div onMouseOver={testHover} onMouseLeave={testLeave} className=\"stlpcePrvehoGrafu\" style={{ height: `calc(${MaxInfected * (day1.infected - day1.recovered - day1.deaths)}% )` }} > */}\r\n                                    <span className=\"CountPrvehoGrafu\" >{day1.infected - day1.recovered - day1.deaths}</span>\r\n                                    {maxDateboolLean ?\r\n                                        index % 2 === 0 ?\r\n                                            <div className=\"spanDate\">{day1.date}</div>\r\n                                            : null\r\n                                        : <div className=\"spanDate\">{day1.date}</div>}\r\n                                </div>\r\n                            </HomeHeader>\r\n                            : null)}\r\n                </div>\r\n                <div className=\"medzeraPodDatumomGraf1\"></div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function handleGraph1() {\r\n        const MaxInfected = 100 / dataSvk[0].chart[Object.keys(dataSvk[0].chart).length - 1].infected\r\n        return (\r\n            <div className=\"outsideDivGraf\">\r\n                <h1>Celkový prírastok nakazených</h1>\r\n                <div className=\"test\" onClick={changeWideArrow} style={styleWideArrow}>\r\n                    <div className=\"wideArrow\">\r\n                        <img alt=\"\" src={wideArrow} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"svkGraf\">\r\n                    {\r\n                        dataSvk[0].chart.map((day1, index) =>\r\n                            index > maxDate ?\r\n                                <HomeHeader key={index}>\r\n                                    <div className=\"stlpcePrvehoGrafu tooltip\" style={{ height: `calc(${MaxInfected * day1.infected}% )` }} >\r\n                                        <span className=\"CountPrvehoGrafu\" >{day1.infected}</span>\r\n                                        {dataSvk[0].tested_chart[index - 1]\r\n                                            ? <><span className=\"countupFirstRed\">+{dataSvk[0].tested_chart[index - 1].infected}</span>\r\n                                            </>\r\n                                            : <><span className=\"countupFirstRed\">+1</span>\r\n                                            </>}\r\n                                        {\r\n                                            maxDateboolLean ?\r\n                                                index % 2 === 0 ?\r\n                                                    <div className=\"spanDate\">{day1.date}</div>\r\n                                                    : null\r\n                                                : <div className=\"spanDate\">{day1.date}</div>\r\n                                        }\r\n                                    </div>\r\n                                </HomeHeader>\r\n                                : null\r\n                        )\r\n                    }\r\n                </div>\r\n                <div className=\"medzeraPodDatumomGraf1\"></div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function negatTesty() {\r\n        if (grafNegativneTesty.stav)\r\n            setGrafNegativneTesty({ stav: false, styling: { textDecoration: 'line-through' } })\r\n        else\r\n            setGrafNegativneTesty({ stav: true, styling: { textDecoration: 'none' } })\r\n    }\r\n\r\n    function handleGraph2() {\r\n        let MaxDaily = 0\r\n        if (grafNegativneTesty.stav) {\r\n            if (dataSvk) {\r\n                dataSvk[0].tested_chart.map(pom1 => {\r\n                    if (pom1.tested > MaxDaily) {\r\n                        MaxDaily = pom1.tested - pom1.infected\r\n                    }\r\n                    return MaxDaily\r\n                })\r\n                MaxDaily = MaxDaily / 100\r\n            }\r\n        }\r\n        else {\r\n            if (dataSvk) {\r\n                dataSvk[0].tested_chart.map(pom1 => {\r\n                    if (pom1.infected > MaxDaily) {\r\n                        MaxDaily = pom1.infected\r\n                    }\r\n                    return MaxDaily\r\n                })\r\n                MaxDaily = MaxDaily / 100\r\n            }\r\n        }\r\n        return (\r\n            <div className=\"outsideDivGraf\">\r\n                <h1>Denný prírastok negatívnych a pozitívnych testov</h1>\r\n                <div className=\"test\" onClick={changeWideArrow} style={styleWideArrow}>\r\n                    <div className=\"wideArrow\">\r\n                        <img alt=\"\" src={wideArrow} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"svkGraf\">\r\n                    {maxDate === -1 ?\r\n                        <HomeHeader >  {/* prvy stlpec pre druhy graf */}\r\n                            <div className=\"PozitivneTestyDruhyGraf\" style={{ height: `calc(${1 / MaxDaily}%)` }} >\r\n                                <div className=\"spanDate\">{\"06-03-2020\"}</div>\r\n                            </div>\r\n\r\n                            {grafNegativneTesty.stav ?\r\n                                <div className=\"Graf2Stlpce\" style={{ height: `calc(${306 / MaxDaily}%)` }} >\r\n                                    <span className=\"CountDruhehoGrafu\">306</span>\r\n                                    <span className=\"CountDruhehoGrafu nakazeniZaDen\">+1</span>\r\n                                </div>\r\n                                : <div className=\"Graf2Stlpce\" style={{ height: `calc(${1 / MaxDaily}%)` }} >\r\n                                    <span className=\"CountDruhehoGrafu druhyGrafJedenTypSltpca\">+1</span>\r\n                                </div>}\r\n                        </HomeHeader>\r\n                        : ''}\r\n\r\n                    {dataSvk[0].tested_chart.map((day1, index) =>\r\n                        index > maxDate - 1 ?\r\n                            <HomeHeader key={index}>\r\n                                {\r\n                                    <>\r\n                                        <div className=\"PozitivneTestyDruhyGraf\" style={{ height: `calc(${(day1.infected) / MaxDaily}% )` }} >\r\n                                            {/* <div className=\"spanDate\">{day1.date}</div> */}\r\n\r\n                                            {\r\n                                                maxDateboolLean ?\r\n                                                    index % 2 === 0 ?\r\n                                                        null\r\n                                                        : <div className=\"spanDate\">{day1.date}</div>\r\n                                                    : <div className=\"spanDate\">{day1.date}</div>\r\n                                            }\r\n\r\n\r\n                                            {!grafNegativneTesty.stav ?\r\n                                                <span className=\" CountDruhehoGrafu druhyGrafJedenTypSltpca\" >+{day1.infected}</span>\r\n                                                : null}\r\n                                        </div>\r\n                                        {\r\n                                            negatTestyMoje[index]\r\n                                                ? grafNegativneTesty.stav ?\r\n                                                    <div className=\"Graf2Stlpce\" style={{ height: `calc(${negatTestyMoje[index] / MaxDaily}% )` }} >\r\n                                                        {(negatTestyMoje[index] > 99) ? <>\r\n                                                            <span className=\"CountDruhehoGrafu\" style={{ marginLeft: '-2px' }}>{negatTestyMoje[index]}</span>\r\n                                                            <span className=\" CountDruhehoGrafu nakazeniZaDen\">{day1.infected}</span>\r\n                                                        </>\r\n                                                            : <>\r\n                                                                <span className=\"CountDruhehoGrafu\">{negatTestyMoje[index]}</span>\r\n                                                                <span className=\" CountDruhehoGrafu nakazeniZaDen\">+{day1.infected}</span>\r\n                                                            </>\r\n                                                        }\r\n                                                    </div>\r\n                                                    : null\r\n                                                : grafNegativneTesty.stav ?\r\n                                                    <div className=\"Graf2Stlpce\" style={{ height: `calc(${day1.tested / MaxDaily}%)` }} >\r\n                                                        <span className=\"CountDruhehoGrafu\">{day1.tested - day1.infected}</span>\r\n                                                        <span className=\" CountDruhehoGrafu nakazeniZaDen\">+{day1.infected}</span>\r\n                                                    </div>\r\n                                                    : null\r\n                                        }\r\n                                    </>\r\n                                }\r\n                            </HomeHeader>\r\n                            : null\r\n                    )}\r\n                </div>\r\n                <div className=\"vysvetlivkyPodGrafom\">\r\n                    <div style={grafNegativneTesty.styling} onClick={negatTesty}><div className=\"blue\" ></div>Počet negatívnych testov</div>\r\n                    <div><div className=\"red\"></div>Počet pozitívnych testov</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    function sortBy(key) {\r\n        setState({\r\n            dataSvk: dataSvk[0].map.sort((a, b) => (\r\n\r\n                state.direction[key] === 'asc'\r\n                    ? parseFloat(a[key]) - parseFloat(b[key])\r\n                    : <>{parseFloat(b[key]) - parseFloat(a[key])} </>\r\n            )),\r\n            direction: {\r\n                [key]: state.direction[key] === 'asc'\r\n                    ? 'desc'\r\n                    : 'asc'\r\n            }\r\n        })\r\n    }\r\n\r\n    // const Testing = () => {\r\n    //     const lastDay = dataSvk[0].tested_chart[Object.keys(dataSvk[0].tested_chart).length - 1].day\r\n    //     if (lastDay === \"Pondelok\")\r\n    //         return \"Pondelok\"\r\n    //     else if (lastDay === \"Utorok\")\r\n    //         return \"Utorok\"\r\n    //     else if (lastDay === \"Streda\")\r\n    //         return \"Stredu\"\r\n    //     else if (lastDay === \"Štvrtok\")\r\n    //         return \"Štvrtok\"\r\n    //     else if (lastDay === \"Piatok\")\r\n    //         return \"Piatok\"\r\n    //     else if (lastDay === \"Sobota\")\r\n    //         return \"Sobota\"\r\n    //     else return \"Nedeľa\"\r\n    // }\r\n    return (\r\n        <div className=\"covidApp\">\r\n            {dataSvk ?\r\n                <>\r\n                    {/* <div className=\"PocetPripadovdoNav\">za {Testing()}: {dataSvk[0].tested_chart[Object.keys(dataSvk[0].tested_chart).length - 1].infected}  </div> */}\r\n                    {/* <div className=\"PripadydoNavDiv\">\r\n                        <ul className=\"PripadydoNavUl\">\r\n                            <li></li>\r\n                            <li>\r\n                                {Testing()}: {dataSvk[0].tested_chart[Object.keys(dataSvk[0].tested_chart).length - 1].infected} prípadov\r\n                            </li>\r\n                        </ul>\r\n                    </div> */}\r\n                    {handleData()}\r\n                    {/* <DataGrid data={dataSvk[0].map} /> */}\r\n\r\n                    <TabulkaMesta tabulkaData={dataSvk[0].districts} sortBy={sortBy} />\r\n                    {/* <div className=\"tooltip\">Hover over me\r\n                        <div className=\"tooltiptext\">Tooltip text</div>\r\n                        </div> */}\r\n                    {/* <DougnatChart /> */}\r\n\r\n                    {handleGraphAktivnePripady()}\r\n\r\n                    {handleGraph1()}\r\n                    {handleGraph2()}\r\n\r\n\r\n\r\n\r\n                    <br></br><br></br><br></br><br></br>\r\n                </>\r\n                : ''}\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default CovidSK\r\n","import React from 'react'\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { Chart } from 'react-chartjs-2';\r\nimport './css/cssPreBarGrafy.css'\r\n\r\nfunction BarGraf({ props }) {\r\n\r\n    // console.log(props.datumy.slice(-29))\r\n    // console.log(props.datumy.length - 1)\r\n    // console.log(props.datumy.slice(-(props.datumy.length - 1)))\r\n    // console.log(props.dataSetsDailyCases.datasets)\r\n    const allData = {\r\n        dataSetsCases: {\r\n            labels: props.datumy,\r\n            datasets: [{\r\n                label: 'Počet mŕtvych',\r\n                backgroundColor: \"grey\",\r\n                data: props.dataSetsDeaths.datasets[0].data,\r\n            },\r\n            {\r\n                label: 'Počet vyliečených',\r\n                backgroundColor: \"#57C757\",\r\n                data: props.dataSetsRecovered.datasets[0].data,\r\n            },\r\n            {\r\n                label: 'Počet nakazených',\r\n                backgroundColor: \"#FF4D4D\",\r\n                data: props.dataSetsCases.datasets[0].data,\r\n            }],\r\n        },\r\n\r\n        // dataSetsDeaths: {\r\n        //     labels: props.datumy,\r\n        //     datasets: props.dataSetsDeaths.datasets\r\n        // },\r\n\r\n\r\n        // dataSetsRecovered: {\r\n        //     labels: props.datumy,\r\n        //     datasets: props.dataSetsRecovered.datasets\r\n        // },\r\n\r\n        dataSetsActiveCases: {\r\n            labels: props.datumy,\r\n            datasets: props.dataSetsActiveCases.datasets\r\n        },\r\n\r\n        dataSetsDailyCases: {\r\n            // labels: props.datumy,\r\n            // labels: [2, 3, 4, 5, 6],\r\n            labels: props.datumy.slice(-(props.datumy.length - 1)),\r\n            // datasets: props.dataSetsActiveCases.datasets,\r\n            datasets: props.dataSetsDailyCases.datasets\r\n        },\r\n\r\n        options: {\r\n            maintainAspectRatio: false,\r\n            responsive: true,\r\n\r\n            legend: {\r\n                position: \"bottom\",\r\n                labels: {\r\n                    padding: 25,\r\n                },\r\n                onClick: function (e, legendItem) {\r\n                    const defaultLegendClickHandler = () => { return Chart.defaults }\r\n                    defaultLegendClickHandler(e, legendItem);\r\n                    // return \r\n                    var index = legendItem.datasetIndex;\r\n                    var ci = this.chart;\r\n                    var meta = ci.getDatasetMeta(index);\r\n                    // See controller.isDatasetVisible comment\r\n                    meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null;\r\n\r\n                    // We hid a dataset ... rerender the chart\r\n                    ci.update();\r\n\r\n                }\r\n            },\r\n            scales: {\r\n                xAxes: [{\r\n                    stacked: true,\r\n                    gridLines: {\r\n                        display: false,\r\n                    }\r\n                }],\r\n                yAxes: [{\r\n                    stacked: true,\r\n                    ticks: {\r\n                        callback: function (value) {\r\n                            return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \")\r\n                        }\r\n                    }\r\n                }]\r\n            },\r\n            tooltips: {\r\n                // mode: 'x',\r\n                mode: 'index',\r\n                position: 'nearest',\r\n                intersect: false,\r\n                callbacks: {\r\n                    label: function (tooltipItem, chart) {\r\n                        var datasetLabel = chart.datasets[tooltipItem.datasetIndex].label || '';\r\n\r\n                        return datasetLabel + \": \" + tooltipItem.yLabel.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \")\r\n                    }\r\n                },\r\n            },\r\n            animation: {\r\n                duration: 500,\r\n                onProgress: function () {\r\n                    // console.log(props.nacitatViacUdajov)\r\n                    if (props.nacitatViacUdajov === false) {\r\n                        var chartInstance = this.chart,\r\n                            ctx = chartInstance.ctx;\r\n                        ctx.textAlign = 'center';\r\n                        ctx.fillStyle = \"rgba(0, 0, 0, .75)\";\r\n                        ctx.textBaseline = 'bottom';\r\n                        if (window.innerWidth > 1220) {\r\n                            ctx.font = \"bold 12px Arial\";\r\n                        }\r\n                        else if (window.innerWidth > 720) {\r\n                            ctx.font = \"bold 11px Arial\";\r\n                        }\r\n                        else {\r\n                            ctx.font = \"bold 6px Arial\";\r\n                        }\r\n                        this.data.datasets.forEach(function (dataset, i) {\r\n                            var meta = chartInstance.controller.getDatasetMeta(i);\r\n                            meta.data.forEach(function (bar, index) {\r\n                                var data = dataset.data[index];\r\n                                if (index % 2 === 0) {\r\n                                    if (dataset.data._chartjs.listeners[0].chart.legend.legendItems[0].hidden === true\r\n                                        || dataset.data._chartjs.listeners[0].chart.legend.legendItems[0].hidden === false) {\r\n\r\n                                        if (dataset.data._chartjs.listeners[0].chart.legend.legendItems[0].text === \"Počet mŕtvych\") { //overenie pre posledny graf (tri udaje v objekte)\r\n                                            let pom1 = []\r\n                                            dataset.data._chartjs.listeners[0].chart.legend.legendItems.map((jedno, id) => {\r\n                                                pom1[id] = jedno.hidden\r\n                                                return pom1\r\n                                            })\r\n                                            if (bar._model.datasetLabel === \"Počet mŕtvych\" && pom1[0] === false)\r\n                                                ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n                                            else if (bar._model.datasetLabel === \"Počet vyliečených\" && pom1[1] === false)\r\n                                                ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n                                            else if (bar._model.datasetLabel === \"Počet nakazených\" && pom1[2] === false)\r\n                                                ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n\r\n                                        }\r\n                                        else\r\n                                            ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    if (data < 100) {\r\n                                        if (dataset.data._chartjs.listeners[0].chart.legend.legendItems[0].hidden === true\r\n                                            || dataset.data._chartjs.listeners[0].chart.legend.legendItems[0].hidden === false) {\r\n\r\n                                            if (dataset.data._chartjs.listeners[0].chart.legend.legendItems[0].text === \"Počet mŕtvych\") { //overenie pre posledny graf (tri udaje v objekte)\r\n                                                let pom1 = []\r\n                                                dataset.data._chartjs.listeners[0].chart.legend.legendItems.map((jedno, id) => {\r\n                                                    pom1[id] = jedno.hidden\r\n                                                    return pom1\r\n                                                })\r\n                                                if (bar._model.datasetLabel === \"Počet mŕtvych\" && pom1[0] === false)\r\n                                                    ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n                                                else if (bar._model.datasetLabel === \"Počet vyliečených\" && pom1[1] === false)\r\n                                                    ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n                                                else if (bar._model.datasetLabel === \"Počet nakazených\" && pom1[2] === false)\r\n                                                    ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n\r\n                                            }\r\n                                            else\r\n                                                ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            })\r\n                        })\r\n                    }\r\n                }\r\n            },\r\n        },\r\n    }\r\n\r\n    function FormatNumberShorter(x) {\r\n        if (isNaN(x) || (x < 1000)) {\r\n            return x\r\n        }\r\n        else if (x < 10000) {\r\n            return (x / 1000).toFixed(2) + \"k\"\r\n        }\r\n        else if (x < 100000) {\r\n            return (x / 1000).toFixed(1) + \"k\"\r\n        }\r\n\r\n        else if (x < 1000000) {\r\n            // return (x / 1000).toFixed(1) + \"k\"\r\n            return Math.round((x / 1000)) + \"k\"\r\n\r\n        }\r\n        else if (x < 10000000) {\r\n            return (x / 100000).toFixed(1) + \"M\"\r\n        }\r\n\r\n        else if (x < 1000000000) {\r\n            return (x / 1000000).toFixed(1) + \"M\"\r\n        }\r\n\r\n        else if (x < 1000000000000) {\r\n            return Math.round((x / 1000000000)) + \"B\"\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"\">\r\n            {console.log(\"asdasd\")}\r\n            <div className=\"mainDivPreGrafy\" >\r\n\r\n\r\n                <div className=\"barsGrafy\" >\r\n                    <h1>Denný prírastok nakazených</h1>\r\n                    <Bar\r\n                        data={allData.dataSetsDailyCases}\r\n                        options={allData.options}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"barsGrafy\" >\r\n                    <h1>Celkový počet aktívnych prípadov</h1>\r\n                    <Bar\r\n                        data={allData.dataSetsActiveCases}\r\n                        options={allData.options}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"barsGrafy\"  >\r\n                    <h1>Celkový prírastok nakazených/vyliečených</h1>\r\n                    <Bar\r\n                        data={allData.dataSetsCases}\r\n                        options={allData.options}\r\n                    />\r\n                </div>\r\n\r\n                {/* <div className=\"barsGrafy\" >\r\n                    <h1>Celkový počet vyliečených</h1>\r\n                    <Bar\r\n                        data={allData.dataSetsRecovered}\r\n                        options={allData.options}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"barsGrafy\" >\r\n                    <h1>Celkový počet úmrtí</h1>\r\n                    <Bar\r\n                        data={allData.dataSetsDeaths}\r\n                        options={allData.options}\r\n                    />\r\n                </div> */}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BarGraf\r\n","import React, { useState, useEffect } from 'react'\r\nimport BarGraf from './BarGraf';\r\nimport DougnatChart from './DougnatChart';\r\n\r\nfunction GrafyKrajina({ match }) {\r\n\r\n    const [dataforChart, setDataforChart] = useState()\r\n    const [loadMoreData, setLoadMoreData] = useState({\r\n        text: 'Zobraziť viac dni',\r\n        bool: false\r\n    })\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            let response1, data1, datumy, valuesCases, valueRecovered, valueDeaths, dailyCases = [], valueActiveCases = []\r\n            if (match.params.id === \"Svet\") {\r\n                if (loadMoreData.bool === false)\r\n                    response1 = await fetch(`https://disease.sh/v2/historical/All`)\r\n                else\r\n                    response1 = await fetch(`https://disease.sh/v2/historical/All?lastdays=all`)\r\n                data1 = await response1.json()\r\n                datumy = Object.keys(data1.cases)\r\n                valuesCases = Object.values(data1.cases)\r\n                valueRecovered = Object.values(data1.recovered)\r\n                valueDeaths = Object.values(data1.deaths)\r\n\r\n            }\r\n            else {\r\n                if (loadMoreData.bool === false)\r\n                    response1 = await fetch(`https://disease.sh/v2/historical/${match.params.id}`)\r\n                else\r\n                    response1 = await fetch(`https://disease.sh/v2/historical/${match.params.id}/?lastdays=all`)\r\n\r\n                data1 = await response1.json()\r\n                datumy = Object.keys(data1.timeline.cases)\r\n                valuesCases = Object.values(data1.timeline.cases)\r\n\r\n                valueRecovered = Object.values(data1.timeline.recovered)\r\n\r\n                valueDeaths = Object.values(data1.timeline.deaths)\r\n\r\n            }\r\n\r\n            datumy.map((jedenDatum, id) => {\r\n                if (valuesCases[id] > 0) {\r\n                    var d = new Date(jedenDatum);\r\n                    var datestring = d.getDate() + \". \" + (d.getMonth() + 1) + \". \" + d.getFullYear()\r\n                    return datumy[id] = datestring\r\n                }\r\n                else return null\r\n            })\r\n\r\n            // let testingX = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n            // console.log(\"length: \" + testingX.length)\r\n            // testingX = testingX.slice(-8)\r\n\r\n\r\n            valuesCases.map((oneCase, id) => {\r\n                valueActiveCases[id] = oneCase - valueRecovered[id] - valueDeaths[id]\r\n                if (id > 0) {\r\n                    dailyCases[id - 1] = valuesCases[id] - valuesCases[id - 1]\r\n                }\r\n\r\n                return dailyCases\r\n            })\r\n\r\n            // console.log(dailyCases)\r\n\r\n\r\n\r\n            // console.log(dailyCases)\r\n            valuesCases = valuesCases.filter(jedno => jedno !== 0);\r\n            valueRecovered = valueRecovered.splice(-valuesCases.length)\r\n            valueDeaths = valueDeaths.splice(-valuesCases.length)\r\n            datumy = datumy.splice(-valuesCases.length)\r\n            dailyCases = dailyCases.slice(-valuesCases.length)\r\n            valueActiveCases = valueActiveCases.slice(-valuesCases.length)\r\n            setDataforChart(\r\n                {\r\n                    nacitatViacUdajov: loadMoreData.bool,\r\n                    datumy: datumy,\r\n\r\n                    dataSetsCases: {\r\n                        datasets: [\r\n                            {\r\n                                label: \"Celkový počet nakazených\",\r\n                                data: valuesCases,\r\n                                backgroundColor: \"rgb(249, 70, 68)\",\r\n                                fillColor: 'black',\r\n                                hoverBackgroundColor: 'red',\r\n                            }\r\n                        ]\r\n                    },\r\n\r\n                    dataSetsDeaths: {\r\n                        datasets: [\r\n                            {\r\n                                label: \"Celkový počet úmrtí\",\r\n                                data: valueDeaths,\r\n                                backgroundColor: \"grey\",\r\n                                hoverBackgroundColor: 'grey',\r\n                            }\r\n                        ]\r\n                    },\r\n\r\n                    dataSetsRecovered: {\r\n                        datasets: [\r\n                            {\r\n                                label: \"Celkový počet vyliečených\",\r\n                                data: valueRecovered,\r\n                                backgroundColor: \"green\",\r\n                                hoverBackgroundColor: 'green',\r\n                            }\r\n                        ]\r\n                    },\r\n\r\n                    dataSetsActiveCases: {\r\n                        datasets: [\r\n                            {\r\n                                label: \"Celkový počet aktivnych prípadov\",\r\n                                data: valueActiveCases,\r\n                                backgroundColor: \"blue\",\r\n                                hoverBackgroundColor: 'blue',\r\n                            }\r\n                        ]\r\n                    },\r\n\r\n                    dataSetsDailyCases: {\r\n                        datasets: [\r\n                            {\r\n                                label: \"Denný prírastok nakazených\",\r\n                                data: dailyCases,\r\n                                backgroundColor: \"salmon\",\r\n                                hoverBackgroundColor: 'salmon',\r\n                            }\r\n                        ]\r\n                    },\r\n\r\n                }\r\n            )\r\n\r\n        }\r\n        fetchData()\r\n\r\n    }, [loadMoreData])\r\n\r\n\r\n    const ZmenitLoadMoreData = () => {\r\n        if (loadMoreData.bool === false)\r\n            setLoadMoreData({\r\n                text: 'Zobraziť menej dní',\r\n                bool: !loadMoreData.bool\r\n            })\r\n        else {\r\n            setLoadMoreData({\r\n                text: 'Zobraziť viac dní',\r\n                bool: !loadMoreData.bool\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        dataforChart ?\r\n            <div className=\"testingGrafy\">\r\n                {console.log(\"graffyyyy\")}\r\n\r\n                {match.params.id === \"Svet\" ?\r\n                    <h1>Covid-19 vo svete</h1>\r\n\r\n                    :\r\n                    < h1 > Covid - 19 v krajine {match.params.id}</h1>\r\n                }\r\n\r\n                <DougnatChart cases={dataforChart.dataSetsCases.datasets[0].data[dataforChart.dataSetsCases.datasets[0].data.length - 1]}\r\n                    recovered={dataforChart.dataSetsRecovered.datasets[0].data[dataforChart.dataSetsRecovered.datasets[0].data.length - 1]}\r\n                    deaths={dataforChart.dataSetsDeaths.datasets[0].data[dataforChart.dataSetsDeaths.datasets[0].data.length - 1]} />\r\n\r\n                <div className=\"NacitatViacDniDoGrafov\" onClick={ZmenitLoadMoreData}>\r\n                    {loadMoreData.text}\r\n                </div>\r\n\r\n\r\n                <div >\r\n                    <BarGraf props={dataforChart} />\r\n                </div>\r\n            </div >\r\n            : null\r\n    )\r\n}\r\n\r\nexport default GrafyKrajina\r\n","import React from 'react';\nimport './App.css';\nimport Nav from './Nav';\n\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom'\nimport CovidApp from './Covid/CovidApp';\n// const CovidApp = React.lazy(() => import('./Covid/CovidApp'));\n\nimport CovidSK from './Covid/CovidSK';\nimport GrafyKrajina from './Covid/GrafyKrajina';\n// const CovidSK = React.lazy(() => import('./Covid/CovidSK'));\n\n// import CovidApp from './Covid/CovidApp';\n// import CovidSK from './Covid/CovidSK';\n// import TodoApp from './Todo/TodoApp';\n// import { polyfill } from 'es6-promise'; polyfill();\n// require('es6-promise').polyfill();\n// require('isomorphic-fetch');\n\n\nfunction App() {\n  return (\n    <Router basename=\"/\">\n      <div className=\"App\">\n        <Nav />\n        <Switch>\n          <Route path=\"/\" component={CovidApp} exact />\n          <Route path=\"/Covid/CovidSK\" component={CovidSK} />\n          <Route path=\"/Covid/CovidApp\" exact component={CovidApp} />\n          <Route path=\"/Covid/CovidApp/:id\" component={GrafyKrajina} />\n          {/* <Route path=\"/Todo\" component={TodoApp} /> */}\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n","module.exports = __webpack_public_path__ + \"static/media/coronaIcon.02ed3e1a.svg\";","module.exports = __webpack_public_path__ + \"static/media/wideArrow.d20604a8.svg\";","module.exports = __webpack_public_path__ + \"static/media/earth.cdc4522b.svg\";","module.exports = __webpack_public_path__ + \"static/media/slovakiaIcon.a29682dd.svg\";"],"sourceRoot":""}