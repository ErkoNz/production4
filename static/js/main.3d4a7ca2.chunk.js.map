{"version":3,"sources":["Nav.js","Covid/components/FormatNumber.js","Covid/PrvyRiadokTabulky.js","Covid/components/LoadingAnimation.js","Covid/SvetTabulka.js","Covid/components/DataWorld.js","Covid/CovidApp.js","Covid/components/FormatNumberShorter.js","Covid/BarGrafSvk.js","Covid/CompareCislo.js","Covid/components/HandleSortObce.js","Covid/components/ActualTabulka.js","Covid/TabulkaMesta.js","Covid/components/ZmenitTextTabulkaMesta.js","Covid/components/HandleDataSvk.js","Covid/components/FuncSetDataForGraph.js","Covid/CovidSK.js","Covid/BarGraf.js","Covid/DougnatChart.js","Covid/GrafyKrajina.js","Covid/components/GetLastData.js","App.js","index.js","imgs/earth.svg","imgs/slovakiaIcon.svg"],"names":["Nav","useState","state","setState","navStyle","color","useEffect","a","fetch","response","json","data","tested_chart","length","LoadData","className","style","to","alt","src","earthIcon","slovakiaIcon","sklnovaniePripadov","day","infected","PocPripadov","FormatNumber","num","prop","toString","replace","PrvyRiadokTabulky","props","dataKontinenty","setDataKontinenty","doTabulkyPrvyRiadok","setDoTabulkyPrvyRiadok","sipkyDole","setSipkyDole","transition","position","marginTop","marginLeft","sipkaKontinenty","setSipkaKontinenty","left","styleForRollDown","setStyleForRollDown","axios","get","then","res","kontinent","result","filter","obj","continent","mainData","key","background","onClick","transform","tests","cases","active","todayCases","deaths","fontWeight","todayDeaths","recovered","map","oneKontinent","id","width","LoadingAnimation","SvetTabulka","ikonka","setIkonka","setKontinent","scrollPerformance","setScrollPerformance","Svet","boxShadow","Europe","V4","North_America","Asia","South_America","Africa","Australia_Oceania","style4Buttons","setStyle4Buttons","pomForStyleButtons","constStyleforButtons","useReducer","action","type","prevState","Error","dispatch","zmenIkonku","allowed","pom","countriesData","udaj","Object","keys","includes","reduce","myStyle2","window","addEventListener","document","querySelector","getBoundingClientRect","y","greenBackgroundforTR","onKeyUp","tr","td","i","getElementById","value","toUpperCase","getElementsByTagName","textContent","innerText","indexOf","display","placeholder","sortBy","item","country","pathname","htmlFor","DataWorld","numberTrans3","b","output","toFixed","todayRecovered","CovidApp","setMainData","doughnatData","setDoughnatData","setCountriesData","direction","price_usd","response1","data1","sort","parseFloat","fetchData","FormatNumberShorter","x","isNaN","Math","round","BarGrafSvk","propsData","allData","dataSetsCases","labels","datumy","datasets","label","backgroundColor","dataSetsDeaths","dataSetsRecovered","dataSetsDailyCasesAndTests","dataSetsDailyCases","dataSetsDailyTests","dataSetsActiveCases","options","maintainAspectRatio","responsive","legend","padding","e","legendItem","Chart","defaults","index","datasetIndex","ci","this","chart","meta","getDatasetMeta","hidden","update","scales","xAxes","stacked","gridLines","yAxes","ticks","callback","tooltips","mode","intersect","callbacks","tooltipItem","yLabel","animation","duration","onProgress","nacitatViacUdajov","chartInstance","ctx","textAlign","fillStyle","textBaseline","innerWidth","font","forEach","dataset","controller","bar","_chartjs","listeners","legendItems","text","pom1","jedno","_model","datasetLabel","fillText","ZmenitLoadMoreData","loadMoreData","bool","CompareCislo","sorting","stlpec","A","amount","B","JSON","parse","localStorage","getItem","infected_delta","HandleSortObce","setStylesArrows","setSorting","setItem","stringify","desc","sipkaNakazeni","sipkaPoslednyden","ActualTabulka","onlyStars","rerender","setRerender","GimmeStar","obec","local","SaveObecStar","dataObce","push","jednaObec","title","TabulkaMesta","tabulkaData","styleArrows","setOnlyStars","classList","toggle","HandleDataSvk","GetLastData","lastDay","GetTheDay","tested","districts","FuncSetDataForGraph","setDataForChart","dailyCases","valueActiveCases","valuesCases","valueDeaths","valueRecovered","valueTest","booleanProp","fillColor","hoverBackgroundColor","CovidSK","dataSvk","setDataSvk","dataForChart","setLoadMoreData","date","infected_daily","tested_daily","slice","LoadDataBegin","LoadDataOnChange","BarGraf","DougnatChart","height","totalSpolu","percent","centerText","easing","GrafyKrajina","match","dataforChart","setDataforChart","LastDayData","setLastDayData","LOCAL_STORAGE_LASTDAY","params","catch","error","console","log","values","timeline","jedenDatum","d","Date","datestring","getDate","getMonth","getFullYear","oneCase","splice","setDate","lastDataDatum","dataForCards","App","basename","path","component","exact","ReactDOM","render","module","exports"],"mappings":"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","file":"static/js/main.3d4a7ca2.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n// import './nav.css'\r\nimport './Covid/css/nav.scss'\r\nimport earthIcon from \"./imgs/earth.svg\"\r\nimport slovakiaIcon from \"./imgs/slovakiaIcon.svg\"\r\n\r\nfunction Nav() {\r\n    const [state, setState] = useState()\r\n    let navStyle = {\r\n        color: 'white',\r\n    }\r\n    useEffect(() => {\r\n        const LoadData = async () => {\r\n            const response = await fetch('https://mapa.covid.chat/map_data')\r\n            const data = await response.json()\r\n\r\n            setState(data.tested_chart[data.tested_chart.length - 1])\r\n        }\r\n        LoadData()\r\n    }, [])\r\n\r\n\r\n    const PocPripadov = () => {\r\n        if (state) {\r\n            let sklnovaniePripadov = \"prípadov\"\r\n            if (state.day === 1)\r\n                sklnovaniePripadov = \"prípad\"\r\n            else if (state.infected > 1 && state.infected < 5)\r\n                sklnovaniePripadov = \"prípady\"\r\n\r\n            return (\r\n                <div>{state.day}: <span>{state.infected}</span> {sklnovaniePripadov}</div>\r\n            )\r\n        }\r\n        else return null\r\n    }\r\n\r\n    // function doubleClickFC() {\r\n    //     window.location.href = \"#/Todo\"\r\n    // }\r\n\r\n    return (\r\n        <nav className=\"navApp\" >\r\n            <ul className=\"navLinks\">\r\n                <li>\r\n                    <Link style={navStyle} to='/Covid/CovidApp'>\r\n                        <div>\r\n                            <img alt=\"\" src={earthIcon} className=\"earthIcon\" />Covid vo svete\r\n                        </div>\r\n                    </Link>\r\n                </li>\r\n                <li>\r\n                    <Link style={navStyle} to='/Covid/CovidSK'>\r\n                        <div>\r\n                            <img alt=\"\" src={slovakiaIcon} className=\"svkIcon\" />Covid na Slovensku\r\n                           <div className=\"novePripady\">\r\n                                {PocPripadov()}\r\n                            </div>\r\n                        </div>\r\n                    </Link>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","function FormatNumber(num) {\r\n    if (num && num.prop > 999) {\r\n        return num.prop.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \")\r\n    }\r\n    else if (num && num.prop) {\r\n        return num.prop\r\n    }\r\n    else { return null }\r\n}\r\n\r\nexport default FormatNumber\r\n","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport FormatNumber from './components/FormatNumber'\r\nimport { IoIosArrowUp } from 'react-icons/io';\r\n\r\nfunction PrvyRiadokTabulky(props) {\r\n    // console.log(props)\r\n    const [dataKontinenty, setDataKontinenty] = useState()\r\n    const [doTabulkyPrvyRiadok, setDoTabulkyPrvyRiadok] = useState()\r\n    const [sipkyDole, setSipkyDole] = useState(true)\r\n    const [sipkaKontinenty, setSipkaKontinenty] = useState({\r\n        transition: 'all .2s ease-in',\r\n        position: 'absolute',\r\n        marginTop: '2px',\r\n        marginLeft: '2px'\r\n    })\r\n    const [styleForRollDown, setStyleForRollDown] = useState({\r\n        position: 'absolute',\r\n        left: '-1000px',\r\n        transition: 'all .2s ease-in',\r\n        // fontSize: '15px',\r\n    })\r\n\r\n    useEffect(() => {\r\n        axios.get(`https://disease.sh/v2/continents`)\r\n            .then(res => {\r\n                setDataKontinenty([res.data])\r\n            })\r\n\r\n        // if (dataKontinenty) {\r\n        //     let result = dataKontinenty[0].filter(obj => {\r\n        //         return obj.continent === props.kontinent\r\n        //     })\r\n        //     setDoTabulkyPrvyRiadok(result[0])\r\n        // }\r\n    }, [props.kontinent])\r\n\r\n\r\n    useEffect(() => {\r\n        if (dataKontinenty) {\r\n            let result = dataKontinenty[0].filter(obj => {\r\n                return obj.continent === props.kontinent\r\n            })\r\n            setDoTabulkyPrvyRiadok(result[0])\r\n        }\r\n    }, [dataKontinenty, props.kontinent])\r\n\r\n\r\n\r\n    const rollDownContintinents = () => {\r\n        setSipkyDole(!sipkyDole)\r\n        if (sipkyDole) {\r\n            setSipkaKontinenty({\r\n                transform: \"rotate(180deg)\",\r\n                transition: 'all .2s ease-in',\r\n                position: 'absolute',\r\n                marginTop: '2px',\r\n                marginLeft: '2px'\r\n            })\r\n            setStyleForRollDown({\r\n                // background: 'rgb(234, 234, 234)',\r\n                // fontSize: '15px',\r\n                transition: 'all .2s ease-in',\r\n            })\r\n        }\r\n        else {\r\n            setStyleForRollDown({\r\n                position: 'absolute',\r\n                left: '-1000px',\r\n                transition: 'all .2s ease-in',\r\n                // fontSize: '15px',\r\n            })\r\n\r\n            setSipkaKontinenty({\r\n                transform: \"rotate(0deg)\",\r\n                transition: 'all .2s ease-in',\r\n                position: 'absolute',\r\n                marginTop: '2px',\r\n                marginLeft: '2px'\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        styleForRollDown && dataKontinenty && sipkaKontinenty && styleForRollDown && props.mainData && props ?\r\n            <>\r\n                {props.kontinent === \"Svet\" ?\r\n                    <>\r\n                        <tr key={-1} style={{ background: 'rgb(234, 234, 234)' }} >\r\n                            <td onClick={rollDownContintinents}>\r\n                                <span className=\"spanJustHoverPointer\" >Celý Svet <IoIosArrowUp style={sipkaKontinenty} />\r\n                                    <div className=\"firstCase\">\r\n                                        <div className=\"firstCaseNumber\"><FormatNumber prop={props.mainData[0].tests} />\r\n                                        </div>\r\n                                    </div>\r\n                                </span>\r\n                            </td>\r\n                            <td><FormatNumber prop={props.mainData[0].cases} /></td>\r\n                            <td><FormatNumber prop={props.mainData[0].active} /></td>\r\n                            <td style={{ background: 'rgba(254, 255, 194, .4)' }}>+<FormatNumber prop={props.mainData[0].todayCases} /></td>\r\n                            <td><FormatNumber prop={props.mainData[0].deaths} /></td>\r\n                            <td style={{ color: ' rgba(156, 20, 20, 0.849)', fontWeight: 'bold' }}>+<FormatNumber prop={props.mainData[0].todayDeaths} /></td>\r\n                            <td style={{ fontWeight: 'bold', color: '#006600' }}><FormatNumber prop={props.mainData[0].recovered} /></td>\r\n                        </tr>\r\n                        {\r\n                            dataKontinenty[0].map((oneKontinent, id) => (\r\n                                <tr key={id} className=\"zrolovaneKontinenty\" style={styleForRollDown} >\r\n                                    <td style={{ width: '100px' }}>\r\n                                        {oneKontinent.continent}\r\n                                        <div className=\"firstCase\"><div className=\"firstCaseNumber\"><FormatNumber prop={oneKontinent.tests} /></div></div>\r\n                                    </td>\r\n                                    <td><FormatNumber prop={oneKontinent.cases} /></td>\r\n                                    <td><FormatNumber prop={oneKontinent.active} /></td>\r\n                                    <td style={{}}>+<FormatNumber prop={oneKontinent.todayCases} /></td>\r\n                                    <td><FormatNumber prop={oneKontinent.deaths} /></td>\r\n                                    <td style={{ color: ' rgba(156, 20, 20, 0.849)', fontWeight: 'bold' }}>+<FormatNumber prop={oneKontinent.todayDeaths} /></td>\r\n                                    <td style={{ fontWeight: 'bold', color: '#006600' }}><FormatNumber prop={oneKontinent.recovered} /></td>\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                    </>\r\n                    :\r\n                    <>\r\n                        {doTabulkyPrvyRiadok ?\r\n                            <tr key={-10} style={{ background: 'rgb(234, 234, 234)' }} >\r\n                                <td style={{ width: '100px' }}>\r\n                                    {doTabulkyPrvyRiadok.continent}\r\n                                    <div className=\"firstCase\"><div className=\"firstCaseNumber\"><FormatNumber prop={doTabulkyPrvyRiadok.tests} /></div></div>\r\n                                </td>\r\n                                <td><FormatNumber prop={doTabulkyPrvyRiadok.cases} /></td>\r\n                                <td><FormatNumber prop={doTabulkyPrvyRiadok.active} /></td>\r\n                                <td style={{}}>+<FormatNumber prop={doTabulkyPrvyRiadok.todayCases} /></td>\r\n                                <td><FormatNumber prop={doTabulkyPrvyRiadok.deaths} /></td>\r\n                                <td style={{ color: ' rgba(156, 20, 20, 0.849)', fontWeight: 'bold' }}>+<FormatNumber prop={doTabulkyPrvyRiadok.todayDeaths} /></td>\r\n                                <td style={{ fontWeight: 'bold', color: '#006600' }}><FormatNumber prop={doTabulkyPrvyRiadok.recovered} /></td>\r\n                            </tr>\r\n                            : null}\r\n                    </>\r\n                }\r\n            </>\r\n            : null\r\n    )\r\n}\r\n\r\nexport default PrvyRiadokTabulky\r\n","import React from 'react'\r\nimport { VscLoading } from 'react-icons/vsc'\r\n\r\nfunction LoadingAnimation() {\r\n    return (\r\n        <div className=\"loadingIcon\">\r\n            <div>< VscLoading /></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoadingAnimation\r\n","import React, { useState, useReducer, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { FaSortAmountDown } from 'react-icons/fa';\r\nimport PrvyRiadokTabulky from './PrvyRiadokTabulky';\r\nimport FormatNumber from './components/FormatNumber'\r\nimport './css/TabulkaSvet.css'\r\nimport './css/covidMainTable.scss'\r\nimport LoadingAnimation from './components/LoadingAnimation';\r\n\r\n\r\nfunction SvetTabulka(props) {\r\n    const [ikonka, setIkonka] = useState('cases')\r\n    const [kontinent, setKontinent] = useState(\"Svet\")\r\n    const [scrollPerformance, setScrollPerformance] = useState(false)\r\n    // const [LastDayData, setLastDayData] = useState()\r\n    const [style4Buttons, setStyle4Buttons] = useState({\r\n        Svet: { background: '#e5e5e5', boxShadow: 'inset 0px 0px 5px #c1c1c1' },\r\n        Europe: null,\r\n        V4: null,\r\n        North_America: null,\r\n        Asia: null,\r\n        South_America: null,\r\n        Africa: null,\r\n        Australia_Oceania: null,\r\n    })\r\n\r\n    const pomForStyleButtons = {\r\n        Svet: null,\r\n        Europe: null,\r\n        V4: null,\r\n        North_America: null,\r\n        Asia: null,\r\n        South_America: null,\r\n        Africa: null,\r\n        Australia_Oceania: null,\r\n    }\r\n    const constStyleforButtons = {\r\n        background: '#e5e5e5',\r\n        // background: 'rgb(216, 216, 216)',\r\n        boxShadow: 'inset 0px 0px 5px rgb(179, 179, 179)',\r\n        // transform: \"translate(1px,2px)\",\r\n        // fontWeight: 'bold'\r\n        // color: 'white'\r\n    }\r\n    // const [dispatch] = useReducer(reducer, 1);\r\n    const [state, dispatch] = useReducer(reducer, 1);\r\n\r\n    useEffect(() => {\r\n        const allowed = [\"country\", \"active\", \"todayCases\", \"cases\", \"deaths\", \"recovered\", \"tests\"]\r\n        let pom = []\r\n        // console.log(props.countriesData)\r\n        props.countriesData.map((udaj, id) => {\r\n            Object.keys(udaj)\r\n                .filter(key => allowed.includes(key))\r\n                .reduce((obj, key) => {\r\n                    obj[key] = udaj[key];\r\n                    pom[id] = obj\r\n                    return obj;\r\n\r\n                }, {})\r\n            return null\r\n        })\r\n        // setLastDayData(pom)\r\n    }, [props.countriesData])\r\n\r\n    function reducer(state, action) {\r\n        switch (action.type) {\r\n            case 'Svet':\r\n                setKontinent(\"Svet\")\r\n                return (setStyle4Buttons(prevState => {\r\n                    return { ...pomForStyleButtons, Svet: constStyleforButtons }\r\n                }))\r\n            case 'Europe':\r\n                setKontinent(\"Europe\")\r\n                return (setStyle4Buttons(prevState => {\r\n                    return { ...pomForStyleButtons, Europe: constStyleforButtons }\r\n                }))\r\n            case 'V4':\r\n                setKontinent(\"V4\")\r\n                return (setStyle4Buttons(prevState => {\r\n                    return { ...pomForStyleButtons, V4: constStyleforButtons }\r\n                }))\r\n            case 'North America':\r\n                setKontinent(\"North America\")\r\n                return (setStyle4Buttons(prevState => {\r\n                    return { ...pomForStyleButtons, North_America: constStyleforButtons }\r\n                }))\r\n            case 'Asia':\r\n                setKontinent(\"Asia\")\r\n                return (setStyle4Buttons(prevState => {\r\n                    return { ...pomForStyleButtons, Asia: constStyleforButtons }\r\n                }))\r\n            case 'South America':\r\n                setKontinent(\"South America\")\r\n                return (setStyle4Buttons(prevState => {\r\n                    return { ...pomForStyleButtons, South_America: constStyleforButtons }\r\n                }))\r\n            case 'Africa':\r\n                setKontinent(\"Africa\")\r\n                return (setStyle4Buttons(prevState => {\r\n                    return { ...pomForStyleButtons, Africa: constStyleforButtons }\r\n                }))\r\n            case 'Australia/Oceania':\r\n                setKontinent(\"Australia/Oceania\")\r\n                return (setStyle4Buttons(prevState => {\r\n                    return { ...pomForStyleButtons, Australia_Oceania: constStyleforButtons }\r\n                }))\r\n\r\n\r\n            default:\r\n                throw new Error();\r\n        }\r\n    }\r\n\r\n\r\n\r\n    function zmenIkonku(key) {\r\n        if (key === ikonka) {\r\n            setIkonka(key + \"2\")\r\n        }\r\n        else { setIkonka(key) }\r\n    }\r\n\r\n    const myStyle2 = {\r\n        transform: \"rotateX(180deg)\",\r\n    }\r\n\r\n    const myFunction = () => {\r\n        var input, filter, table, tr, td, i, txtValue;\r\n        input = document.getElementById(\"myInput\");\r\n        filter = input.value.toUpperCase();\r\n        table = document.getElementById(\"myTable\");\r\n        tr = table.getElementsByTagName(\"tr\");\r\n        for (i = 0; i < tr.length; i++) {\r\n            td = tr[i].getElementsByTagName(\"td\")[0];\r\n            if (td) {\r\n                txtValue = td.textContent || td.innerText;\r\n                if (txtValue.toUpperCase().indexOf(filter) > -1) {\r\n                    tr[i].style.display = \"\";\r\n                } else {\r\n                    tr[i].style.display = \"none\";\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    window.addEventListener('scroll', function () {\r\n        if (document.querySelector('.scrollingSvet')) {\r\n            if (document.querySelector('.scrollingSvet').getBoundingClientRect().y < 170)\r\n                setScrollPerformance(true)\r\n        }\r\n    });\r\n\r\n    const greenBackgroundforTR = (active) => {\r\n        if (active)\r\n            return null\r\n        else\r\n            return ({ background: 'rgb(190, 245, 204)' })\r\n    }\r\n\r\n    // function LastDataFunction(propCountry) {\r\n    // console.log(props.mainData[0].tests)\r\n    // console.log(LastDayData)\r\n    // if (LastDayData)\r\n    // LastDayData.filter(function (e) {\r\n    //     return e.country === propCountry\r\n    // })\r\n    // console.log(LastDayData)\r\n    // }\r\n    return (\r\n        ikonka && kontinent && props ?\r\n            <>\r\n                <input type=\"text\" id=\"myInput\" onKeyUp={myFunction} placeholder=\"Hľadať..\" className=\"inputSearch\" />\r\n                <div className=\"kontinenty\">\r\n                    <button onClick={() => dispatch({ type: 'Svet' })} style={style4Buttons.Svet}>\r\n                        Svet\r\n                    </button>\r\n                    <button onClick={() => dispatch({ type: 'Europe' })} style={style4Buttons.Europe}>\r\n                        Európa\r\n                    </button>\r\n                    <button onClick={() => dispatch({ type: 'V4' })} style={style4Buttons.V4}>\r\n                        V4\r\n                    </button>\r\n                    <button onClick={() => dispatch({ type: 'North America' })} style={style4Buttons.North_America}>\r\n                        Severná Amerika\r\n                    </button>\r\n                    <button onClick={() => dispatch({ type: 'Asia' })} style={style4Buttons.Asia}>\r\n                        Ázia\r\n                    </button>\r\n                    <button onClick={() => dispatch({ type: 'South America' })} style={style4Buttons.South_America}>\r\n                        Južná Amerika\r\n                    </button>\r\n                    <button onClick={() => dispatch({ type: 'Africa' })} style={style4Buttons.Africa}>\r\n                        Afrika\r\n                    </button>\r\n                    <button onClick={() => dispatch({ type: 'Australia/Oceania' })} style={style4Buttons.Australia_Oceania}>\r\n                        Austrália/Oceánia\r\n                    </button>\r\n\r\n                </div>\r\n                <div className=\"divTable\" >\r\n                    <table id=\"myTable\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th onClick={() => (props.sortBy(\"tests\") || zmenIkonku(\"tests\"))} >\r\n                                    Krajina\r\n                                    {ikonka === \"tests\"\r\n                                        ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                    {ikonka === \"tests2\"\r\n                                        ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                    <div className=\"firstCase\" style={{ fontWeight: 'normal' }}>Počet testov</div>\r\n\r\n                                </th>\r\n                                <th onClick={() => (props.sortBy('cases') || zmenIkonku('cases'))} >\r\n                                    Počet nakazených\r\n                            {ikonka === \"cases\"\r\n                                        ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                    {ikonka === \"cases2\"\r\n                                        ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                </th>\r\n                                <th onClick={() => (props.sortBy(\"active\") || zmenIkonku(\"active\"))} >\r\n                                    Aktívne prípady\r\n                            {ikonka === \"active\"\r\n                                        ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                    {ikonka === \"active2\"\r\n                                        ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                </th>\r\n                                <th onClick={() => (props.sortBy(\"todayCases\") || zmenIkonku(\"todayCases\"))} >\r\n                                    Nové prípady\r\n                            {ikonka === \"todayCases\"\r\n                                        ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                    {ikonka === \"todayCases2\"\r\n                                        ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                </th>\r\n                                <th onClick={() => (props.sortBy(\"deaths\") || zmenIkonku(\"deaths\"))} >\r\n                                    Počet úmrtí\r\n                            {ikonka === \"deaths\"\r\n                                        ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                    {ikonka === \"deaths2\"\r\n                                        ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                </th>\r\n                                <th onClick={() => (props.sortBy(\"todayDeaths\") || zmenIkonku(\"todayDeaths\"))} >\r\n                                    Nové úmrtia\r\n                            {ikonka === \"todayDeaths\"\r\n                                        ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                    {ikonka === \"todayDeaths2\"\r\n                                        ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                </th>\r\n                                <th onClick={() => (props.sortBy(\"recovered\") || zmenIkonku(\"recovered\"))} >\r\n                                    Počet vyliečených\r\n                            {ikonka === \"recovered\"\r\n                                        ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                    {ikonka === \"recovered2\"\r\n                                        ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <PrvyRiadokTabulky kontinent={kontinent} mainData={props.mainData} />\r\n                            {/* {console.log(props.mainData[0].tests)} */}\r\n                            {kontinent === \"Svet\" ?\r\n                                <>\r\n                                    {props.countriesData.map((item, id) => (\r\n                                        scrollPerformance || id < 20 ?\r\n                                            <tr className=\"scrollingSvet\" key={id} style={greenBackgroundforTR(item.active)}>\r\n                                                <td style={{ width: '100px' }}>\r\n                                                    {item.country === \"Slovakia\" ?\r\n                                                        <Link to=\"/Covid/CovidSK\">\r\n                                                            <span className=\"KrajinaLink\" >{item.country}</span>\r\n                                                            {item.tests > 0 ?\r\n                                                                <div className=\"firstCase\">\r\n                                                                    <div className=\"firstCaseNumber\">\r\n                                                                        <FormatNumber prop={item.tests} />\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                                : null}\r\n                                                        </Link>\r\n                                                        :\r\n                                                        <Link to={{\r\n                                                            // state: LastDataFunction(item.country), pathname: `/Covid/CovidApp/${item.country}`\r\n                                                            state: props.mainData[0].tests, pathname: `/Covid/CovidApp/${item.country}`\r\n                                                        }}>\r\n                                                            <span className=\"KrajinaLink\" >{item.country}</span>\r\n                                                            {item.tests > 0 ?\r\n                                                                <div className=\"firstCase\">\r\n                                                                    <div className=\"firstCaseNumber\">\r\n                                                                        <FormatNumber prop={item.tests} />\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                                : null}\r\n                                                        </Link>\r\n                                                    }\r\n\r\n                                                </td>\r\n                                                <td><FormatNumber prop={item.cases} /></td>\r\n                                                <td>{item.active ? <FormatNumber prop={item.active} /> : \"0\"}</td>\r\n\r\n                                                {item.todayCases > 0 ?\r\n                                                    <td style={{ background: ' rgb(254, 255, 194)' }}>+<FormatNumber prop={item.todayCases} /> </td>\r\n                                                    : <td></td>\r\n                                                }\r\n                                                <td><FormatNumber prop={item.deaths} /></td>\r\n                                                {item.todayDeaths > 0 ?\r\n                                                    <td style={{ color: ' rgba(156, 20, 20, 0.849)', fontWeight: 'bold' }}>+<FormatNumber prop={item.todayDeaths} /> </td>\r\n                                                    : <td></td>\r\n                                                }\r\n                                                <td style={{ fontWeight: 'bold', color: '#006600' }}><FormatNumber prop={item.recovered} /></td>\r\n                                            </tr>\r\n                                            : null\r\n                                    ))\r\n                                    }\r\n                                </>\r\n\r\n                                : kontinent === \"V4\" ?\r\n                                    <>\r\n                                        {props.countriesData.map((item, id) => (\r\n                                            item.country === \"Slovakia\"\r\n                                                || item.country === \"Czechia\"\r\n                                                || item.country === \"Hungary\"\r\n                                                || item.country === \"Poland\"\r\n                                                || item.country === \"Austria\"\r\n                                                || item.country === \"Ukraine\" ?\r\n\r\n                                                <tr className=\"scrollingSvet\" key={id} style={greenBackgroundforTR(item.active)}>\r\n                                                    {/* {console.log(item.country)} */}\r\n\r\n                                                    <td style={{ width: '100px' }}>\r\n                                                        {item.country === \"Slovakia\" ?\r\n                                                            <Link to=\"/Covid/CovidSK\" >\r\n\r\n                                                                <span className=\"KrajinaLink\" >{item.country}</span>\r\n                                                                {item.tests > 0 ?\r\n                                                                    <div className=\"firstCase\">\r\n                                                                        <div className=\"firstCaseNumber\">\r\n                                                                            <FormatNumber prop={item.tests} />\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                    : null}\r\n                                                            </Link>\r\n                                                            :\r\n\r\n                                                            <Link to={{\r\n                                                                // state: LastDataFunction(item.country), pathname: `/Covid/CovidApp/${item.country}`\r\n                                                                state: props.mainData[0].tests, pathname: `/Covid/CovidApp/${item.country}`\r\n                                                            }}>\r\n                                                                <span className=\"KrajinaLink\" >{item.country}</span>\r\n\r\n                                                                {item.tests > 0 ?\r\n                                                                    <div className=\"firstCase\">\r\n                                                                        <div className=\"firstCaseNumber\">\r\n                                                                            <FormatNumber prop={item.tests} />\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                    : null}\r\n                                                            </Link>\r\n\r\n                                                        }\r\n\r\n\r\n                                                    </td>\r\n                                                    <td><FormatNumber prop={item.cases} /></td>\r\n                                                    <td>{item.active ? <FormatNumber prop={item.active} /> : \"0\"}</td>\r\n\r\n                                                    {item.todayCases > 0 ?\r\n                                                        <td style={{ background: ' rgb(254, 255, 194)' }}>+<FormatNumber prop={item.todayCases} /> </td>\r\n                                                        : <td></td>\r\n                                                    }\r\n                                                    <td><FormatNumber prop={item.deaths} /></td>\r\n                                                    {item.todayDeaths > 0 ?\r\n                                                        <td style={{ color: ' rgba(156, 20, 20, 0.849)', fontWeight: 'bold' }}>+<FormatNumber prop={item.todayDeaths} /> </td>\r\n                                                        : <td></td>\r\n                                                    }\r\n                                                    <td style={{ fontWeight: 'bold', color: '#006600' }}><FormatNumber prop={item.recovered} /></td>\r\n                                                </tr>\r\n                                                : null\r\n                                        ))\r\n                                        }\r\n                                    </>\r\n\r\n                                    :\r\n                                    props.countriesData.map((item, id) => (\r\n                                        item.continent === kontinent ?\r\n                                            <tr key={id} style={greenBackgroundforTR(item.active)}>\r\n                                                <td style={{ width: '100px' }}>\r\n                                                    {item.country === \"Slovakia\" ?\r\n                                                        <Link to=\"/Covid/CovidSK\">\r\n                                                            <span className=\"KrajinaLink\" >{item.country}</span>\r\n                                                            {item.tests > 0 ?\r\n                                                                <div className=\"firstCase\">\r\n                                                                    <div className=\"firstCaseNumber\">\r\n                                                                        <FormatNumber prop={item.tests} />\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                                : null}\r\n                                                        </Link>\r\n                                                        :\r\n                                                        <Link to={{\r\n                                                            // state: LastDataFunction(item.country), pathname: `/Covid/CovidApp/${item.country}`\r\n                                                            state: props.mainData[0].tests, pathname: `/Covid/CovidApp/${item.country}`\r\n                                                        }}>\r\n                                                            <span className=\"KrajinaLink\" >{item.country}</span>\r\n                                                            {item.tests > 0 ?\r\n                                                                <div className=\"firstCase\">\r\n                                                                    <div className=\"firstCaseNumber\">\r\n                                                                        <FormatNumber prop={item.tests} />\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                                : null}\r\n                                                        </Link>\r\n                                                    }\r\n\r\n                                                </td>\r\n                                                <td><FormatNumber prop={item.cases} /></td>\r\n                                                <td>{item.active ? <FormatNumber prop={item.active} /> : \"0\"}</td>\r\n                                                {item.todayCases > 0 ?\r\n                                                    <td style={{ background: ' rgb(254, 255, 194)' }}>+<FormatNumber prop={item.todayCases} /> </td>\r\n                                                    : <td></td>\r\n                                                }\r\n                                                <td><FormatNumber prop={item.deaths} /></td>\r\n                                                {item.todayDeaths > 0 ?\r\n                                                    <td style={{ color: ' rgba(156, 20, 20, 0.849)', fontWeight: 'bold' }}>+<FormatNumber prop={item.todayDeaths} /> </td>\r\n                                                    : <td></td>\r\n                                                }\r\n                                                <td style={{ fontWeight: 'bold', color: 'green' }}><FormatNumber prop={item.recovered} /></td>\r\n                                            </tr>\r\n                                            : null\r\n                                    ))\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                    <label htmlFor=\"myInput\">.</label>\r\n                </div>\r\n            </>\r\n            : null\r\n    )\r\n}\r\n\r\nexport default SvetTabulka","import React from 'react'\r\n// import coronaIcon from \"../../imgs/coronaIcon.svg\"\r\nimport { GiDeathSkull } from \"react-icons/gi\";\r\nimport { FaPlusCircle } from \"react-icons/fa\";\r\nimport { RiVirusLine } from \"react-icons/ri\";\r\nimport FormatNumber from './FormatNumber'\r\nimport '../css/dataWorld.scss'\r\n\r\nfunction DataWorld({ mainData }) {\r\n    // console.log(mainData, \"a\")\r\n    // console.log(mainData)\r\n\r\n    function numberTrans3(a, b) {\r\n        if (a) {\r\n            let output = b / (a / 100)\r\n            output = b / (a / 100)\r\n            output = output.toFixed(3)\r\n            output = output.toString()\r\n            output = output.replace(\".\", \",\")\r\n            return (\r\n                <div className=\"aktiveNakazenych\">\r\n                    V percentách: <span>{output}%</span>\r\n                </div >\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"cardsDivNew\">\r\n            <div className=\"cardsNew\">\r\n                <div className=\"iconInCard cases\">\r\n                    <RiVirusLine />\r\n                </div>\r\n                <div className=\"upperText\">Počet nakazených</div>\r\n                <div className=\"mainText cases\">\r\n                    <FormatNumber prop={mainData[0].cases} />\r\n                    {mainData[0].todayCases ? <span className=\"plusInfected\">+<FormatNumber prop={mainData[0].todayCases} /></span> : null}\r\n\r\n                </div>\r\n                <div className=\"underText\">\r\n                    Počet aktívnych prípadov:    <span><FormatNumber prop={mainData[0].active} /></span><br />\r\n                    Počet testov:    <span><FormatNumber prop={mainData[0].tests} /></span>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div className=\"cardsNew\">\r\n                <div className=\"iconInCard recovered\">\r\n                    <FaPlusCircle />\r\n                </div>\r\n                <div className=\"upperText\">Počet vyliečených</div>\r\n                <div className=\"mainText recovered\">\r\n                    {mainData[0].recovered > 0 ?\r\n                        <>\r\n                            <FormatNumber prop={mainData[0].recovered} />\r\n                            {mainData[0].todayRecovered ?\r\n                                <span className=\"plusRecovered\">+<FormatNumber prop={mainData[0].todayRecovered} /></span>\r\n                                : null}\r\n                        </>\r\n                        : <div className=\"krajinaNezverejnuje\">Krajina nezverejňuje počet vyliečených</div>}\r\n                </div>\r\n                <div className=\"underText\">\r\n                    {mainData[0].recovered > 0 && numberTrans3(mainData[0].cases, mainData[0].recovered)}\r\n                </div>\r\n            </div>\r\n\r\n\r\n            <div className=\"cardsNew\">\r\n                <div className=\"iconInCard deaths\">\r\n                    <GiDeathSkull />\r\n                </div>\r\n                <div className=\"upperText\">Počet úmrtí</div>\r\n                <div className=\"mainText deaths\">\r\n                    <FormatNumber prop={mainData[0].deaths} />\r\n                    {mainData[0].todayDeaths ? <span className=\"plusDeaths\">+<FormatNumber prop={mainData[0].todayDeaths} /></span> : null}\r\n                </div>\r\n                <div className=\"underText\">\r\n                    {numberTrans3(mainData[0].cases, mainData[0].deaths)}\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n\r\n            {/* \r\n            <div className=\"cards\">\r\n                <div className=\"topCard\">\r\n                    <div className=\"obrDiv\">\r\n                        <div className=\"circle\">\r\n                            <img alt=\"\" src={coronaIcon} />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"textCard\">Počet nakazených</div>\r\n                </div>\r\n                <div className=\"mainText\">\r\n                    <FormatNumber prop={mainData[0].cases} />\r\n                    <div className=\"aktiveNakazenych\">\r\n                        <span>Počet aktívnych prípadov:</span> <FormatNumber prop={mainData[0].active} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n            <div className=\"cards\">\r\n                <div className=\"topCard\">\r\n                    <div className=\"obrDiv\">\r\n                        <div className=\"circle HP\">\r\n                            <FaPlusCircle color={\"green\"} />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"textCard\"> Počet vyliečených</div>\r\n                </div>\r\n                <div className=\"mainText\">\r\n                    <FormatNumber prop={mainData[0].recovered} />\r\n                    {numberTrans3(mainData[0].cases, mainData[0].recovered)}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"cards\">\r\n                <div className=\"topCard\">\r\n                    <div className=\"obrDiv\">\r\n                        <div className=\"circle skull\">\r\n                            <GiDeathSkull color={\"white\"} />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"textCard\"> Počet úmrtí</div>\r\n                </div>\r\n                <div className=\"mainText\">\r\n                    <FormatNumber prop={mainData[0].deaths} />\r\n                    {numberTrans3(mainData[0].cases, mainData[0].deaths)}\r\n                </div>\r\n            </div> */}\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default DataWorld\r\n","import React, { useState, useEffect } from 'react'\r\nimport './css/covid.css'\r\n// import './css/covidDesign.css'\r\nimport { Link } from 'react-router-dom'\r\nimport SvetTabulka from \"./SvetTabulka\"\r\nimport { AiOutlineDoubleRight } from \"react-icons/ai\";\r\n// import DougnatChart from \"./DougnatChart\"\r\nimport DataWorld from './components/DataWorld'\r\nimport LoadingAnimation from './components/LoadingAnimation';\r\n\r\nfunction CovidApp() {\r\n    const [mainData, setMainData] = useState()\r\n    const [doughnatData, setDoughnatData] = useState()\r\n    const [countriesData, setCountriesData] = useState()\r\n    const [state, setState] = useState({\r\n        countriesData: countriesData,\r\n        direction: {\r\n            price_usd: 'asc',\r\n        }\r\n    })\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const response1 = await fetch('https://disease.sh/v2/all')\r\n            let data1 = await response1.json()\r\n            setDoughnatData([data1.cases, data1.recovered, data1.deaths])\r\n            setMainData([data1])\r\n\r\n            const response = await fetch('https://disease.sh/v2/countries')\r\n            let data = await response.json()\r\n            setCountriesData(data)\r\n            setState({\r\n                data: data.sort((a, b) => (\r\n                    state.direction['cases'] === 'asc'\r\n                        ? parseFloat(a['cases']) - parseFloat(b['cases'])\r\n                        : parseFloat(b['cases']) - parseFloat(a['cases'])\r\n                )),\r\n                direction: {\r\n                    'cases': state.direction['cases'] === 'asc'\r\n                        ? 'desc'\r\n                        : 'asc'\r\n                }\r\n            })\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    function sortBy(key) {\r\n        setState({\r\n            countriesData: countriesData.sort((a, b) => (\r\n                state.direction[key] === 'asc'\r\n                    ? parseFloat(a[key]) - parseFloat(b[key])\r\n                    : parseFloat(b[key]) - parseFloat(a[key])\r\n            )),\r\n            direction: {\r\n                [key]: state.direction[key] === 'asc'\r\n                    ? 'desc'\r\n                    : 'asc'\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        mainData && doughnatData && countriesData && (state.direction['cases'] || state.direction['tests']\r\n            || state.direction['active']\r\n            || state.direction['todayCases']\r\n            || state.direction['deaths']\r\n            || state.direction['recovered']\r\n            || state.direction['todayDeaths']) ?\r\n            <div className=\"covidApp\">\r\n                <DataWorld mainData={mainData} />\r\n                <br></br>\r\n                <br></br>\r\n                <div className=\"SlovenskeUdajeLink\" >\r\n                    <Link to='/Covid/CovidSK'>Slovenské údaje <AiOutlineDoubleRight className=\"iconSlovUdaje\" />\r\n                    </Link>\r\n                </div>\r\n                <br></br>\r\n                <div className=\"SlovenskeUdajeLink\" >\r\n                    <Link to={`/Covid/CovidApp/Svet`} >Grafy pre celý svet <AiOutlineDoubleRight className=\"iconSlovUdaje\" />\r\n                    </Link>\r\n                </div>\r\n                <br></br><br></br>\r\n                <SvetTabulka countriesData={countriesData} mainData={mainData} sortBy={sortBy} />\r\n            </div >\r\n            : <LoadingAnimation />\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default CovidApp\r\n","function FormatNumberShorter(x) {\r\n    if (isNaN(x) || (x < 1000)) {\r\n        return x\r\n    }\r\n    else if (x < 10000) {\r\n        return (x / 1000).toFixed(2) + \"k\"\r\n    }\r\n    else if (x < 100000) {\r\n        return (x / 1000).toFixed(1) + \"k\"\r\n    }\r\n\r\n    else if (x < 1000000) {\r\n        // return (x / 1000).toFixed(1) + \"k\"\r\n        return Math.round((x / 1000)) + \"k\"\r\n\r\n    }\r\n    else if (x < 10000000) {\r\n        return (x / 1000000).toFixed(1) + \"M\"\r\n    }\r\n\r\n    else if (x < 1000000000) {\r\n        return (x / 1000000).toFixed(1) + \"M\"\r\n    }\r\n\r\n    else if (x < 1000000000000) {\r\n        return Math.round((x / 1000000000)) + \"B\"\r\n    }\r\n}\r\n\r\nexport default FormatNumberShorter\r\n","import React from 'react'\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { Chart } from 'react-chartjs-2';\r\nimport './css/cssPreBarGrafy.css'\r\nimport FormatNumberShorter from './components/FormatNumberShorter'\r\nimport './css/cssPreBarGrafy.css'\r\nimport { FiBarChart } from 'react-icons/fi'\r\nimport { BiBarChart } from 'react-icons/bi'\r\n\r\nfunction BarGrafSvk(props) {\r\n    const propsData = props.props\r\n\r\n    const allData = {\r\n        dataSetsCases: {\r\n            labels: propsData.datumy,\r\n            datasets: [{\r\n                label: 'Počet mŕtvych',\r\n                backgroundColor: \"grey\",\r\n                data: propsData.dataSetsDeaths.datasets[0].data,\r\n            },\r\n            {\r\n                label: 'Počet vyliečených',\r\n                backgroundColor: \"#57C757\",\r\n                data: propsData.dataSetsRecovered.datasets[0].data,\r\n            },\r\n            {\r\n                label: 'Počet nakazených',\r\n                backgroundColor: \"#FF4D4D\",\r\n                data: propsData.dataSetsCases.datasets[0].data,\r\n            }],\r\n        },\r\n\r\n        dataSetsDailyCasesAndTests: {\r\n            labels: propsData.datumy,\r\n            datasets: [{\r\n                label: 'Prírastok nakazených',\r\n                backgroundColor: \"salmon\",\r\n                data: propsData.dataSetsDailyCases.datasets[0].data,\r\n            },\r\n            {\r\n                label: 'Prírastok testov',\r\n                backgroundColor: \"#b4f1f1\",\r\n                data: propsData.dataSetsDailyTests.datasets[0].data,\r\n            }],\r\n        },\r\n\r\n        dataSetsDailyCases: {\r\n            labels: propsData.datumy,\r\n            datasets: propsData.dataSetsDailyCases.datasets\r\n        },\r\n\r\n        dataSetsActiveCases: {\r\n            labels: propsData.datumy,\r\n            datasets: propsData.dataSetsActiveCases.datasets\r\n        },\r\n\r\n        options: {\r\n            maintainAspectRatio: false,\r\n            responsive: true,\r\n\r\n            legend: {\r\n                position: \"bottom\",\r\n                labels: {\r\n                    padding: 25,\r\n                },\r\n                onClick: function (e, legendItem) {\r\n                    const defaultLegendClickHandler = () => { return Chart.defaults }\r\n                    defaultLegendClickHandler(e, legendItem);\r\n                    // return \r\n                    var index = legendItem.datasetIndex;\r\n                    var ci = this.chart;\r\n                    var meta = ci.getDatasetMeta(index);\r\n                    // See controller.isDatasetVisible comment\r\n                    meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null;\r\n\r\n                    // We hid a dataset ... rerender the chart\r\n                    ci.update();\r\n\r\n                }\r\n            },\r\n            scales: {\r\n                xAxes: [{\r\n                    stacked: true,\r\n                    gridLines: {\r\n                        display: false,\r\n                    }\r\n                }],\r\n                yAxes: [{\r\n                    stacked: true,\r\n                    ticks: {\r\n                        callback: function (value) {\r\n                            return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \")\r\n                        }\r\n                    }\r\n                }]\r\n            },\r\n            tooltips: {\r\n                // mode: 'x',\r\n                mode: 'index',\r\n                position: 'nearest',\r\n                intersect: false,\r\n                callbacks: {\r\n                    label: function (tooltipItem, chart) {\r\n                        var datasetLabel = chart.datasets[tooltipItem.datasetIndex].label || '';\r\n\r\n                        return datasetLabel + \": \" + tooltipItem.yLabel.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \")\r\n                    }\r\n                },\r\n            },\r\n            animation: {\r\n                duration: 500,\r\n                onProgress: function () {\r\n                    if (propsData.nacitatViacUdajov === false) {\r\n                        var chartInstance = this.chart,\r\n                            ctx = chartInstance.ctx;\r\n                        ctx.textAlign = 'center';\r\n                        ctx.fillStyle = \"rgba(0, 0, 0, .75)\";\r\n                        ctx.textBaseline = 'bottom';\r\n                        if (window.innerWidth > 1220) {\r\n                            ctx.font = \"bold 12px Arial\";\r\n                        }\r\n                        else if (window.innerWidth > 720) {\r\n                            ctx.font = \"bold 11px Arial\";\r\n                        }\r\n                        else {\r\n                            ctx.font = \"bold 6px Arial\";\r\n                        }\r\n                        this.data.datasets.forEach(function (dataset, i) {\r\n                            var meta = chartInstance.controller.getDatasetMeta(i);\r\n                            meta.data.forEach(function (bar, index) {\r\n                                var data = dataset.data[index];\r\n                                if (index % 2 === 0) {\r\n                                    if (dataset.data._chartjs.listeners[0].chart.legend.legendItems[0].hidden === true\r\n                                        || dataset.data._chartjs.listeners[0].chart.legend.legendItems[0].hidden === false) {\r\n                                        if (dataset.data._chartjs.listeners[0].chart.legend.legendItems[0].text === \"Počet mŕtvych\") { //overenie pre posledny graf (tri udaje v objekte)\r\n                                            let pom1 = []\r\n                                            dataset.data._chartjs.listeners[0].chart.legend.legendItems.map((jedno, id) => {\r\n                                                pom1[id] = jedno.hidden\r\n                                                return pom1\r\n                                            })\r\n                                            if (bar._model.datasetLabel === \"Počet mŕtvych\" && pom1[0] === false)\r\n                                                ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n                                            else if (bar._model.datasetLabel === \"Počet vyliečených\" && pom1[1] === false)\r\n                                                ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n                                            else if (bar._model.datasetLabel === \"Počet nakazených\" && pom1[2] === false)\r\n                                                ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n\r\n                                        }\r\n\r\n                                        else if (dataset.data._chartjs.listeners[0].chart.legend.legendItems[0].text === \"Prírastok nakazených\") {\r\n                                            let pom1 = []\r\n                                            dataset.data._chartjs.listeners[0].chart.legend.legendItems.map((jedno, id) => {\r\n                                                pom1[id] = jedno.hidden\r\n                                                return pom1\r\n                                            })\r\n                                            if (!pom1[0])\r\n                                                ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n                                        }\r\n\r\n                                        else\r\n                                            ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    if (data < 100) {\r\n                                        if (dataset.data._chartjs.listeners[0].chart.legend.legendItems[0].hidden === true\r\n                                            || dataset.data._chartjs.listeners[0].chart.legend.legendItems[0].hidden === false) {\r\n\r\n                                            if (dataset.data._chartjs.listeners[0].chart.legend.legendItems[0].text === \"Počet mŕtvych\") { //overenie pre posledny graf (tri udaje v objekte)\r\n                                                let pom1 = []\r\n                                                dataset.data._chartjs.listeners[0].chart.legend.legendItems.map((jedno, id) => {\r\n                                                    pom1[id] = jedno.hidden\r\n                                                    return pom1\r\n                                                })\r\n                                                if (bar._model.datasetLabel === \"Počet mŕtvych\" && pom1[0] === false)\r\n                                                    ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n                                                else if (bar._model.datasetLabel === \"Počet vyliečených\" && pom1[1] === false)\r\n                                                    ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n                                                else if (bar._model.datasetLabel === \"Počet nakazených\" && pom1[2] === false)\r\n                                                    ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n\r\n                                            }\r\n                                            else\r\n                                                ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            })\r\n                        })\r\n                    }\r\n                }\r\n            },\r\n        },\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"mainDivPreGrafy\" >\r\n\r\n\r\n                <div className=\"NacitatViacDniDoGrafov\" onClick={() => props.ZmenitLoadMoreData()}>\r\n                    {props.loadMoreData.bool ? <FiBarChart className=\"chartIcon\" /> : <BiBarChart className=\"chartIcon\" />}\r\n                    {props.loadMoreData.text}\r\n                </div>\r\n                <div className=\"barsGrafy\" >\r\n                    <h1>Denný prírastok nakazených</h1>\r\n                    <Bar\r\n                        data={allData.dataSetsDailyCases}\r\n                        options={allData.options}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"NacitatViacDniDoGrafov\" onClick={() => props.ZmenitLoadMoreData()}>\r\n                    {props.loadMoreData.bool ? <FiBarChart className=\"chartIcon\" /> : <BiBarChart className=\"chartIcon\" />}\r\n                    {props.loadMoreData.text}\r\n                </div>\r\n                <div className=\"barsGrafy\" >\r\n                    <h1>Celkový počet aktívnych prípadov</h1>\r\n                    <Bar\r\n                        data={allData.dataSetsActiveCases}\r\n                        options={allData.options}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"NacitatViacDniDoGrafov\" onClick={() => props.ZmenitLoadMoreData()}>\r\n                    {props.loadMoreData.bool ? <FiBarChart className=\"chartIcon\" /> : <BiBarChart className=\"chartIcon\" />}\r\n                    {props.loadMoreData.text}\r\n                </div>\r\n                <div className=\"barsGrafy\"  >\r\n                    <h1>Celkový prírastok nakazených/vyliečených</h1>\r\n                    <Bar\r\n                        data={allData.dataSetsCases}\r\n                        options={allData.options}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"NacitatViacDniDoGrafov\" onClick={() => props.ZmenitLoadMoreData()}>\r\n                    {props.loadMoreData.bool ? <FiBarChart className=\"chartIcon\" /> : <BiBarChart className=\"chartIcon\" />}\r\n                    {props.loadMoreData.text}\r\n                </div>\r\n                <div className=\"barsGrafy\" >\r\n                    <h1>Denný prírastok nakazených/testov</h1>\r\n                    <Bar\r\n                        data={allData.dataSetsDailyCasesAndTests}\r\n                        options={allData.options}\r\n                    />\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BarGrafSvk\r\n","function CompareCislo(data, sorting, stlpec) {\r\n\r\n    // const [stlpcek, setStlpcek] = useState(stlpec)\r\n    // if (stlpec === \"females\") {\r\n    //     data.sort(compareNum)\r\n    //     function compareNum(b, a) {\r\n    //         const A = a.females\r\n    //         const B = b.females\r\n    //         if (sorting) {\r\n    //             if (A > B) {\r\n    //                 return 1\r\n    //             } else if (A < B) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //         else {\r\n    //             if (B > A) {\r\n    //                 return 1\r\n    //             } else if (B < A) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //     }\r\n    // }\r\n    // else if (stlpec === \"males\") {\r\n    //     data.sort(compareNum)\r\n    //     function compareNum(b, a) {\r\n    //         const A = a.males\r\n    //         const B = b.males\r\n    //         if (sorting) {\r\n    //             if (A > B) {\r\n    //                 return 1\r\n    //             } else if (A < B) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //         else {\r\n    //             if (B > A) {\r\n    //                 return 1\r\n    //             } else if (B < A) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //     }\r\n    // }\r\n    if (stlpec === \"amountRecovered\") {\r\n        data.sort(compareNum)\r\n        function compareNum(b, a) {\r\n            const A = a.amount.recovered\r\n            const B = b.amount.recovered\r\n            if (!sorting) {\r\n                if (A > B) {\r\n                    return 1\r\n                } else if (A < B) {\r\n                    return -1\r\n                } else return 0;\r\n            }\r\n            else {\r\n                if (B > A) {\r\n                    return 1\r\n                } else if (B < A) {\r\n                    return -1\r\n                } else return 0;\r\n            }\r\n        }\r\n    }\r\n    // else if (stlpec === \"amountDelta\") {\r\n    //     data.sort(compareNum)\r\n    //     function compareNum(b, a) {\r\n    //         const A = a.amount.infected_delta\r\n    //         const B = b.amount.infected_delta\r\n    //         if (sorting) {\r\n    //             if (A > B) {\r\n    //                 return 1\r\n    //             } else if (A < B) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //         else {\r\n    //             if (B > A) {\r\n    //                 return 1\r\n    //             } else if (B < A) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //     }\r\n    // }\r\n    // else {\r\n    //     data.sort(compareNum)\r\n    //     function compareNum(a, b) {\r\n    //         const A = a.amount.infected\r\n    //         const B = b.amount.infected\r\n    //         if (sorting) {\r\n    //             if (A > B) {\r\n    //                 return 1\r\n    //             } else if (A < B) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //         else {\r\n    //             if (B > A) {\r\n    //                 return 1\r\n    //             } else if (B < A) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //     }\r\n    // }\r\n    else {\r\n        if (JSON.parse(localStorage.getItem(\"zoradenieLocalStorage\")) === \"amountDelta\") {\r\n            data.sort(compareNum)\r\n            function compareNum(a, b) {\r\n                const A = a.amount.infected_delta\r\n                const B = b.amount.infected_delta\r\n                if (!sorting) {\r\n                    if (A > B) {\r\n                        return 1\r\n                    } else if (A < B) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n                else {\r\n                    if (B > A) {\r\n                        return 1\r\n                    } else if (B < A) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n            }\r\n        }\r\n        else if (JSON.parse(localStorage.getItem(\"zoradenieLocalStorage\")) === \"amountInfected\") {\r\n            data.sort(compareNum)\r\n            function compareNum(a, b) {\r\n                const A = a.amount.infected\r\n                const B = b.amount.infected\r\n                if (!sorting) {\r\n                    if (A > B) {\r\n                        return 1\r\n                    } else if (A < B) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n                else {\r\n                    if (B > A) {\r\n                        return 1\r\n                    } else if (B < A) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        else {\r\n            data.sort(compareNum)\r\n            function compareNum(a, b) {\r\n                const A = a.amount.infected\r\n                const B = b.amount.infected\r\n                if (!sorting) {\r\n                    if (A > B) {\r\n                        return 1\r\n                    } else if (A < B) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n                else {\r\n                    if (B > A) {\r\n                        return 1\r\n                    } else if (B < A) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n}\r\n\r\nexport default CompareCislo ","\r\nfunction HandleSortObce(stlpec, CompareCislo, data, sorting, setStylesArrows, setSorting) {\r\n    const LOCAL_STORAGE_KEY = 'zoradenieLocalStorage'\r\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(stlpec))\r\n\r\n    if (stlpec === \"amountInfected\") {\r\n        CompareCislo(data, sorting.desc, \"amountInfected\")\r\n        if (sorting.desc)\r\n            setStylesArrows({\r\n                sipkaNakazeni: {\r\n                    transform: 'rotate(0deg)'\r\n                },\r\n                sipkaPoslednyden: {\r\n                    display: 'none',\r\n                }\r\n            })\r\n        else\r\n            setStylesArrows({\r\n                sipkaNakazeni: {\r\n                    transform: 'rotate(180deg)'\r\n                },\r\n                sipkaPoslednyden: {\r\n                    display: 'none',\r\n                }\r\n            })\r\n    }\r\n    if (stlpec === \"amountDelta\") {\r\n        CompareCislo(data, !sorting.desc, \"amountDelta\")\r\n        if (!sorting.desc)\r\n            setStylesArrows({\r\n                sipkaNakazeni: {\r\n                    display: 'none'\r\n                },\r\n                sipkaPoslednyden: {\r\n                    transform: 'rotate(0deg)',\r\n                }\r\n            })\r\n        else\r\n            setStylesArrows({\r\n                sipkaNakazeni: {\r\n                    display: 'none'\r\n                },\r\n                sipkaPoslednyden: {\r\n                    transform: 'rotate(180deg)',\r\n                }\r\n            })\r\n    }\r\n    setSorting({\r\n        desc: !sorting.desc\r\n    })\r\n}\r\n\r\nexport default HandleSortObce\r\n","import React from 'react'\r\nimport { IoMdStarOutline } from 'react-icons/io'\r\nimport { IoMdStar } from 'react-icons/io'\r\n\r\nfunction ActualTabulka({ data, onlyStars, rerender, setRerender }) {\r\n    const LOCAL_STORAGE_KEY_OBCE = 'obceSave'\r\n    function GimmeStar(obec) {\r\n        const local = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY_OBCE))\r\n        if (local && local.includes(obec))\r\n            return <IoMdStar className=\"star\" />\r\n        else\r\n            return <IoMdStarOutline className=\"star\" />\r\n    }\r\n\r\n    function SaveObecStar(obec) {\r\n        let dataObce = []\r\n        if (!localStorage.getItem(LOCAL_STORAGE_KEY_OBCE)) {\r\n            localStorage.setItem(LOCAL_STORAGE_KEY_OBCE, JSON.stringify([obec]))\r\n        }\r\n        else {\r\n\r\n            dataObce = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY_OBCE))\r\n            if (dataObce.includes(obec))\r\n                dataObce = dataObce.filter(item => item !== obec)\r\n            else\r\n                dataObce.push(obec)\r\n            localStorage.setItem(LOCAL_STORAGE_KEY_OBCE, JSON.stringify(dataObce))\r\n        }\r\n        setRerender(!rerender)\r\n    }\r\n\r\n\r\n\r\n    if (onlyStars)\r\n        return (\r\n            data.map((jednaObec, index) =>\r\n                localStorage.getItem(LOCAL_STORAGE_KEY_OBCE) && JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY_OBCE)).includes(jednaObec.title) ?\r\n                    <tr key={index} >\r\n                        <td onClick={() => SaveObecStar(jednaObec.title)}>\r\n                            {GimmeStar(jednaObec.title)}\r\n                            {jednaObec.title === \"Bratislava I\" ? \"Bratislava\" :\r\n                                jednaObec.title === \"Košice I\" ? \"Košice\" : jednaObec.title}</td>\r\n                        <td>{jednaObec.amount.infected}</td>\r\n                        <td style={{ color: 'red' }}>\r\n                            {jednaObec.amount.infected_delta > 0 ?\r\n                                \"+\" + jednaObec.amount.infected_delta\r\n                                : null}\r\n                        </td>\r\n                    </tr>\r\n                    : null\r\n            )\r\n        )\r\n\r\n    else return (\r\n        data.map((jednaObec, index) =>\r\n            jednaObec.title === \"Bratislava II\"\r\n                || jednaObec.title === \"Bratislava III\"\r\n                || jednaObec.title === \"Bratislava IV\"\r\n                || jednaObec.title === \"Bratislava V\"\r\n                || jednaObec.title === \"Košice II\"\r\n                || jednaObec.title === \"Košice III\"\r\n                || jednaObec.title === \"Košice IV\" ? null\r\n                :\r\n                <tr key={index}>\r\n                    <td onClick={() => SaveObecStar(jednaObec.title)}>\r\n                        {GimmeStar(jednaObec.title)}\r\n                        {jednaObec.title === \"Bratislava I\" ? \"Bratislava\" :\r\n                            jednaObec.title === \"Košice I\" ? \"Košice\" : jednaObec.title}</td>\r\n                    <td>{jednaObec.amount.infected}</td>\r\n                    <td style={{ color: 'red' }}>\r\n                        {jednaObec.amount.infected_delta > 0 ?\r\n                            \"+\" + jednaObec.amount.infected_delta\r\n                            : null}\r\n                    </td>\r\n                </tr>\r\n        ))\r\n}\r\n\r\nexport default ActualTabulka\r\n","import React, { useState, useEffect } from 'react'\r\nimport './css/tabulkaMesta.scss'\r\nimport CompareCislo from './CompareCislo'\r\nimport { IoIosArrowDown } from 'react-icons/io';\r\nimport { FaSortAmountDown } from 'react-icons/fa'\r\nimport { IoMdStarOutline } from 'react-icons/io'\r\nimport { IoMdStar } from 'react-icons/io'\r\nimport ZmeniTextTabulkaMesta from './components/ZmenitTextTabulkaMesta'\r\nimport HandleSortObce from './components/HandleSortObce'\r\nimport ActualTabulka from './components/ActualTabulka';\r\nconst LOCAL_STORAGE_KEY = 'zoradenieLocalStorage'\r\nconst LOCAL_STORAGE_KEY_STAR = 'starsTabulkaMesta'\r\n\r\nfunction TabulkaMesta(props) {\r\n    const data = props.tabulkaData\r\n    const [sorting, setSorting] = useState({\r\n        desc: true,\r\n    })\r\n    const [styleArrows, setStylesArrows] = useState({\r\n        sipkaNakazeni: {\r\n            transform: 'rotate(0deg)'\r\n        },\r\n        sipkaPoslednyden: {\r\n            display: 'none',\r\n        }\r\n    })\r\n    // const [textPreZobrazenieObci, setTextPreZobrazenieObci] = useState({\r\n    //     boolean: true,\r\n    //     text: \"Zobraziť údaje o jednotlivých obciach\"\r\n    // })\r\n\r\n\r\n    const [rerender, setRerender] = useState(true)\r\n    const [onlyStars, setOnlyStars] = useState(false)\r\n\r\n\r\n    useEffect(() => {\r\n        CompareCislo(data, true, JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY)))\r\n        if (JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY)) === \"amountDelta\")\r\n            setStylesArrows({\r\n                sipkaNakazeni: {\r\n                    display: 'none'\r\n                },\r\n                sipkaPoslednyden: {\r\n                    transform: 'rotate(0deg)',\r\n                }\r\n            })\r\n        if (JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY_STAR)))\r\n            setOnlyStars(true)\r\n    }, [data])\r\n\r\n    function searchInputMesta() {\r\n        var input, filter, table, tr, td, i, txtValue;\r\n        input = document.getElementById(\"myInput\");\r\n        filter = input.value.toUpperCase();\r\n        table = document.getElementById(\"myTable\");\r\n        tr = table.getElementsByTagName(\"tr\");\r\n        for (i = 0; i < tr.length; i++) {\r\n            td = tr[i].getElementsByTagName(\"td\")[0];\r\n            if (td) {\r\n                txtValue = td.textContent || td.innerText;\r\n                if (txtValue.toUpperCase().indexOf(filter) > -1) {\r\n                    tr[i].style.display = \"\";\r\n                } else {\r\n                    tr[i].style.display = \"none\";\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function ShowOnlyStars() {\r\n        if (onlyStars)\r\n            return <IoMdStar className=\"star\" />\r\n        else\r\n            return <IoMdStarOutline className=\"star\" />\r\n    }\r\n\r\n    function SetingStarsAndLocalStorage() {\r\n        setOnlyStars(!onlyStars)\r\n        localStorage.setItem(LOCAL_STORAGE_KEY_STAR, !onlyStars)\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"textPreZObrazenieTabulky\" onClick={() => ZmeniTextTabulkaMesta()}>\r\n                <IoIosArrowDown className=\"sipkaScrollMesta\" />\r\n            </div>\r\n\r\n            <div className=\"tabulkaOkrajDivMain\" >\r\n                <input type=\"text\" id=\"myInput\" onKeyUp={searchInputMesta} placeholder=\"Hľadať..\" className=\"inputSearch\" />\r\n                <div className=\"tabulkaMesta\" >\r\n\r\n                    <table id=\"myTable\">\r\n                        <thead>\r\n                            <tr >\r\n                                <th onClick={() => SetingStarsAndLocalStorage()}>Obec {ShowOnlyStars()}</th>\r\n                                <th onClick={() => HandleSortObce('amountInfected', CompareCislo, data, sorting, setStylesArrows, setSorting)} >\r\n                                    Počet nakazených <FaSortAmountDown className=\"sipkaNakazeni\" style={styleArrows.sipkaNakazeni} />\r\n                                </th>\r\n                                <th onClick={() => HandleSortObce('amountDelta', CompareCislo, data, sorting, setStylesArrows, setSorting)} >\r\n                                    Za posledný deň <FaSortAmountDown className=\"sipkaPoslednyden\" style={styleArrows.sipkaPoslednyden} />\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <ActualTabulka data={data} onlyStars={onlyStars} rerender={rerender} setRerender={setRerender} />\r\n                        </tbody>\r\n                    </table>\r\n\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TabulkaMesta\r\n","export default function ZmenitTextTabulkaMesta() {\r\n    var element = document.querySelector(\".sipkaScrollMesta\")\r\n    element.classList.toggle(\"rotateArrow\");\r\n\r\n    var element2 = document.querySelector(\".tabulkaOkrajDivMain\")\r\n    element2.classList.toggle(\"changeHeight\");\r\n\r\n    var element3 = document.querySelector(\".textPreZObrazenieTabulky\")\r\n    element3.classList.toggle(\"changeText\");\r\n    // if (textPreZobrazenieObci.boolean) {\r\n    //     setTextPreZobrazenieObci({\r\n    //         boolean: !textPreZobrazenieObci.boolean,\r\n    //         text: \"Schovať údaje o jednotlivých obciach\"\r\n    //     })\r\n    // }\r\n    // else {\r\n    //     setTextPreZobrazenieObci({\r\n    //         boolean: !textPreZobrazenieObci.boolean,\r\n    //         text: \"Zobraziť údaje o jednotlivých obciach\"\r\n    //     })\r\n    // }\r\n}\r\n\r\n","import React from 'react'\r\nimport FormatNumber from './FormatNumber'\r\n// import '../css/dataSlovakia.scss'\r\nimport { GiDeathSkull } from \"react-icons/gi\";\r\nimport { FaPlusCircle } from \"react-icons/fa\";\r\nimport { RiVirusLine } from \"react-icons/ri\";\r\nimport TabulkaMesta from '../TabulkaMesta';\r\n\r\nfunction HandleDataSvk({ mainData }) {\r\n\r\n    function GetLastData(prop) {\r\n        // if (prop === \"tests\") {\r\n        //     let a = mainData[0].tested_chart[Object.keys(mainData[0].tested_chart).length - 1].tested\r\n        //     let b = mainData[0].tested_chart[Object.keys(mainData[0].tested_chart).length - 1].infected\r\n        //     // if ((a - b) > 0)\r\n        //     return <>Počet negatívnych testov <span className=\"negatTested\">{a - b}</span></>\r\n        // }\r\n         if (prop === \"recovered\") {\r\n            let a = mainData[0].chart[Object.keys(mainData[0].tested_chart).length].recovered\r\n            let b = mainData[0].chart[Object.keys(mainData[0].tested_chart).length - 1].recovered\r\n            // if ((a - b) > 0)\r\n            // return <>Počet nových vyliečených <span className=\"newRecovered\">+{a - b}</span></>\r\n            return a - b\r\n        }\r\n        else if (prop === \"deaths\") {\r\n            let a = mainData[0].chart[Object.keys(mainData[0].tested_chart).length].deaths\r\n            let b = mainData[0].chart[Object.keys(mainData[0].tested_chart).length - 1].deaths\r\n            if ((a - b) > 0)\r\n                return a - b\r\n        }\r\n        else if (prop===\"recovered2\"){\r\n            let a = mainData[0].chart[Object.keys(mainData[0].tested_chart).length].recovered\r\n            let b = mainData[0].chart[Object.keys(mainData[0].tested_chart).length - 1].recovered\r\n            // if ((a - b) > 0)\r\n            return a - b\r\n        }\r\n\r\n    }\r\n\r\n    // function GetTodayDeaths() {\r\n    //     let a = mainData[0].chart[Object.keys(mainData[0].tested_chart).length].deaths\r\n    //     let b = mainData[0].chart[Object.keys(mainData[0].tested_chart).length - 1].deaths\r\n    //     // return \"Počet nových úmrtí: \" + <span>c</span>\r\n    //     // return \"Počet nových úmrtí: \" && <div>c</div>\r\n    //     if ((a - b) > 0)\r\n    //         return (\r\n    //             <>Počet nových úmrtí: <span>{a - b}</span></>\r\n    //         )\r\n    // }\r\n    // a = mainData[0].chart[Object.keys(mainData[0].tested_chart).length].deaths\r\n    // b = mainData[0].chart[Object.keys(mainData[0].tested_chart).length - 1].deaths\r\n    // c = a - b\r\n    // let newDeaths = 0\r\n    // if (c > 0) {\r\n    //     newDeaths = a - b\r\n    // }\r\n\r\n\r\n    const GetTheDay = () => {\r\n        const lastDay = mainData[0].tested_chart[Object.keys(mainData[0].tested_chart).length - 1].day\r\n        if (lastDay === \"Pondelok\")\r\n            return \"pondelok\"\r\n        else if (lastDay === \"Utorok\")\r\n            return \"utorok\"\r\n        else if (lastDay === \"Streda\")\r\n            return \"stredu\"\r\n        else if (lastDay === \"Štvrtok\")\r\n            return \"štvrtok\"\r\n        else if (lastDay === \"Piatok\")\r\n            return \"piatok\"\r\n        else if (lastDay === \"Sobota\")\r\n            return \"sobotu\"\r\n        else return \"nedeľu\"\r\n\r\n    }\r\n\r\n    function numberTrans3(a, b) {\r\n        if (a) {\r\n            let output = b / (a / 100)\r\n            output = b / (a / 100)\r\n            output = output.toFixed(3)\r\n            output = output.toString()\r\n            output = output.replace(\".\", \",\")\r\n            return (\r\n                <div className=\"aktiveNakazenych\">\r\n                    V percentách: <span>{output}%</span>\r\n                </div >\r\n            )\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"cardsDivNew\">\r\n                <div className=\"cardsNew\">\r\n                    <div className=\"iconInCard cases\">\r\n                        <RiVirusLine />\r\n                    </div>\r\n                    <div className=\"upperText\">Počet nakazených\r\n                    \r\n                    </div>\r\n                    <div className=\"mainText cases\">\r\n                        <FormatNumber prop={mainData[0].cases} />\r\n                        <span className=\"plusInfected\">+{mainData[0].tested_chart[Object.keys(mainData[0].tested_chart).length - 1].infected}</span>\r\n                    </div>\r\n                    <div className=\"underText\">\r\n                        Počet aktívnych prípadov:    <span><FormatNumber prop={mainData[0].active} /></span><br />\r\n                    Počet testov:    <span><FormatNumber prop={mainData[0].tests} /></span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"cardsNew\">\r\n                    <div className=\"iconInCard recovered\">\r\n                        <FaPlusCircle />\r\n                    </div>\r\n                    <div className=\"upperText\">Počet vyliečených</div>\r\n                    <div className=\"mainText recovered\">\r\n                        <FormatNumber prop={mainData[0].recovered} />\r\n                        <span className=\"plusRecovered\">+{GetLastData(\"recovered2\")}</span>\r\n\r\n                    </div>\r\n                    <div className=\"underText\">\r\n                        {numberTrans3(mainData[0].cases, mainData[0].recovered)}\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <div className=\"cardsNew\">\r\n                    <div className=\"iconInCard deaths\">\r\n                        <GiDeathSkull />\r\n                    </div>\r\n                    <div className=\"upperText\">Počet úmrtí</div>\r\n                    <div className=\"mainText deaths\">\r\n                        <FormatNumber prop={mainData[0].deaths} />\r\n                        {\r\n                            GetLastData(\"deaths\") > 0 ?\r\n                                <span className=\"plusDeaths\">+<FormatNumber prop={GetLastData(\"deaths\")} /></span>\r\n                            : null\r\n                        }\r\n                    {/* <span className=\"plusDeaths\">+{GetLastData(\"deaths\")}</span> */}\r\n\r\n                    </div>\r\n                    <div className=\"underText\">\r\n                        {numberTrans3(mainData[0].cases, mainData[0].deaths)}\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n            <div className=\"dataFromYesterday\">\r\n                <h1>Údaje za {GetTheDay()}</h1>\r\n                <div className=\"wrapperForGrid\">\r\n                    <div>\r\n                        <h6>Počet  nakazených</h6>\r\n                        <span className=\"newCases\">+{mainData[0].tested_chart[Object.keys(mainData[0].tested_chart).length - 1].infected}</span>\r\n                    </div>\r\n                    <div>\r\n                        <h6>Počet  vyliečených </h6>\r\n                        <span className=\"newRecovered\">+{GetLastData(\"recovered\")}</span> \r\n                    </div>\r\n                    <div>\r\n                        <h6>Počet testovaných</h6>\r\n                        <span className=\"newTested\">+{mainData[0].tested_chart[Object.keys(mainData[0].tested_chart).length - 1].tested}</span> \r\n                    </div>\r\n                </div>\r\n                    <TabulkaMesta tabulkaData={mainData[0].districts} />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default HandleDataSvk\r\n","function FuncSetDataForGraph(setDataForChart, datumy, dailyCases, valueActiveCases, valuesCases, valueDeaths, valueRecovered, valueTest, booleanProp) {\r\n    setDataForChart({\r\n        nacitatViacUdajov: booleanProp,\r\n        datumy: datumy,\r\n\r\n        dataSetsCases: {\r\n            datasets: [\r\n                {\r\n                    label: \"Celkový počet nakazených\",\r\n                    data: valuesCases,\r\n                    backgroundColor: \"rgb(249, 70, 68)\",\r\n                    fillColor: 'black',\r\n                    hoverBackgroundColor: 'red',\r\n                }\r\n            ]\r\n        },\r\n\r\n        dataSetsDeaths: {\r\n            datasets: [\r\n                {\r\n                    label: \"Celkový počet úmrtí\",\r\n                    data: valueDeaths,\r\n                    backgroundColor: \"grey\",\r\n                    hoverBackgroundColor: 'grey',\r\n                }\r\n            ]\r\n        },\r\n\r\n        dataSetsRecovered: {\r\n            datasets: [\r\n                {\r\n                    label: \"Celkový počet vyliečených\",\r\n                    data: valueRecovered,\r\n                    backgroundColor: \"green\",\r\n                    hoverBackgroundColor: 'green',\r\n                }\r\n            ]\r\n        },\r\n\r\n        dataSetsActiveCases: {\r\n            datasets: [\r\n                {\r\n                    label: \"Celkový počet aktivnych prípadov\",\r\n                    data: valueActiveCases,\r\n                    backgroundColor: \"#cb464a\",\r\n                    hoverBackgroundColor: '#b42429',\r\n                }\r\n            ]\r\n        },\r\n\r\n        dataSetsDailyCases: {\r\n            datasets: [\r\n                {\r\n                    label: \"Denný prírastok nakazených\",\r\n                    data: dailyCases,\r\n                    backgroundColor: \"salmon\",\r\n                    hoverBackgroundColor: '#f96353',\r\n                }\r\n            ]\r\n        },\r\n\r\n        dataSetsDailyTests: {\r\n            datasets: [\r\n                {\r\n                    label: \"Denný prírastok testov\",\r\n                    data: valueTest,\r\n                    backgroundColor: \"cyan\",\r\n                    hoverBackgroundColor: 'cyan',\r\n                }\r\n            ]\r\n        },\r\n    })\r\n}\r\n\r\nexport default FuncSetDataForGraph\r\n","import React, { useState, useEffect } from 'react'\r\nimport './css/covid.css'\r\n// import TabulkaMesta from \"./TabulkaMesta\"\r\nimport BarGrafSvk from './BarGrafSvk';\r\nimport HandleDataSvk from './components/HandleDataSvk';\r\nimport FuncSetDataForGraph from './components/FuncSetDataForGraph';\r\n// import DataWorld from './components/DataWorld';\r\nimport { FiBarChart } from 'react-icons/fi'\r\nimport { BiBarChart } from 'react-icons/bi'\r\nimport LoadingAnimation from './components/LoadingAnimation';\r\nfunction CovidSK() {\r\n    const [dataSvk, setDataSvk] = useState()\r\n    const svk = 'https://mapa.covid.chat/map_data'\r\n    const [dataForChart, setDataForChart] = useState()\r\n    const [mainData, setMainData] = useState()\r\n\r\n    const [loadMoreData, setLoadMoreData] = useState({\r\n        text: 'Zobraziť viac dní',\r\n        bool: false\r\n    })\r\n\r\n    useEffect(() => {\r\n        const LoadDataBegin = async () => {\r\n            const response = await fetch(svk)\r\n            const data = await response.json()\r\n            setMainData([{\r\n                active: data.active,\r\n                cases: data.infected,\r\n                deaths: data.deaths,\r\n                recovered: data.recovered,\r\n                tests: data.tested,\r\n                tested_chart: data.tested_chart,\r\n                chart: data.chart,\r\n                districts: data.districts\r\n            }])\r\n            let datumy = data.chart.map((item, id) => {\r\n                let output = item.date.replace(\"-\", \". \")\r\n                output = output.replace(\"-\", \". \")\r\n                return output\r\n            })\r\n            let dailyCases = data.chart.map((item, id) => {\r\n                return item.infected_daily\r\n            })\r\n\r\n            let valueActiveCases = data.chart.map((item, id) => {\r\n                return item.active\r\n            })\r\n\r\n            let valuesCases = data.chart.map((item) => {\r\n                return item.infected\r\n            })\r\n\r\n            let valueDeaths = data.chart.map((item) => {\r\n                return item.deaths\r\n            })\r\n\r\n            let valueRecovered = data.chart.map((item) => {\r\n                return item.recovered\r\n            })\r\n\r\n            let valueTest = data.chart.map((item) => {\r\n                return item.tested_daily\r\n            })\r\n\r\n            valueTest = valueTest.slice(datumy.length - 32, datumy.length)\r\n            valuesCases = valuesCases.slice(datumy.length - 32, datumy.length)\r\n            valueDeaths = valueDeaths.slice(datumy.length - 32, datumy.length)\r\n            valueRecovered = valueRecovered.slice(datumy.length - 32, datumy.length)\r\n            valueActiveCases = valueActiveCases.slice(datumy.length - 32, datumy.length)\r\n            dailyCases = dailyCases.slice(datumy.length - 32, datumy.length)\r\n            datumy = datumy.slice(datumy.length - 32, datumy.length)\r\n\r\n            if (!dataSvk)\r\n                setDataSvk([data])\r\n\r\n            FuncSetDataForGraph(setDataForChart, datumy, dailyCases, valueActiveCases, valuesCases, valueDeaths, valueRecovered, valueTest, false)\r\n        }\r\n        LoadDataBegin()\r\n    }, [])\r\n\r\n\r\n    const LoadDataOnChange = (booleanProp) => {\r\n\r\n        let datumy = dataSvk[0].chart.map((item, id) => {\r\n            let output = item.date.replace(\"-\", \". \")\r\n            output = output.replace(\"-\", \". \")\r\n            return output\r\n        })\r\n        let dailyCases = dataSvk[0].chart.map((item) => {\r\n            return item.infected_daily\r\n        })\r\n\r\n        let valueActiveCases = dataSvk[0].chart.map((item) => {\r\n            return item.active\r\n        })\r\n\r\n        let valuesCases = dataSvk[0].chart.map((item) => {\r\n            return item.infected\r\n        })\r\n\r\n        let valueDeaths = dataSvk[0].chart.map((item) => {\r\n            return item.deaths\r\n        })\r\n\r\n        let valueRecovered = dataSvk[0].chart.map((item) => {\r\n            return item.recovered\r\n        })\r\n\r\n        let valueTest = dataSvk[0].chart.map((item) => {\r\n            return item.tested_daily\r\n        })\r\n\r\n        if (!booleanProp) {\r\n            dailyCases = dailyCases.slice(datumy.length - 32, datumy.length)\r\n            valueActiveCases = valueActiveCases.slice(datumy.length - 32, datumy.length)\r\n            valuesCases = valuesCases.slice(datumy.length - 32, datumy.length)\r\n            valueDeaths = valueDeaths.slice(datumy.length - 32, datumy.length)\r\n            valueRecovered = valueRecovered.slice(datumy.length - 32, datumy.length)\r\n            valueTest = valueTest.slice(datumy.length - 32, datumy.length)\r\n            datumy = datumy.slice(datumy.length - 32, datumy.length)\r\n        }\r\n\r\n        FuncSetDataForGraph(setDataForChart, datumy, dailyCases, valueActiveCases, valuesCases, valueDeaths, valueRecovered, valueTest, booleanProp)\r\n\r\n    }\r\n\r\n    // const negatTestyMoje = [83, 102, 50, 42, 120, 129, 118, 197, 228]\r\n\r\n    const ZmenitLoadMoreData = () => {\r\n        if (loadMoreData.bool === false) {\r\n            setLoadMoreData({\r\n                text: 'Zobraziť menej dní',\r\n                bool: !loadMoreData.bool\r\n            })\r\n\r\n        }\r\n        else {\r\n            setLoadMoreData({\r\n                text: 'Zobraziť viac dní',\r\n                bool: !loadMoreData.bool\r\n            })\r\n        }\r\n        LoadDataOnChange(!loadMoreData.bool)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"covidApp\">\r\n            {mainData ?\r\n                <>\r\n                    <HandleDataSvk mainData={mainData} />\r\n\r\n                    {/* <div className=\"NacitatViacDniDoGrafov\" onClick={() => ZmenitLoadMoreData()}>\r\n                        {loadMoreData.bool ? <FiBarChart className=\"chartIcon\" />\r\n                            : <BiBarChart className=\"chartIcon\" />\r\n                        }\r\n                        {loadMoreData.text}\r\n                    </div> */}\r\n\r\n                    {dataForChart &&\r\n                        <div >\r\n                            {/* <BarGrafSvk props={dataForChart} ZmenitLoadMoreData={ZmenitLoadMoreData} loadMoreData={loadMoreData} /> */}\r\n                            <BarGrafSvk props={dataForChart} ZmenitLoadMoreData={ZmenitLoadMoreData} loadMoreData={loadMoreData} />\r\n                        </div>\r\n                    }\r\n\r\n                    {/* <br></br><br></br><br></br><br></br> */}\r\n                </>\r\n                : <LoadingAnimation />}\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default CovidSK\r\n","import React from 'react'\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { Chart } from 'react-chartjs-2';\r\nimport './css/cssPreBarGrafy.css'\r\nimport FormatNumberShorter from './components/FormatNumberShorter'\r\n\r\nfunction BarGraf({ props }) {\r\n    const allData = {\r\n        dataSetsCases: {\r\n            labels: props.datumy,\r\n            datasets: [{\r\n                label: 'Počet mŕtvych',\r\n                backgroundColor: \"grey\",\r\n                data: props.dataSetsDeaths.datasets[0].data,\r\n            },\r\n            {\r\n                label: 'Počet vyliečených',\r\n                backgroundColor: \"#57C757\",\r\n                data: props.dataSetsRecovered.datasets[0].data,\r\n            },\r\n            {\r\n                label: 'Počet nakazených',\r\n                backgroundColor: \"#FF4D4D\",\r\n                data: props.dataSetsCases.datasets[0].data,\r\n            }],\r\n        },\r\n\r\n        // dataSetsDeaths: {\r\n        //     labels: props.datumy,\r\n        //     datasets: props.dataSetsDeaths.datasets\r\n        // },\r\n\r\n\r\n        // dataSetsRecovered: {\r\n        //     labels: props.datumy,\r\n        //     datasets: props.dataSetsRecovered.datasets\r\n        // },\r\n\r\n        dataSetsActiveCases: {\r\n            labels: props.datumy,\r\n            datasets: props.dataSetsActiveCases.datasets\r\n        },\r\n\r\n        dataSetsDailyCases: {\r\n            labels: props.datumy.slice(-(props.datumy.length - 1)),\r\n            datasets: props.dataSetsDailyCases.datasets\r\n        },\r\n\r\n        options: {\r\n            maintainAspectRatio: false,\r\n            responsive: true,\r\n\r\n            legend: {\r\n                position: \"bottom\",\r\n                labels: {\r\n                    padding: 25,\r\n                },\r\n                onClick: function (e, legendItem) {\r\n                    const defaultLegendClickHandler = () => { return Chart.defaults }\r\n                    defaultLegendClickHandler(e, legendItem);\r\n                    // return \r\n                    var index = legendItem.datasetIndex;\r\n                    var ci = this.chart;\r\n                    var meta = ci.getDatasetMeta(index);\r\n                    // See controller.isDatasetVisible comment\r\n                    meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null;\r\n\r\n                    // We hid a dataset ... rerender the chart\r\n                    ci.update();\r\n\r\n                }\r\n            },\r\n            scales: {\r\n                xAxes: [{\r\n                    stacked: true,\r\n                    gridLines: {\r\n                        display: false,\r\n                    }\r\n                }],\r\n                yAxes: [{\r\n                    stacked: true,\r\n                    ticks: {\r\n                        callback: function (value) {\r\n                            return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \")\r\n                        }\r\n                    }\r\n                }]\r\n            },\r\n            tooltips: {\r\n                // mode: 'x',\r\n                mode: 'index',\r\n                position: 'nearest',\r\n                intersect: false,\r\n                callbacks: {\r\n                    label: function (tooltipItem, chart) {\r\n                        var datasetLabel = chart.datasets[tooltipItem.datasetIndex].label || '';\r\n\r\n                        return datasetLabel + \": \" + tooltipItem.yLabel.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \")\r\n                    }\r\n                },\r\n            },\r\n            animation: {\r\n                duration: 500,\r\n                onProgress: function () {\r\n                    // console.log(props.nacitatViacUdajov)\r\n                    if (props.nacitatViacUdajov === false) {\r\n                        var chartInstance = this.chart,\r\n                            ctx = chartInstance.ctx;\r\n                        ctx.textAlign = 'center';\r\n                        ctx.fillStyle = \"rgba(0, 0, 0, .75)\";\r\n                        ctx.textBaseline = 'bottom';\r\n                        if (window.innerWidth > 1220) {\r\n                            ctx.font = \"bold 12px Arial\";\r\n                        }\r\n                        else if (window.innerWidth > 720) {\r\n                            ctx.font = \"bold 11px Arial\";\r\n                        }\r\n                        else {\r\n                            ctx.font = \"bold 6px Arial\";\r\n                        }\r\n                        this.data.datasets.forEach(function (dataset, i) {\r\n                            var meta = chartInstance.controller.getDatasetMeta(i);\r\n                            meta.data.forEach(function (bar, index) {\r\n                                var data = dataset.data[index];\r\n                                if (index % 2 === 0) {\r\n                                    if (dataset.data._chartjs.listeners[0].chart.legend.legendItems[0].hidden === true\r\n                                        || dataset.data._chartjs.listeners[0].chart.legend.legendItems[0].hidden === false) {\r\n\r\n                                        if (dataset.data._chartjs.listeners[0].chart.legend.legendItems[0].text === \"Počet mŕtvych\") { //overenie pre posledny graf (tri udaje v objekte)\r\n                                            let pom1 = []\r\n                                            dataset.data._chartjs.listeners[0].chart.legend.legendItems.map((jedno, id) => {\r\n                                                pom1[id] = jedno.hidden\r\n                                                return pom1\r\n                                            })\r\n                                            if (bar._model.datasetLabel === \"Počet mŕtvych\" && pom1[0] === false)\r\n                                                ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n                                            else if (bar._model.datasetLabel === \"Počet vyliečených\" && pom1[1] === false)\r\n                                                ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n                                            else if (bar._model.datasetLabel === \"Počet nakazených\" && pom1[2] === false)\r\n                                                ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n\r\n                                        }\r\n                                        else\r\n                                            ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    if (data < 100) {\r\n                                        if (dataset.data._chartjs.listeners[0].chart.legend.legendItems[0].hidden === true\r\n                                            || dataset.data._chartjs.listeners[0].chart.legend.legendItems[0].hidden === false) {\r\n\r\n                                            if (dataset.data._chartjs.listeners[0].chart.legend.legendItems[0].text === \"Počet mŕtvych\") { //overenie pre posledny graf (tri udaje v objekte)\r\n                                                let pom1 = []\r\n                                                dataset.data._chartjs.listeners[0].chart.legend.legendItems.map((jedno, id) => {\r\n                                                    pom1[id] = jedno.hidden\r\n                                                    return pom1\r\n                                                })\r\n                                                if (bar._model.datasetLabel === \"Počet mŕtvych\" && pom1[0] === false)\r\n                                                    ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n                                                else if (bar._model.datasetLabel === \"Počet vyliečených\" && pom1[1] === false)\r\n                                                    ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n                                                else if (bar._model.datasetLabel === \"Počet nakazených\" && pom1[2] === false)\r\n                                                    ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n\r\n                                            }\r\n                                            else\r\n                                                ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            })\r\n                        })\r\n                    }\r\n                }\r\n            },\r\n        },\r\n    }\r\n\r\n    return (\r\n        <div className=\"mainDivPreGrafy\" >\r\n\r\n\r\n            <div className=\"barsGrafy\" >\r\n                <h1>Denný prírastok nakazených</h1>\r\n                <Bar\r\n                    data={allData.dataSetsDailyCases}\r\n                    options={allData.options}\r\n                />\r\n            </div>\r\n\r\n            <div className=\"barsGrafy\" >\r\n                <h1>Celkový počet aktívnych prípadov</h1>\r\n                <Bar\r\n                    data={allData.dataSetsActiveCases}\r\n                    options={allData.options}\r\n                />\r\n            </div>\r\n\r\n            <div className=\"barsGrafy\"  >\r\n                <h1>Celkový prírastok nakazených/vyliečených</h1>\r\n                <Bar\r\n                    data={allData.dataSetsCases}\r\n                    options={allData.options}\r\n                />\r\n            </div>\r\n\r\n            {/* <div className=\"barsGrafy\" >\r\n                    <h1>Celkový počet vyliečených</h1>\r\n                    <Bar\r\n                        data={allData.dataSetsRecovered}\r\n                        options={allData.options}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"barsGrafy\" >\r\n                    <h1>Celkový počet úmrtí</h1>\r\n                    <Bar\r\n                        data={allData.dataSetsDeaths}\r\n                        options={allData.options}\r\n                    />\r\n                </div> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BarGraf\r\n","import React from 'react'\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport './css/csspreSvk.css'\r\nfunction DougnatChart(props) {\r\n    // console.log(props.dataForGraph[props.dataForGraph.length - 1])\r\n    // console.log(props)\r\n    const data = {\r\n        labels: ['Nakazení', 'Vyliečení', 'Úmrtia'],\r\n        datasets: [{\r\n            label: '# of Votes',\r\n            data: [props.cases, props.recovered, props.deaths],\r\n            backgroundColor: [\r\n                '#f85959',\r\n                '#17b978',\r\n                '#430d27',\r\n            ],\r\n        }]\r\n    }\r\n\r\n\r\n    // const data = {\r\n    //     labels: props.dataForGraph.labels,\r\n    //     datasets: [{\r\n    //         label: '# of Votes',\r\n    //         data: props.dataForGraph.data,\r\n    //         backgroundColor: props.dataForGraph.backgroundColor,\r\n    //     }]\r\n    // }\r\n\r\n    // const data = {\r\n    //     labels: ['Nakazení', 'Vyliečení'],\r\n    //     datasets: [{\r\n    //         label: '# of Votes',\r\n    //         data: [10, 20],\r\n    //         backgroundColor: ['red', 'blue'],\r\n    //     }]\r\n    // }\r\n\r\n\r\n    return (\r\n        props && data ?\r\n            <div>\r\n                {/* {console.log(\"DougnatChart\")} */}\r\n                <div className=\"dougnut\">\r\n                    <Doughnut\r\n                        data={data}\r\n                        height={250}\r\n                        options={{\r\n                            maintainAspectRatio: false,\r\n                            tooltips: {\r\n                                callbacks: {\r\n                                    title: function (tooltipItem, data) {\r\n                                        return data['labels'][tooltipItem[0]['index']];\r\n                                    },\r\n                                    label: function (tooltipItem, data) {\r\n                                        var dataset = data.datasets[0]\r\n                                        // console.log(dataset.data[0])\r\n                                        let totalSpolu = dataset.data[0] + dataset.data[1] + dataset.data[2]\r\n                                        let percent = data['datasets'][0]['data'][tooltipItem['index']] / totalSpolu\r\n                                        // console.log(data['datasets'][0]['data'][tooltipItem['index']])\r\n                                        // console.log(dataset._meta[0].total)\r\n                                        // console.log(dataset.data[tooltipItem['index']])\r\n                                        // if (dataset)\r\n                                        //     var percent = Math.round((dataset.data[tooltipItem['index']] / dataset._meta[0].total) * 100)\r\n                                        return data['datasets'][0]['data'][tooltipItem['index']] + \" (\" + Math.round(percent * 100) + \"%)\";\r\n                                    },\r\n\r\n                                    // label: function (tooltipItem, data) {\r\n                                    //     var percent = Math.round((dataset.data[tooltipItem['index']] / dataset._meta[0].total) * 100)\r\n\r\n                                    //     return data['datasets'][0]['data'][tooltipItem['index']] + \" (\" + percent + \"%)\";\r\n                                    // }\r\n\r\n\r\n                                    // afterLabel: function (tooltipItem, data) {\r\n                                    //     var dataset = data['datasets'][0];\r\n                                    //     var percent = Math.round((dataset['data'][tooltipItem['index']] / dataset[\"_meta\"][0]['total']) * 100)\r\n                                    //     return '(' + percent + '%)';\r\n                                    // },\r\n                                },\r\n                            },\r\n                            centerText: {\r\n                                display: true,\r\n                                text: `90%`\r\n                            },\r\n                            animation: {\r\n                                duration: 2000,\r\n                                easing: 'easeOutQuint',\r\n                                // beforeDraw: function (chart) {\r\n                                //     var width = chart.chart.width,\r\n                                //         height = chart.chart.height,\r\n                                //         ctx = chart.chart.ctx;\r\n                                //     ctx.restore();\r\n                                //     var fontSize = (height / 160).toFixed(2);\r\n                                //     ctx.font = fontSize + \"em sans-serif\";\r\n                                //     ctx.textBaseline = \"top\";\r\n                                //     var text = \"Foo-bar\",\r\n                                //         textX = Math.round((width - ctx.measureText(text).width) / 2),\r\n                                //         textY = height / 2;\r\n                                //     ctx.fillText(text, textX, textY);\r\n                                //     ctx.save();\r\n                                // },\r\n                                // onProgress: function () {\r\n                                //     var chartInstance = this.chart,\r\n                                //         ctx = chartInstance.ctx;\r\n                                //     ctx.textAlign = 'center';\r\n                                //     ctx.fillStyle = \"rgba(0, 0, 0, .75)\";\r\n                                //     ctx.textBaseline = 'bottom';\r\n\r\n\r\n                                //     if (window.innerWidth > 1220) {\r\n                                //         ctx.font = \"bold 12px Arial\";\r\n                                //     }\r\n                                //     else if (window.innerWidth > 720) {\r\n                                //         ctx.font = \"bold 11px Arial\";\r\n                                //     }\r\n                                //     else {\r\n                                //         ctx.font = \"bold 6px Arial\";\r\n                                //     }\r\n                                //     // if (window.innerWidth > 720) {\r\n                                //     this.data.datasets.forEach(function (dataset, i) {\r\n                                //         var meta = chartInstance.controller.getDatasetMeta(i);\r\n                                //         meta.data.forEach(function (bar, index) {\r\n                                //             var data = dataset.data[index];\r\n                                //             console.log(bar._model)\r\n                                //             console.log(index)\r\n                                //             // ctx.fillText(data, bar._model.x + index * 100, bar._model.y - 4);\r\n                                //             ctx.fillText(\"o\", bar._model.x + index * 100, bar._model.y - 4);\r\n                                //             // console.log(data, bar._model.x + 0, bar._model.y - 4)\r\n                                //             // console.log(Math.abs(data) > 999 ? Math.sign(data) * ((Math.abs(data) / 1000).toFixed(1)) + 'k' : Math.sign(data) * Math.abs(data))\r\n                                //         })\r\n                                //     })\r\n                                //     // }\r\n                                // }\r\n                            }\r\n                        }\r\n                        }\r\n                    />\r\n                </div>\r\n\r\n            </div>\r\n            : null\r\n    )\r\n}\r\n\r\nexport default DougnatChart\r\n","import React, { useState, useEffect } from 'react'\r\nimport BarGraf from './BarGraf';\r\nimport DougnatChart from './DougnatChart';\r\nimport GetLastData from './components/GetLastData';\r\nimport DataWorld from './components/DataWorld';\r\nimport LoadingAnimation from './components/LoadingAnimation';\r\n\r\nconst LOCAL_STORAGE_LASTDAY = \"lastdayStorage\"\r\n\r\nfunction GrafyKrajina(props) {\r\n    // console.log(props)\r\n    const match = props.match\r\n    const [dataforChart, setDataforChart] = useState()\r\n    const [LastDayData, setLastDayData] = useState()\r\n\r\n    const [loadMoreData, setLoadMoreData] = useState({\r\n        text: 'Zobraziť viac dní',\r\n        bool: false\r\n    })\r\n\r\n    useEffect(() => {\r\n        // if (!(match.params.id === \"Svet\"))\r\n        GetLastData(props, LOCAL_STORAGE_LASTDAY, setLastDayData)\r\n    }, [props])\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            let response1, data1, datumy, valuesCases, valueRecovered, valueDeaths, dailyCases = [], valueActiveCases = []\r\n            if (match.params.id === \"Svet\") {\r\n                if (loadMoreData.bool === false)\r\n                    response1 = await fetch(`https://disease.sh/v2/historical/All`)\r\n                else\r\n                    response1 = await fetch(`https://disease.sh/v2/historical/All?lastdays=all`)\r\n                data1 = await response1.json()\r\n                datumy = Object.keys(data1.cases)\r\n                valuesCases = Object.values(data1.cases)\r\n                valueRecovered = Object.values(data1.recovered)\r\n                valueDeaths = Object.values(data1.deaths)\r\n\r\n            }\r\n            else {\r\n                if (loadMoreData.bool === false)\r\n                    response1 = await fetch(`https://disease.sh/v2/historical/${match.params.id}`)\r\n                else\r\n                    response1 = await fetch(`https://disease.sh/v2/historical/${match.params.id}/?lastdays=all`)\r\n\r\n                data1 = await response1.json()\r\n                datumy = Object.keys(data1.timeline.cases)\r\n                valuesCases = Object.values(data1.timeline.cases)\r\n                valueRecovered = Object.values(data1.timeline.recovered)\r\n                valueDeaths = Object.values(data1.timeline.deaths)\r\n\r\n            }\r\n\r\n            datumy.map((jedenDatum, id) => {\r\n                if (valuesCases[id] > 0) {\r\n                    var d = new Date(jedenDatum);\r\n                    var datestring = d.getDate() + \". \" + (d.getMonth() + 1) + \". \" + d.getFullYear()\r\n                    return datumy[id] = datestring\r\n                }\r\n                else return null\r\n            })\r\n\r\n            valuesCases.map((oneCase, id) => {\r\n                valueActiveCases[id] = oneCase - valueRecovered[id] - valueDeaths[id]\r\n                if (id > 0) {\r\n                    dailyCases[id - 1] = valuesCases[id] - valuesCases[id - 1]\r\n                }\r\n\r\n                return dailyCases\r\n            })\r\n\r\n            valuesCases = valuesCases.filter(jedno => jedno !== 0);\r\n            valueRecovered = valueRecovered.splice(-valuesCases.length)\r\n            valueDeaths = valueDeaths.splice(-valuesCases.length)\r\n            datumy = datumy.splice(-valuesCases.length)\r\n            dailyCases = dailyCases.slice(-valuesCases.length)\r\n            valueActiveCases = valueActiveCases.slice(-valuesCases.length)\r\n\r\n\r\n\r\n            // let pomFordataForCards \r\n            if (LastDayData) {\r\n                if (props.match.params.id !== \"Svet\") {\r\n                    let pom = Object.keys(data1.timeline.cases)[Object.keys(data1.timeline.cases).length - 1]\r\n                    var d = new Date(pom);\r\n                    d.setDate(d.getDate() + 1)\r\n                    var lastDataDatum = d.getDate() + \". \" + (d.getMonth() + 1) + \". \" + d.getFullYear()\r\n                    valuesCases.push(LastDayData.cases)\r\n                    dailyCases.push(LastDayData.todayCases)\r\n                    valueDeaths.push(LastDayData.deaths)\r\n                    datumy.push(lastDataDatum)\r\n                    valueRecovered.push(LastDayData.recovered)\r\n                    valueActiveCases.push(LastDayData.active)\r\n                }\r\n                // pomFordataForCards = {\r\n                //     mainData: [{\r\n                //         recovered: LastDayData.recovered,\r\n                //         cases: LastDayData.cases,\r\n                //         deaths: LastDayData.deaths,\r\n                //         active: LastDayData.active,\r\n                //         tests: LastDayData.tests,\r\n                //         todayCases: LastDayData.todayCases,\r\n                //         todayDeaths: LastDayData.todayDeaths,\r\n                //         todayRecovered: LastDayData.todayRecovered\r\n                //     }]\r\n                // }\r\n            }\r\n\r\n            else {\r\n\r\n            }\r\n            if (LastDayData)\r\n                setDataforChart({\r\n                    dataForCards: {\r\n                        mainData: [{\r\n                            recovered: LastDayData.recovered,\r\n                            cases: LastDayData.cases,\r\n                            deaths: LastDayData.deaths,\r\n                            active: LastDayData.active,\r\n                            tests: LastDayData.tests,\r\n                            todayCases: LastDayData.todayCases,\r\n                            todayDeaths: LastDayData.todayDeaths,\r\n                            todayRecovered: LastDayData.todayRecovered\r\n                        }]\r\n                    },\r\n                    nacitatViacUdajov: loadMoreData.bool,\r\n                    datumy: datumy,\r\n\r\n                    dataSetsCases: {\r\n                        datasets: [\r\n                            {\r\n                                label: \"Celkový počet nakazených\",\r\n                                data: valuesCases,\r\n                                backgroundColor: \"rgb(249, 70, 68)\",\r\n                                fillColor: 'black',\r\n                                hoverBackgroundColor: 'red',\r\n                            }\r\n                        ]\r\n                    },\r\n\r\n                    dataSetsDeaths: {\r\n                        datasets: [\r\n                            {\r\n                                label: \"Celkový počet úmrtí\",\r\n                                data: valueDeaths,\r\n                                backgroundColor: \"grey\",\r\n                                hoverBackgroundColor: 'grey',\r\n                            }\r\n                        ]\r\n                    },\r\n\r\n                    dataSetsRecovered: {\r\n                        datasets: [\r\n                            {\r\n                                label: \"Celkový počet vyliečených\",\r\n                                data: valueRecovered,\r\n                                backgroundColor: \"green\",\r\n                                hoverBackgroundColor: 'green',\r\n                            }\r\n                        ]\r\n                    },\r\n\r\n                    dataSetsActiveCases: {\r\n                        datasets: [\r\n                            {\r\n                                label: \"Celkový počet aktivnych prípadov\",\r\n                                data: valueActiveCases,\r\n                                backgroundColor: \"blue\",\r\n                                hoverBackgroundColor: 'blue',\r\n                            }\r\n                        ]\r\n                    },\r\n\r\n                    dataSetsDailyCases: {\r\n                        datasets: [\r\n                            {\r\n                                label: \"Denný prírastok nakazených\",\r\n                                data: dailyCases,\r\n                                backgroundColor: \"salmon\",\r\n                                hoverBackgroundColor: 'salmon',\r\n                            }\r\n                        ]\r\n                    },\r\n\r\n                }\r\n                )\r\n        }\r\n\r\n        fetchData()\r\n\r\n    }, [loadMoreData, match.params.id, LastDayData])\r\n\r\n\r\n    const ZmenitLoadMoreData = () => {\r\n        if (loadMoreData.bool === false)\r\n            setLoadMoreData({\r\n                text: 'Zobraziť menej dní',\r\n                bool: !loadMoreData.bool\r\n            })\r\n        else {\r\n            setLoadMoreData({\r\n                text: 'Zobraziť viac dní',\r\n                bool: !loadMoreData.bool\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        dataforChart ?\r\n            <div className=\"testingGrafy\">\r\n\r\n                {match.params.id === \"Svet\" ?\r\n                    <h1>Covid-19 vo svete</h1>\r\n                    :\r\n                    < h1 > Covid - 19 v krajine {match.params.id}</h1>\r\n                }\r\n\r\n\r\n                <DataWorld mainData={dataforChart.dataForCards.mainData} />\r\n                {/* {console.log(dataforChart)} */}\r\n                <DougnatChart cases={dataforChart.dataSetsCases.datasets[0].data[dataforChart.dataSetsCases.datasets[0].data.length - 1]}\r\n                    recovered={dataforChart.dataSetsRecovered.datasets[0].data[dataforChart.dataSetsRecovered.datasets[0].data.length - 1]}\r\n                    deaths={dataforChart.dataSetsDeaths.datasets[0].data[dataforChart.dataSetsDeaths.datasets[0].data.length - 1]} />\r\n\r\n                <div className=\"NacitatViacDniDoGrafov\" onClick={ZmenitLoadMoreData}>\r\n                    {loadMoreData.text}\r\n                </div>\r\n\r\n\r\n                <div >\r\n                    <BarGraf props={dataforChart} />\r\n                </div>\r\n            </div >\r\n            : <LoadingAnimation />\r\n    )\r\n}\r\n\r\nexport default GrafyKrajina\r\n","import axios from 'axios'\r\n\r\nexport default function GetLastData(props, LOCAL_STORAGE_LASTDAY, setLastDayData) {\r\n    // var returnThis\r\n\r\n    // if (props.location.state) {\r\n    //     returnThis = props.location.state[0]\r\n    //     localStorage.setItem(LOCAL_STORAGE_LASTDAY, JSON.stringify(props.location.state[0]))\r\n    //     setLastDayData(returnThis)\r\n\r\n    //     return returnThis\r\n    // }\r\n    // else if (localStorage.getItem(LOCAL_STORAGE_LASTDAY)) {\r\n    //     returnThis = JSON.parse(localStorage.getItem(LOCAL_STORAGE_LASTDAY))\r\n    //     setLastDayData(returnThis)\r\n    //     console.log(\"this is good\")\r\n\r\n    //     return returnThis\r\n    // }\r\n\r\n    // else {\r\n    var pom = []\r\n\r\n    if (props.match.params.id === \"Svet\")\r\n        axios.get('https://disease.sh/v2/all')\r\n            .then(response => {\r\n                localStorage.setItem(LOCAL_STORAGE_LASTDAY, JSON.stringify(response.data))\r\n                setLastDayData(response.data)\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n    else\r\n        axios.get('https://disease.sh/v2/countries')\r\n            .then(response => {\r\n                // const allowed = [\"country\", \"active\", \"todayCases\", \"cases\", \"deaths\", \"recovered\", \"tests\", \"todayCases\", \"todayRecovered\", \"todayDeaths\"]\r\n                response.data.map((udaj, id) => {\r\n                    Object.keys(udaj)\r\n                        // .filter(key => allowed.includes(key))\r\n                        .reduce((obj, key) => {\r\n                            obj[key] = udaj[key];\r\n                            pom[id] = obj\r\n                            return obj;\r\n                        }, {})\r\n                    return null\r\n                })\r\n                pom = pom.filter(function (e) {\r\n                    return e.country === props.match.params.id\r\n                })\r\n                localStorage.setItem(LOCAL_STORAGE_LASTDAY, JSON.stringify(pom[0]))\r\n                setLastDayData(pom[0])\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n    // }\r\n}\r\n\r\n","import React from 'react';\nimport './App.css';\nimport Nav from './Nav';\nimport './Covid/css/notLocated.scss'\n\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom'\nimport CovidApp from './Covid/CovidApp';\n// const CovidApp = React.lazy(() => import('./Covid/CovidApp'));\n\nimport CovidSK from './Covid/CovidSK';\nimport GrafyKrajina from './Covid/GrafyKrajina';\n// const CovidSK = React.lazy(() => import('./Covid/CovidSK'));\n\n// import CovidApp from './Covid/CovidApp';\n// import CovidSK from './Covid/CovidSK';\n// import TodoApp from './Todo/TodoApp';\n// import { polyfill } from 'es6-promise'; polyfill();\n// require('es6-promise').polyfill();\n// require('isomorphic-fetch');\n\n\nfunction App() {\n  return (\n    <Router basename=\"/\">\n      <div className=\"App\">\n        <Nav />\n        <Switch>\n          <Route path=\"/\" component={CovidApp} exact />\n          <Route path=\"/Covid/CovidSK\" component={CovidSK} />\n          <Route path=\"/Covid/CovidApp\" exact component={CovidApp} />\n          <Route path=\"/Covid/CovidApp/:id\" component={GrafyKrajina} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n","module.exports = __webpack_public_path__ + \"static/media/earth.cdc4522b.svg\";","module.exports = __webpack_public_path__ + \"static/media/slovakiaIcon.a29682dd.svg\";"],"sourceRoot":""}