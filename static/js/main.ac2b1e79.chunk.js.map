{"version":3,"sources":["imgs/coronaIcon.svg","imgs/earth.svg","imgs/slovakiaIcon.svg","Nav.js","Covid/CovidTable.js","Covid/CovidApp.js","Covid/CovidSK.js","App.js","index.js"],"names":["module","exports","Nav","navStyle","color","className","style","to","alt","src","earthIcon","slovakiaIcon","CovidTable","props","useState","ikonka","setIkonka","zmenIkonku","key","myStyle2","transform","FormatNum","num","toString","replace","type","id","onKeyUp","filter","tr","td","i","document","getElementById","value","toUpperCase","getElementsByTagName","length","textContent","innerText","indexOf","display","placeholder","onClick","sortBy","countriesData","map","item","country","background","width","cases","active","todayCases","deaths","fontWeight","todayDeaths","recovered","functionForWorld","textDecoration","totalTests","CovidApp","mainData","setMainData","setCountriesData","direction","price_usd","state","setState","useEffect","HandleLoadData","HandleLoadData2","a","fetch","response","json","data","sort","b","parseFloat","numberTrans3","output","toFixed","coronaIcon","CovidSK","dataSvk","setDataSvk","LoadData","negatTestyMoje","Heading","keyframes","HomeHeader","styled","div","chart","Object","keys","tested_chart","c","newRecovered","newDeaths","console","log","tested","infected","handleData","MaxInfected","day1","index","height","end","parseInt","prefix","date","handleGraph1","MaxDaily","pom1","marginLeft","handleGraph2","Home","App","basename","path","component","exact","ReactDOM","render"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,wC,wCCA3CD,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,0C,wRCoC5BC,MA9Bf,WAGI,IAAIC,EAAW,CACXC,MAAO,SAIX,OACI,yBAAKC,UAAU,UACX,wBAAIA,UAAU,YACV,4BACI,kBAAC,IAAD,CAAMC,MAAOH,EAAUI,GAAG,mBACtB,6BACI,yBAAKC,IAAI,GAAGC,IAAKC,IAAWL,UAAU,cAD1C,oBAKR,4BACI,kBAAC,IAAD,CAAMC,MAAOH,EAAUI,GAAG,kBACtB,6BACI,yBAAKC,IAAI,GAAGC,IAAKE,IAAcN,UAAU,YAD7C,2B,sFC6JTO,MAnLf,SAAoBC,GAAQ,IAAD,EACKC,mBAAS,SADd,mBAChBC,EADgB,KACRC,EADQ,KAGvB,SAASC,EAAWC,GAEZF,EADAE,IAAQH,EACEG,EAAM,IAEHA,GAGrB,IAAMC,EAAW,CACbC,UAAW,mBAuBf,SAASC,EAAUC,GACf,GAAIA,EACA,OACIA,EAAIC,WAAWC,QAAQ,wBAAyB,KAkB5D,OAEI,oCAEI,2BAAOC,KAAK,OAAOC,GAAG,UAAUC,QA5CxC,WACI,IAAWC,EAAeC,EAAIC,EAAIC,EAKlC,IAHAH,EADQI,SAASC,eAAe,WACjBC,MAAMC,cAErBN,EADQG,SAASC,eAAe,WACrBG,qBAAqB,MAC3BL,EAAI,EAAGA,EAAIF,EAAGQ,OAAQN,KACvBD,EAAKD,EAAGE,GAAGK,qBAAqB,MAAM,OAEvBN,EAAGQ,aAAeR,EAAGS,WACnBJ,cAAcK,QAAQZ,IAAW,EAC1CC,EAAGE,GAAGzB,MAAMmC,QAAU,GAEtBZ,EAAGE,GAAGzB,MAAMmC,QAAU,SA+BuBC,YAAY,qBAAWrC,UAAU,gBACtF,yBAAKA,UAAU,YACX,2BAAOqB,GAAG,WACN,+BACI,4BACI,wBAAIiB,QAAS,kBAAO9B,EAAM+B,OAAO,cAAe3B,EAAW,gBAA3D,UAEY,eAAXF,EACS,kBAAC,IAAD,CAAkBV,UAAU,aAC5B,KAEM,gBAAXU,EACK,kBAAC,IAAD,CAAkBT,MAAOa,EAAUd,UAAU,aAC7C,MAGV,wBAAIsC,QAAS,kBAAO9B,EAAM+B,OAAO,SAAU3B,EAAW,WAAtD,2BAEY,UAAXF,EACS,kBAAC,IAAD,CAAkBV,UAAU,aAC5B,KAEM,WAAXU,EACK,kBAAC,IAAD,CAAkBT,MAAOa,EAAUd,UAAU,aAC7C,MAGV,wBAAIsC,QAAS,kBAAO9B,EAAM+B,OAAO,UAAW3B,EAAW,YAAvD,wBAEY,WAAXF,EACS,kBAAC,IAAD,CAAkBV,UAAU,aAC5B,KAEM,YAAXU,EACK,kBAAC,IAAD,CAAkBT,MAAOa,EAAUd,UAAU,aAC7C,MAGV,wBAAIsC,QAAS,kBAAO9B,EAAM+B,OAAO,cAAe3B,EAAW,gBAA3D,qBAEY,eAAXF,EACS,kBAAC,IAAD,CAAkBV,UAAU,aAC5B,KAEM,gBAAXU,EACK,kBAAC,IAAD,CAAkBT,MAAOa,EAAUd,UAAU,aAC7C,MAGV,wBAAIsC,QAAS,kBAAO9B,EAAM+B,OAAO,UAAW3B,EAAW,YAAvD,yBAEY,WAAXF,EACS,kBAAC,IAAD,CAAkBV,UAAU,aAC5B,KAEM,YAAXU,EACK,kBAAC,IAAD,CAAkBT,MAAOa,EAAUd,UAAU,aAC7C,MAGV,wBAAIsC,QAAS,kBAAO9B,EAAM+B,OAAO,eAAgB3B,EAAW,iBAA5D,oBAEY,gBAAXF,EACS,kBAAC,IAAD,CAAkBV,UAAU,aAC5B,KAEM,iBAAXU,EACK,kBAAC,IAAD,CAAkBT,MAAOa,EAAUd,UAAU,aAC7C,MAGV,wBAAIsC,QAAS,kBAAO9B,EAAM+B,OAAO,aAAc3B,EAAW,eAA1D,iCAEY,cAAXF,EACS,kBAAC,IAAD,CAAkBV,UAAU,aAC5B,KAEM,eAAXU,EACK,kBAAC,IAAD,CAAkBT,MAAOa,EAAUd,UAAU,aAC7C,QAKlB,+BACKQ,EAAMgC,cAAcC,KAAI,SAACC,EAAMrB,GAAP,MACJ,UAAjBqB,EAAKC,QAvG7B,SAA0BD,EAAMrB,GAC5B,OACI,wBAAIR,IAAKQ,EAAIpB,MAAO,CAAE2C,WAAY,uBAC9B,wBAAI3C,MAAO,CAAE4C,MAAO,UAAYH,EAAKC,SACrC,4BAAK3B,EAAU0B,EAAKI,QACpB,4BAAK9B,EAAU0B,EAAKK,SACpB,wBAAI9C,MAAO,CAAE2C,WAAY,4BAAzB,IAAwD5B,EAAU0B,EAAKM,YAAvE,KACA,4BAAKhC,EAAU0B,EAAKO,SACpB,wBAAIhD,MAAO,CAAEF,MAAO,4BAA6BmD,WAAY,SAA7D,IAAyElC,EAAU0B,EAAKS,aAAxF,KACA,wBAAIlD,MAAO,CAAEiD,WAAY,OAAQnD,MAAO,UAAYiB,EAAU0B,EAAKU,aA8F5BC,CAAiBX,EAAMrB,GAC9C,wBAAIR,IAAKQ,GACL,wBAAIpB,MAAO,CAAE4C,MAAO,UACE,aAAjBH,EAAKC,QACF,yBAAK1C,MAAO,CAAEiD,WAAY,OAAQI,eAAgB,cAC9C,kBAAC,IAAD,CAAMpD,GAAG,kBAAkBwC,EAAKC,UAElCD,EAAKC,QAEVD,EAAKa,WAAa,EACf,yBAAKvD,UAAU,aAAf,sBAAyC,yBAAKA,UAAU,mBAAmBgB,EAAU0B,EAAKa,cACxF,MAEV,4BAAKvC,EAAU0B,EAAKI,QACpB,4BAAK9B,EAAU0B,EAAKK,SACnBL,EAAKM,WAAa,EACf,wBAAI/C,MAAO,CAAE2C,WAAY,wBAAzB,IAAoD5B,EAAU0B,EAAKM,YAAnE,KACE,6BAEN,4BAAKhC,EAAU0B,EAAKO,SACnBP,EAAKS,YAAc,EAChB,wBAAIlD,MAAO,CAAEF,MAAO,4BAA6BmD,WAAY,SAA7D,IAAyElC,EAAU0B,EAAKS,aAAxF,KACE,6BAEN,wBAAIlD,MAAO,CAAEiD,WAAY,OAAQnD,MAAO,UAAYiB,EAAU0B,EAAKU,qB,QCbxFI,MAtJf,WAEI,IAFgB,EAIgB/C,mBAAS,IAJzB,mBAITgD,EAJS,KAICC,EAJD,OAQ0BjD,mBAAS,IARnC,mBAQT+B,EARS,KAQMmB,EARN,OASUlD,mBAAS,CAC/B+B,cAAeA,EACfoB,UAAW,CACPC,UAAW,SAZH,mBASTC,EATS,KASFC,EATE,KAiBhBC,qBAAU,WACNC,IACAC,MACD,IAEH,IAAMD,EAAc,uCAAG,8BAAAE,EAAA,sEACIC,MArBf,gDAoBW,cACbC,EADa,gBAEAA,EAASC,OAFT,OAEbC,EAFa,OAGnBb,EAAY,CAACa,EAAKzB,MAAOyB,EAAKnB,UAAWmB,EAAKtB,SAH3B,2CAAH,qDAMdiB,EAAe,uCAAG,8BAAAC,EAAA,sEACGC,MAtBN,sDAqBG,cACdC,EADc,gBAEDA,EAASC,OAFR,OAEdC,EAFc,OAGpBZ,EAAiBY,GAEjBR,EAAS,CACLQ,KAAMA,EAAKC,MAAK,SAACL,EAAGM,GAAJ,MACiB,QAA7BX,EAAMF,UAAN,MACMc,WAAWP,EAAC,OAAaO,WAAWD,EAAC,OACrCC,WAAWD,EAAC,OAAaC,WAAWP,EAAC,UAE/CP,UAAU,eACL,QAAuC,QAA7BE,EAAMF,UAAN,MACL,OACA,SAdM,2CAAH,qDAmBrB,SAAS5C,EAAUC,GACf,GAAIA,EACA,OACIA,EAAIC,WAAWC,QAAQ,wBAAyB,KAK5D,SAASwD,EAAaR,EAAGM,GACrB,GAAIN,EAAG,CACH,IAAIS,EAASH,GAAKN,EAAI,KAKtB,OADAS,GADAA,GADAA,GADAA,EAASH,GAAKN,EAAI,MACFU,QAAQ,IACR3D,YACAC,QAAQ,IAAK,KAEzB,yBAAKnB,UAAU,oBACX,kDADJ,IACgC4E,EADhC,MAuBZ,OACI,yBAAK5E,UAAU,YACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,SACX,yBAAKA,UAAU,WACX,yBAAKA,UAAU,UACX,yBAAKA,UAAU,UACX,yBAAKG,IAAI,GAAGC,IAAK0E,QAGzB,yBAAK9E,UAAU,YAAf,8BAEJ,yBAAKA,UAAU,YACVgB,EAAUyC,EAAS,IACpB,yBAAKzD,UAAU,oBACX,sEADJ,IAC4CgB,EAAUyC,EAAS,GAAKA,EAAS,GAAKA,EAAS,OAMnG,yBAAKzD,UAAU,SACX,yBAAKA,UAAU,WACX,yBAAKA,UAAU,UACX,yBAAKA,UAAU,aACX,kBAAC,IAAD,CAAcD,MAAO,YAG7B,yBAAKC,UAAU,YAAf,oCAEJ,yBAAKA,UAAU,YACVgB,EAAUyC,EAAS,IACnBkB,EAAalB,EAAS,GAAIA,EAAS,MAI5C,yBAAKzD,UAAU,SACX,yBAAKA,UAAU,WACX,yBAAKA,UAAU,UACX,yBAAKA,UAAU,gBACX,kBAAC,IAAD,CAAcD,MAAO,YAG7B,yBAAKC,UAAU,YAAf,4BAEJ,yBAAKA,UAAU,YACVgB,EAAUyC,EAAS,IACnBkB,EAAalB,EAAS,GAAIA,EAAS,OAKhD,6BACA,6BAEA,yBAAKzD,UAAU,kBAAiB,kBAAC,IAAD,CAAME,GAAG,kBAAT,0BAChC,6BAAS,6BAET,kBAAC,EAAD,CAAYsC,cAAeA,EAAeD,OA1ElD,SAAgB1B,GACZkD,EAAS,CACLvB,cAAeA,EAAcgC,MAAK,SAACL,EAAGM,GAAJ,MACL,QAAzBX,EAAMF,UAAU/C,GACV6D,WAAWP,EAAEtD,IAAQ6D,WAAWD,EAAE5D,IAClC6D,WAAWD,EAAE5D,IAAQ6D,WAAWP,EAAEtD,OAE5C+C,UAAU,eACL/C,EAA+B,QAAzBiD,EAAMF,UAAU/C,GACjB,OACA,c,6ZCuJPkE,MA1Of,WAAoB,IAAD,EACetE,qBADf,mBACRuE,EADQ,KACCC,EADD,KAIfjB,qBAAU,WACNkB,MACD,IAEH,IAAMC,EAAiB,CAAC,GAAI,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,KACvDD,EAAQ,uCAAG,8BAAAf,EAAA,sEACUC,MARf,oCAOK,cACPC,EADO,gBAEMA,EAASC,OAFf,OAEPC,EAFO,OAGbU,EAAW,CAACV,IAHC,2CAAH,qDA8ERa,EAAUC,YAAH,KASPC,EAAaC,IAAOC,IAAV,IAEHJ,GAiHb,OACI,yBAAKpF,UAAU,YAEPgF,EACM,oCAxMlB,WACI,IAAIb,EAAIa,EAAQ,GAAGS,MAAMC,OAAOC,KAAKX,EAAQ,GAAGY,cAAc5D,QAAQoB,UAClEqB,EAAIO,EAAQ,GAAGS,MAAMC,OAAOC,KAAKX,EAAQ,GAAGY,cAAc5D,OAAO,GAAGoB,UACpEyC,EAAI1B,EAAIM,EACRqB,EAAe,EAChBD,EAAI,IACHC,EAAe3B,EAAEM,GAMrB,IAAIsB,EAAY,EAOhB,OARCF,GAFA1B,EAAIa,EAAQ,GAAGS,MAAMC,OAAOC,KAAKX,EAAQ,GAAGY,cAAc5D,QAAQoB,YAClEqB,EAAIO,EAAQ,GAAGS,MAAMC,OAAOC,KAAKX,EAAQ,GAAGY,cAAc5D,OAAO,GAAGoB,YAG9D,IACH2C,EAAY5B,EAAEM,GAIlBuB,QAAQC,IAAIjB,EAAQ,IAEhB,6BACI,yBAAKhF,UAAU,YACX,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,WACX,yBAAKA,UAAU,UACX,yBAAKA,UAAU,UACX,yBAAKG,IAAI,GAAGC,IAAK0E,QAGzB,yBAAK9E,UAAU,YAAW,sDAE9B,yBAAKA,UAAU,cAAf,8BAC4BgF,EAAQ,GAAGkB,OAAO,6BAD9C,qCAEmClB,EAAQ,GAAGkB,OAASlB,EAAQ,GAAGmB,SAAS,6BAF3E,qCAGmCnB,EAAQ,GAAGmB,SAAS,6BAHvD,mCAI4BnB,EAAQ,GAAG5B,UAAU,6BACvC4B,EAAQ,GAAG/B,OAAS,EAAI,gEAAiB+B,EAAQ,GAAG/B,OAAO,8BAC3D,OAKd,yBAAKjD,UAAU,kBACX,yBAAKA,UAAU,WACf,yBAAKA,UAAU,YAAW,iEAE1B,yBAAKA,UAAU,cAAf,wCACkC,8BAAOgF,EAAQ,GAAGY,aAAaF,OAAOC,KAAKX,EAAQ,GAAGY,cAAc5D,OAAO,GAAGkE,QAAc,6BAD9H,qCAEkC,8BAAOlB,EAAQ,GAAGY,aAAaF,OAAOC,KAAKX,EAAQ,GAAGY,cAAc5D,OAAO,GAAGkE,OAASlB,EAAQ,GAAGY,aAAaF,OAAOC,KAAKX,EAAQ,GAAGY,cAAc5D,OAAO,GAAGmE,UAAgB,6BAFhN,qCAGkC,kCAAQnB,EAAQ,GAAGY,aAAaF,OAAOC,KAAKX,EAAQ,GAAGY,cAAc5D,OAAO,GAAGmE,UAErGL,EAAe,EACf,wCAAG,6BAAH,6CAAoCA,EAAa,8BAC/C,KAGFC,EAAY,EACZ,0EAAwBA,EAAU,8BAChC,SA+IbK,GA/GrB,WACI,IAAMC,EAAc,IAAMrB,EAAQ,GAAGS,MAAMC,OAAOC,KAAKX,EAAQ,GAAGS,OAAOzD,OAAS,GAAGmE,SACrF,OACI,yBAAKnG,UAAU,kBACX,yBAAKA,UAAU,WAQPgF,EAAQ,GAAGS,MAAMhD,KAAI,SAAC6D,EAAMC,GAAP,OACjB,kBAACjB,EAAD,CAAYzE,IAAK0F,GACb,yBAAKvG,UAAU,4BAA4BC,MAAO,CAAEuG,OAAO,QAAD,OAAUH,EAAcC,EAAKH,SAA7B,SACtD,kBAAC,IAAD,CAASnG,UAAU,mBAAmByG,IAAKC,SAASJ,EAAKH,YACxDnB,EAAQ,GAAGY,aAAaW,EAAQ,GAC5B,wCAAG,kBAAC,IAAD,CAASvG,UAAU,kBAAkB2G,OAAO,IAAIF,IAAKC,SAAS1B,EAAQ,GAAGY,aAAaW,EAAQ,GAAGJ,aAGnG,oCAAE,kBAAC,IAAD,CAASnG,UAAU,kBAAkB2G,OAAO,IAAIF,IAAK,KAE7D,yBAAKzG,UAAU,YAAYsG,EAAKM,YAMpD,yBAAK5G,UAAU,4BA0FN6G,GArFrB,WACI,IAAIC,EAAW,EASf,OARI9B,IACAA,EAAQ,GAAGY,aAAanD,KAAI,SAAAsE,GACpBA,EAAKb,OAASY,IACdA,EAAWC,EAAKb,OAASa,EAAKZ,aAGtCW,GAAsB,KAGtB,yBAAK9G,UAAU,kBACX,yBAAKA,UAAU,WACX,yBAAKA,UAAU,eAEd,kBAACsF,EAAD,UACG,yBAAKtF,UAAU,0BAA0BC,MAAO,CAAEuG,OAAO,SAErD,yBAAKxG,UAAU,YAAY,eAE/B,yBAAKA,UAAU,iBAAiBC,MAAO,CAAEuG,OAAO,QAAD,OAAU,IAAMM,EAAhB,cAC3C,kBAAC,IAAD,CAAS9G,UAAU,8BAA8ByG,IAAK,MACtD,kBAAC,IAAD,CAASzG,UAAU,0CAA0C2G,OAAO,IAAKF,IAAK,MAIrFzB,EAAQ,GAAGY,aAAanD,KAAI,SAAC6D,EAAMC,GAAP,OACzB,kBAACjB,EAAD,CAAYzE,IAAK0F,GAET,oCACuB,IAAlBD,EAAKH,SAEF,yBAAKnG,UAAU,2BAEX,yBAAKA,UAAU,YAAYsG,EAAKM,OAGpC,yBAAK5G,UAAU,0BAA0BC,MAAO,CAAEuG,OAAO,QAAD,OAAWF,EAAKH,SAAYW,EAA5B,cACpD,yBAAK9G,UAAU,YAAYsG,EAAKM,OAIpCzB,EAAeoB,GAEX,yBAAKvG,UAAU,QAAQC,MAAO,CAAEuG,OAAO,QAAD,OAAUrB,EAAeoB,GAASO,EAAlC,cAChC3B,EAAeoB,GAAS,GAAM,oCAC5B,kBAAC,IAAD,CAASvG,UAAU,8BAA8ByG,IAAKtB,EAAeoB,GAAQtG,MAAO,CAAE+G,WAAY,UAClG,kBAAC,IAAD,CAAShH,UAAU,2CAA2C2G,OAAO,IAAIF,IAAKH,EAAKH,YAEjF,oCACE,kBAAC,IAAD,CAASnG,UAAU,8BAA8ByG,IAAKtB,EAAeoB,KACrE,kBAAC,IAAD,CAASvG,UAAU,2CAA2C2G,OAAO,IAAIF,IAAKH,EAAKH,aAI7F,yBAAKnG,UAAU,QAAQC,MAAO,CAAEuG,OAAO,QAAD,OAAUF,EAAKJ,OAASY,EAAxB,cACpC,kBAAC,IAAD,CAAS9G,UAAU,8BAA8ByG,IAAKH,EAAKJ,OAASI,EAAKH,WACzE,kBAAC,IAAD,CAASnG,UAAU,2CAA2C2G,OAAO,IAAIF,IAAKH,EAAKH,kBAQnH,yBAAKnG,UAAU,wBACX,6BAAK,yBAAKA,UAAU,SAApB,oCACA,6BAAK,yBAAKA,UAAU,QAApB,sCAmBKiH,IAEH,KC/MtB,IAAMC,EAAO,kBACX,6BACE,kBAAC,EAAD,QAIWC,EAvBf,WAGE,OACE,kBAAC,IAAD,CAAQC,SAAS,KACf,yBAAKpH,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOqH,KAAK,IAAIC,UAAWJ,EAAMK,OAAK,IACtC,kBAAC,IAAD,CAAOF,KAAK,kBAAkBC,UAAW9D,IACzC,kBAAC,IAAD,CAAO6D,KAAK,iBAAiBC,UAAWvC,QCdlDyC,IAASC,OAAO,kBAAC,EAAD,MAAS9F,SAASC,eAAe,W","file":"static/js/main.ac2b1e79.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/coronaIcon.02ed3e1a.svg\";","module.exports = __webpack_public_path__ + \"static/media/earth.cdc4522b.svg\";","module.exports = __webpack_public_path__ + \"static/media/slovakiaIcon.a29682dd.svg\";","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport './nav.css'\r\nimport earthIcon from \"./imgs/earth.svg\"\r\nimport slovakiaIcon from \"./imgs/slovakiaIcon.svg\"\r\n\r\nfunction Nav() {\r\n\r\n\r\n    let navStyle = {\r\n        color: 'white',\r\n    }\r\n\r\n\r\n    return (\r\n        <nav className=\"navApp\" >\r\n            <ul className=\"navLinks\">\r\n                <li>\r\n                    <Link style={navStyle} to='/Covid/CovidApp'>\r\n                        <div>\r\n                            <img alt=\"\" src={earthIcon} className=\"earthIcon\" />Covid vo svete\r\n                        </div>\r\n                    </Link>\r\n                </li>\r\n                <li>\r\n                    <Link style={navStyle} to='/Covid/CovidSK'>\r\n                        <div>\r\n                            <img alt=\"\" src={slovakiaIcon} className=\"svkIcon\" />Covid na slovensku\r\n                        </div>\r\n                    </Link>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import React, { useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { FaSortAmountDown } from 'react-icons/fa';\r\n\r\nfunction CovidTable(props) {\r\n    const [ikonka, setIkonka] = useState('cases')\r\n\r\n    function zmenIkonku(key) {\r\n        if (key === ikonka) {\r\n            setIkonka(key + \"2\")\r\n        }\r\n        else { setIkonka(key) }\r\n    }\r\n\r\n    const myStyle2 = {\r\n        transform: \"rotateX(180deg)\",\r\n    }\r\n\r\n\r\n    function myFunction() {\r\n        var input, filter, table, tr, td, i, txtValue;\r\n        input = document.getElementById(\"myInput\");\r\n        filter = input.value.toUpperCase();\r\n        table = document.getElementById(\"myTable\");\r\n        tr = table.getElementsByTagName(\"tr\");\r\n        for (i = 0; i < tr.length; i++) {\r\n            td = tr[i].getElementsByTagName(\"td\")[0];\r\n            if (td) {\r\n                txtValue = td.textContent || td.innerText;\r\n                if (txtValue.toUpperCase().indexOf(filter) > -1) {\r\n                    tr[i].style.display = \"\";\r\n                } else {\r\n                    tr[i].style.display = \"none\";\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function FormatNum(num) {\r\n        if (num) {\r\n            return (\r\n                num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \")\r\n            )\r\n        }\r\n    }\r\n\r\n    function functionForWorld(item, id) {\r\n        return (\r\n            <tr key={id} style={{ background: 'rgb(214, 214, 214)' }} >\r\n                <td style={{ width: '100px' }}>{item.country}</td>\r\n                <td>{FormatNum(item.cases)}</td>\r\n                <td>{FormatNum(item.active)}</td>\r\n                <td style={{ background: ' rgb(254, 255, 194, .4)' }}>+{FormatNum(item.todayCases)} </td>\r\n                <td>{FormatNum(item.deaths)}</td>\r\n                <td style={{ color: ' rgba(156, 20, 20, 0.849)', fontWeight: 'bold' }}>+{FormatNum(item.todayDeaths)} </td>\r\n                <td style={{ fontWeight: 'bold', color: 'green' }}>{FormatNum(item.recovered)}</td>\r\n            </tr>\r\n        )\r\n    }\r\n    return (\r\n        // <div className=\"divTable\" style={{ overflowX: 'visible' }}>\r\n        <>\r\n\r\n            <input type=\"text\" id=\"myInput\" onKeyUp={myFunction} placeholder=\"Hľadať..\" className=\"inputSearch\" />\r\n            <div className=\"divTable\" >\r\n                <table id=\"myTable\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th onClick={() => (props.sortBy('totalTests'), zmenIkonku('totalTests'))} >\r\n                                Krajina\r\n                            {ikonka === 'totalTests'\r\n                                    ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                    : null\r\n                                }\r\n                                {ikonka === 'totalTests2'\r\n                                    ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                    : null\r\n                                }\r\n                            </th>\r\n                            <th onClick={() => (props.sortBy('cases'), zmenIkonku('cases'))} >\r\n                                Počet nakazených\r\n                            {ikonka === 'cases'\r\n                                    ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                    : null\r\n                                }\r\n                                {ikonka === 'cases2'\r\n                                    ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                    : null\r\n                                }\r\n                            </th>\r\n                            <th onClick={() => (props.sortBy('active'), zmenIkonku('active'))} >\r\n                                Aktívne prípady\r\n                            {ikonka === 'active'\r\n                                    ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                    : null\r\n                                }\r\n                                {ikonka === 'active2'\r\n                                    ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                    : null\r\n                                }\r\n                            </th>\r\n                            <th onClick={() => (props.sortBy('todayCases'), zmenIkonku('todayCases'))} >\r\n                                Nové prípady\r\n                            {ikonka === 'todayCases'\r\n                                    ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                    : null\r\n                                }\r\n                                {ikonka === 'todayCases2'\r\n                                    ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                    : null\r\n                                }\r\n                            </th>\r\n                            <th onClick={() => (props.sortBy('deaths'), zmenIkonku('deaths'))} >\r\n                                Počet úmrtí\r\n                            {ikonka === 'deaths'\r\n                                    ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                    : null\r\n                                }\r\n                                {ikonka === 'deaths2'\r\n                                    ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                    : null\r\n                                }\r\n                            </th>\r\n                            <th onClick={() => (props.sortBy('todayDeaths'), zmenIkonku('todayDeaths'))} >\r\n                                Nové úmrtia\r\n                            {ikonka === 'todayDeaths'\r\n                                    ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                    : null\r\n                                }\r\n                                {ikonka === 'todayDeaths2'\r\n                                    ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                    : null\r\n                                }\r\n                            </th>\r\n                            <th onClick={() => (props.sortBy('recovered'), zmenIkonku('recovered'))} >\r\n                                Počet vyliečených\r\n                            {ikonka === 'recovered'\r\n                                    ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                    : null\r\n                                }\r\n                                {ikonka === 'recovered2'\r\n                                    ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                    : null\r\n                                }\r\n                            </th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {props.countriesData.map((item, id) => (\r\n                            item.country === 'World' ? functionForWorld(item, id) :\r\n                                <tr key={id} >\r\n                                    <td style={{ width: '100px' }}>\r\n                                        {item.country === 'Slovakia' ?\r\n                                            <div style={{ fontWeight: 'bold', textDecoration: 'underline' }}>\r\n                                                <Link to='/Covid/CovidSK'>{item.country}</Link>\r\n                                            </div>\r\n                                            : item.country\r\n                                        }\r\n                                        {item.totalTests > 0 ?\r\n                                            <div className=\"firstCase\">Počet testov: <div className=\"firstCaseNumber\">{FormatNum(item.totalTests)}</div></div>\r\n                                            : null}\r\n                                    </td>\r\n                                    <td>{FormatNum(item.cases)}</td>\r\n                                    <td>{FormatNum(item.active)}</td>\r\n                                    {item.todayCases > 0 ?\r\n                                        <td style={{ background: ' rgb(254, 255, 194)' }}>+{FormatNum(item.todayCases)} </td>\r\n                                        : <td></td>\r\n                                    }\r\n                                    <td>{FormatNum(item.deaths)}</td>\r\n                                    {item.todayDeaths > 0 ?\r\n                                        <td style={{ color: ' rgba(156, 20, 20, 0.849)', fontWeight: 'bold' }}>+{FormatNum(item.todayDeaths)} </td>\r\n                                        : <td></td>\r\n                                    }\r\n                                    <td style={{ fontWeight: 'bold', color: 'green' }}>{FormatNum(item.recovered)}</td>\r\n                                </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CovidTable","import React, { useState, useEffect } from 'react'\r\nimport './covid.css'\r\nimport './covidDesign.css'\r\nimport { Link } from 'react-router-dom'\r\nimport coronaIcon from \"../imgs/coronaIcon.svg\"\r\nimport CovidTable from \"./CovidTable\"\r\nimport { GiDeathSkull } from \"react-icons/gi\";\r\nimport { GiHealthNormal } from \"react-icons/gi\";\r\nimport { FaPlusCircle } from \"react-icons/fa\";\r\n\r\nfunction CovidApp() {\r\n    // const url = 'https://covid19.mathdro.id/api/'\r\n    const url = 'https://coronavirus-19-api.herokuapp.com/all'\r\n    // const svk = 'https://covid19.mathdro.id/api/countries/slovakia'\r\n    const [mainData, setMainData] = useState([])\r\n\r\n\r\n    const urlCountries = 'https://coronavirus-19-api.herokuapp.com/countries'\r\n    const [countriesData, setCountriesData] = useState([])\r\n    const [state, setState] = useState({\r\n        countriesData: countriesData,\r\n        direction: {\r\n            price_usd: 'asc',\r\n        }\r\n    })\r\n\r\n\r\n    useEffect(() => {\r\n        HandleLoadData()\r\n        HandleLoadData2()\r\n    }, [])\r\n\r\n    const HandleLoadData = async () => {\r\n        const response = await fetch(url)\r\n        const data = await response.json()\r\n        setMainData([data.cases, data.recovered, data.deaths])\r\n    }\r\n\r\n    const HandleLoadData2 = async () => {\r\n        const response = await fetch(urlCountries)\r\n        const data = await response.json()\r\n        setCountriesData(data)\r\n\r\n        setState({\r\n            data: data.sort((a, b) => (\r\n                state.direction['cases'] === 'asc'\r\n                    ? parseFloat(a['cases']) - parseFloat(b['cases'])\r\n                    : parseFloat(b['cases']) - parseFloat(a['cases'])\r\n            )),\r\n            direction: {\r\n                ['cases']: state.direction['cases'] === 'asc'\r\n                    ? 'desc'\r\n                    : 'asc'\r\n            }\r\n        })\r\n    }\r\n\r\n    function FormatNum(num) {\r\n        if (num) {\r\n            return (\r\n                num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \")\r\n            )\r\n        }\r\n    }\r\n\r\n    function numberTrans3(a, b) {\r\n        if (a) {\r\n            let output = b / (a / 100)\r\n            output = b / (a / 100)\r\n            output = output.toFixed(3)\r\n            output = output.toString()\r\n            output = output.replace(\".\", \",\")\r\n            return (\r\n                <div className=\"aktiveNakazenych\">\r\n                    <span>V percentách:</span> {output}%\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    function sortBy(key) {\r\n        setState({\r\n            countriesData: countriesData.sort((a, b) => (\r\n                state.direction[key] === 'asc'\r\n                    ? parseFloat(a[key]) - parseFloat(b[key])\r\n                    : parseFloat(b[key]) - parseFloat(a[key])\r\n            )),\r\n            direction: {\r\n                [key]: state.direction[key] === 'asc'\r\n                    ? 'desc'\r\n                    : 'asc'\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"covidApp\">\r\n            <div className=\"cardsDiv\">\r\n                <div className=\"cards\">\r\n                    <div className=\"topCard\">\r\n                        <div className=\"obrDiv\">\r\n                            <div className=\"circle\">\r\n                                <img alt=\"\" src={coronaIcon} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"textCard\"> Počet nakazených</div>\r\n                    </div>\r\n                    <div className=\"mainText\">\r\n                        {FormatNum(mainData[0])}\r\n                        <div className=\"aktiveNakazenych\">\r\n                            <span>Počet aktívnych prípadov:</span> {FormatNum(mainData[0] - mainData[1] - mainData[2])}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <div className=\"cards\">\r\n                    <div className=\"topCard\">\r\n                        <div className=\"obrDiv\">\r\n                            <div className=\"circle HP\">\r\n                                <FaPlusCircle color={\"green\"} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"textCard\"> Počet vyliečených</div>\r\n                    </div>\r\n                    <div className=\"mainText\">\r\n                        {FormatNum(mainData[1])}\r\n                        {numberTrans3(mainData[0], mainData[1])}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"cards\">\r\n                    <div className=\"topCard\">\r\n                        <div className=\"obrDiv\">\r\n                            <div className=\"circle skull\">\r\n                                <GiDeathSkull color={\"white\"} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"textCard\"> Počet úmrtí</div>\r\n                    </div>\r\n                    <div className=\"mainText\">\r\n                        {FormatNum(mainData[2])}\r\n                        {numberTrans3(mainData[0], mainData[2])}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <br></br>\r\n            <br></br>\r\n\r\n            <div className=\"slovenskeUdaje\"><Link to='/Covid/CovidSK'>Slovenské údaje</Link></div>\r\n            <br></br><br></br>\r\n\r\n            <CovidTable countriesData={countriesData} sortBy={sortBy} />\r\n\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default CovidApp\r\n","import React, { useState, useEffect } from 'react'\r\nimport CountUp from 'react-countup'\r\nimport styled, { keyframes } from \"styled-components\";\r\nimport './covid.css'\r\nimport './tooltip.css'\r\nimport coronaIcon from \"../imgs/coronaIcon.svg\"\r\n\r\nfunction CovidSK() {\r\n    const [dataSvk, setDataSvk] = useState()\r\n    const svk = 'https://mapa.covid.chat/map_data'\r\n\r\n    useEffect(() => {\r\n        LoadData()\r\n    }, [])\r\n\r\n    const negatTestyMoje = [83, 102, 50, 42, 120, 129, 118, 197, 228]\r\n    const LoadData = async () => {\r\n        const response = await fetch(svk)\r\n        const data = await response.json()\r\n        setDataSvk([data])\r\n    }\r\n\r\n    function handleData() {\r\n        let a = dataSvk[0].chart[Object.keys(dataSvk[0].tested_chart).length].recovered\r\n        let b = dataSvk[0].chart[Object.keys(dataSvk[0].tested_chart).length-1].recovered\r\n        let c = a - b\r\n        let newRecovered = 0\r\n        if(c > 0) {\r\n            newRecovered = a-b\r\n        }\r\n\r\n         a = dataSvk[0].chart[Object.keys(dataSvk[0].tested_chart).length].recovered\r\n         b = dataSvk[0].chart[Object.keys(dataSvk[0].tested_chart).length-1].recovered\r\n         c = a - b\r\n        let newDeaths = 0\r\n        if(c > 0) {\r\n            newDeaths = a-b\r\n        }\r\n\r\n\r\n        console.log(dataSvk[0])\r\n        return (\r\n            <div>\r\n                <div className=\"cardsDiv\">\r\n                    <div className=\"cards cardsSVK\">\r\n                        <div className=\"topCard\">\r\n                            <div className=\"obrDiv\">\r\n                                <div className=\"circle\">\r\n                                    <img alt=\"\" src={coronaIcon} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"textCard\"><b>Slovenské údaje</b></div>\r\n                        </div>\r\n                        <div className=\"mainTextSK\">\r\n                                Počet testovaných: {dataSvk[0].tested}<br />\r\n                                Počet negatívnych testov: {dataSvk[0].tested - dataSvk[0].infected}<br />\r\n                                Počet pozitívnych testov: {dataSvk[0].infected}<br />\r\n                                Počet vyliečených: {dataSvk[0].recovered}<br />\r\n                                { dataSvk[0].deaths > 0 ? <>Počet úmrtií: {dataSvk[0].deaths}<br /></>\r\n                                : null } \r\n                            </div>\r\n                    </div>\r\n\r\n\r\n                    <div className=\"cards cardsSVK\">\r\n                        <div className=\"topCard\">\r\n                        <div className=\"textCard\"><b>Údaje za posledný deň</b></div>\r\n                        </div>\r\n                        <div className=\"mainTextSK\">\r\n                                Počet nových testovaných: <span>{dataSvk[0].tested_chart[Object.keys(dataSvk[0].tested_chart).length-1].tested}</span><br />\r\n                                Počet negatívnych testov: <span>{dataSvk[0].tested_chart[Object.keys(dataSvk[0].tested_chart).length-1].tested - dataSvk[0].tested_chart[Object.keys(dataSvk[0].tested_chart).length-1].infected}</span><br />\r\n                                Počet pozitívnych testov: <span>+{dataSvk[0].tested_chart[Object.keys(dataSvk[0].tested_chart).length-1].infected}</span>\r\n                                {\r\n                                    newRecovered > 0 ? \r\n                                    <> <br />Počet nových vyliečených: {newRecovered}<br /></>\r\n                                    : null\r\n                                }\r\n                                {\r\n                                    newDeaths > 0 ? \r\n                                    <> Počet nových úmrtí: {newDeaths}<br /></>\r\n                                    : null\r\n                                }\r\n                            </div>\r\n                    </div>\r\n\r\n             \r\n                </div>\r\n\r\n\r\n\r\n                \r\n            </div>\r\n        )\r\n    }\r\n    const Heading = keyframes`\r\n    0%{\r\n        height: 0%;\r\n      }\r\n      100%{\r\n        height: 100%;\r\n      }\r\n    `;\r\n\r\n    const HomeHeader = styled.div`\r\n    height: 100%;\r\n    animation: ${Heading} 2s;\r\n    bottom: 0;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-evenly;\r\n    `;\r\n\r\n    function handleGraph1() {\r\n        const MaxInfected = 100 / dataSvk[0].chart[Object.keys(dataSvk[0].chart).length - 1].infected\r\n        return (\r\n            <div className=\"outsideDivGraf\">\r\n                <div className=\"svkGraf\">\r\n\r\n                {/* <div className=\"tooltip\">Hover over me\r\n                        <div className=\"tooltiptext\">Tooltip text</div>\r\n                        </div> */}\r\n\r\n\r\n                    {\r\n                        dataSvk[0].chart.map((day1, index) =>\r\n                            <HomeHeader key={index}>\r\n                                <div className=\"stlpcePrvehoGrafu tooltip\" style={{ height: `calc(${MaxInfected * day1.infected}% )` }} >\r\n                                    <CountUp className=\"CountPrvehoGrafu\" end={parseInt(day1.infected)} />\r\n                                    {dataSvk[0].tested_chart[index - 1]\r\n                                        ?<> <CountUp className=\"countupFirstRed\" prefix=\"+\" end={parseInt(dataSvk[0].tested_chart[index - 1].infected)} />\r\n                    {/* <div className=\"tooltiptext\">Počet nakazených: {day1.infected} <br />Počet nových nakazených: {dataSvk[0].tested_chart[index - 1].infected}</div> */}\r\n</>\r\n                                        : <><CountUp className=\"countupFirstRed\" prefix=\"+\" end={1} />\r\n                                         </>}\r\n                                    <div className=\"spanDate\">{day1.date}</div>\r\n                                </div>\r\n                            </HomeHeader>\r\n                        )\r\n                    }\r\n                </div>\r\n                <div className=\"medzeraPodDatumomGraf1\"></div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function handleGraph2() {\r\n        let MaxDaily = 0\r\n        if (dataSvk) {\r\n            dataSvk[0].tested_chart.map(pom1 => {\r\n                if (pom1.tested > MaxDaily) {\r\n                    MaxDaily = pom1.tested - pom1.infected\r\n                }\r\n            })\r\n            MaxDaily = MaxDaily / 100\r\n        }\r\n        return (\r\n            <div className=\"outsideDivGraf\">\r\n                <div className=\"svkGraf\">\r\n                    <div className=\"testDElete\"  ></div>\r\n\r\n                    {<HomeHeader >  {/* prvy stlpec pre druhy graf */}\r\n                        <div className=\"PozitivneTestyDruhyGraf\" style={{ height: ` 3px` }} >\r\n                            \r\n                            <div className=\"spanDate\">{\"06-03-2020\"}</div>\r\n                        </div>\r\n                        <div className=\"dayX2 dayX2pom\" style={{ height: `calc(${306 / MaxDaily}% + 3px)` }} >\r\n                            <CountUp className=\"countupX2 CountDruhehoGrafu\" end={306} />\r\n                            <CountUp className=\"countup CountDruhehoGrafu nakazeniZaDen\" prefix=\"+\"  end={1} />\r\n                        </div>\r\n                    </HomeHeader>}\r\n\r\n                    {dataSvk[0].tested_chart.map((day1, index) =>\r\n                        <HomeHeader key={index}>\r\n                            {\r\n                                <>\r\n                                    {day1.infected === 0\r\n                                        ?\r\n                                        <div className=\"PozitivneTestyDruhyGraf\"  >\r\n                                            {/* <CountUp className=\"countup2 CountDruhehoGrafu \" end={day1.infected} /> */}\r\n                                            <div className=\"spanDate\">{day1.date}</div>\r\n                                        </div>\r\n                                        :\r\n                                        <div className=\"PozitivneTestyDruhyGraf\" style={{ height: `calc(${(day1.infected) / MaxDaily}% + 3px)` }} >\r\n                                            <div className=\"spanDate\">{day1.date}</div>\r\n                                        </div>\r\n                                    }\r\n                                    {\r\n                                        negatTestyMoje[index]\r\n                                            ?\r\n                                            <div className=\"dayX2\" style={{ height: `calc(${negatTestyMoje[index] / MaxDaily}% + 3px)` }} >\r\n                                                {(negatTestyMoje[index] > 99) ? <>\r\n                                                    <CountUp className=\"countupX2 CountDruhehoGrafu\" end={negatTestyMoje[index]} style={{ marginLeft: '-2px' }} />\r\n                                                    <CountUp className=\"countup2 CountDruhehoGrafu nakazeniZaDen\" prefix=\"+\" end={day1.infected} />\r\n                                                </>\r\n                                                    : <>\r\n                                                        <CountUp className=\"countupX2 CountDruhehoGrafu\" end={negatTestyMoje[index]} />\r\n                                                        <CountUp className=\"countup2 CountDruhehoGrafu nakazeniZaDen\" prefix=\"+\" end={day1.infected} />\r\n                                                    </>\r\n                                                }\r\n                                            </div>\r\n                                            : <div className=\"dayX2\" style={{ height: `calc(${day1.tested / MaxDaily}% + 3px)` }} >\r\n                                                <CountUp className=\"countupX2 CountDruhehoGrafu\" end={day1.tested - day1.infected} />\r\n                                                <CountUp className=\"countup2 CountDruhehoGrafu nakazeniZaDen\" prefix=\"+\" end={day1.infected} />\r\n                                            </div>\r\n                                    }\r\n                                </>\r\n                            }\r\n                        </HomeHeader>\r\n                    )}\r\n                </div>\r\n                <div className=\"vysvetlivkyPodGrafom\">\r\n                    <div><div className=\"blue\"></div>Počet negatívnych testov</div>\r\n                    <div><div className=\"red\"></div>Počet pozitívnych testov</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"covidApp\">\r\n            {\r\n                dataSvk\r\n                    ? <>\r\n                        {handleData()}\r\n                      \r\n                        {/* <div className=\"tooltip\">Hover over me\r\n                        <div className=\"tooltiptext\">Tooltip text</div>\r\n                        </div> */}\r\n\r\n      \r\n                        {handleGraph1()}\r\n                        {handleGraph2()}\r\n                    </>\r\n                    : ''\r\n\r\n\r\n            }\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default CovidSK\r\n","import React from 'react';\nimport './App.css';\nimport Nav from './Nav';\n\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom'\n// import MainIndex from './mainIndex';\nimport CovidApp from './Covid/CovidApp';\nimport CovidSK from './Covid/CovidSK';\n\nfunction App() {\n\n\n  return (\n    <Router basename=\"/\">\n      <div className=\"App\">\n        <Nav />\n        <Switch>\n          <Route path=\"/\" component={Home} exact />\n          <Route path=\"/Covid/CovidApp\" component={CovidApp} />\n          <Route path=\"/Covid/CovidSK\" component={CovidSK} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nconst Home = () => (\n  <div>\n    <CovidSK />\n  </div>\n)\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}