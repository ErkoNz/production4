{"version":3,"sources":["Nav.js","Covid/FormatNumber.js","Covid/PrvyRiadokTabulky.js","Covid/SvetTabulka.js","Covid/DougnatChart.js","Covid/CovidApp.js","Covid/CompareCislo.js","Covid/TabulkaMesta.js","Covid/CovidSK.js","App.js","index.js","imgs/coronaIcon.svg","imgs/wideArrow.svg","imgs/earth.svg","imgs/slovakiaIcon.svg"],"names":["Nav","navStyle","color","className","style","to","alt","src","earthIcon","slovakiaIcon","FormatNumber","num","prop","toString","replace","PrvyRiadokTabulky","props","useState","dataKontinenty","setDataKontinenty","doTabulkyPrvyRiadok","setDoTabulkyPrvyRiadok","sipkyDole","setSipkyDole","transition","marginBottom","marginLeft","sipkaKontinenty","setSipkaKontinenty","position","left","styleForRollDown","setStyleForRollDown","useEffect","axios","get","then","res","data","result","filter","obj","continent","kontinent","mainData","console","log","key","background","width","onClick","transform","tests","cases","active","todayCases","deaths","fontWeight","todayDeaths","recovered","map","oneKontinent","id","SvetTabulka","ikonka","setIkonka","setKontinent","scrollPerformance","setScrollPerformance","zmenIkonku","myStyle2","window","addEventListener","document","querySelector","getBoundingClientRect","y","greenBackgroundforTR","type","onKeyUp","tr","td","i","getElementById","value","toUpperCase","getElementsByTagName","length","textContent","innerText","indexOf","display","placeholder","prevKontinent","sortBy","countriesData","item","country","textDecoration","htmlFor","DougnatChart","labels","datasets","label","dataForGraph","backgroundColor","height","options","maintainAspectRatio","animation","duration","easing","CovidApp","setMainData","doughnatData","setDoughnatData","setCountriesData","direction","price_usd","state","setState","numberTrans3","a","b","output","toFixed","fetch","response1","json","data1","response","sort","parseFloat","fetchData","coronaIcon","CompareCislo","sorting","stlpec","A","amount","B","JSON","parse","localStorage","getItem","infected_delta","infected","TabulkaMesta","tabulkaData","setSorting","ShowHide","setShowHide","boolean","text","textPreZobrazenieObci","setTextPreZobrazenieObci","sipkaObce","setSipkaObce","handleSortObce","setItem","stringify","s","jednaObec","index","title","CovidSK","dataSvk","setDataSvk","maxDate","setMaxDate","maxDateboolLean","setMaxDateboolLean","stav","styling","grafNegativneTesty","setGrafNegativneTesty","styleWideArrow","setStyleWideArrow","Object","keys","chart","LoadData","negatTestyMoje","Heading","keyframes","HomeHeader","styled","div","changeWideArrow","negatTesty","tested_chart","c","newRecovered","newDeaths","tested","lastDay","day","GetTheDay","handleData","districts","maxAktivnychInfikovanych","day1","MaxInfected","wideArrow","date","handleGraphAktivnePripady","handleGraph1","MaxDaily","pom1","handleGraph2","App","basename","path","component","exact","ReactDOM","render","module","exports"],"mappings":"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","file":"static/js/main.835df64d.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport './nav.css'\r\nimport earthIcon from \"./imgs/earth.svg\"\r\nimport slovakiaIcon from \"./imgs/slovakiaIcon.svg\"\r\n\r\nfunction Nav() {\r\n\r\n    let navStyle = {\r\n        color: 'white',\r\n    }\r\n\r\n    // function doubleClickFC() {\r\n    //     window.location.href = \"#/Todo\"\r\n    // }\r\n\r\n    return (\r\n        <nav className=\"navApp\" >\r\n            {/* <div className=\"doubleClick\" onClick={doubleClickFC}></div> */}\r\n            <ul className=\"navLinks\">\r\n                <li>\r\n                    <Link style={navStyle} to='/Covid/CovidApp'>\r\n                        <div>\r\n                            <img alt=\"\" src={earthIcon} className=\"earthIcon\" />Covid vo svete\r\n                        </div>\r\n                    </Link>\r\n                </li>\r\n                <li>\r\n                    <Link style={navStyle} to='/Covid/CovidSK'>\r\n                        <div>\r\n                            <img alt=\"\" src={slovakiaIcon} className=\"svkIcon\" />Covid na Slovensku\r\n                        </div>\r\n                    </Link>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","function FormatNumber(num) {\r\n    if (num && num.prop > 999) {\r\n        return num.prop.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \")\r\n    }\r\n    else if (num) { return num.prop }\r\n    else { return null }\r\n}\r\n\r\nexport default FormatNumber\r\n","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport FormatNumber from './FormatNumber'\r\nimport { IoIosArrowUp } from 'react-icons/io';\r\n\r\nfunction PrvyRiadokTabulky(props) {\r\n    // console.log(props)\r\n    const [dataKontinenty, setDataKontinenty] = useState()\r\n    const [doTabulkyPrvyRiadok, setDoTabulkyPrvyRiadok] = useState()\r\n    const [sipkyDole, setSipkyDole] = useState(true)\r\n    const [sipkaKontinenty, setSipkaKontinenty] = useState({\r\n        transition: 'all .2s ease-in',\r\n        marginBottom: '-3px',\r\n        marginLeft: '3px',\r\n    })\r\n    const [styleForRollDown, setStyleForRollDown] = useState({\r\n        position: 'absolute',\r\n        left: '-1000px',\r\n        transition: 'all .2s ease-in',\r\n        // fontSize: '15px',\r\n    })\r\n\r\n    useEffect(() => {\r\n        axios.get(`https://disease.sh/v2/continents`)\r\n            .then(res => {\r\n                setDataKontinenty([res.data])\r\n            })\r\n\r\n        // const fetchData = async () => {\r\n        //     let result = await fetch(\"https://disease.sh/v2/continents\");\r\n        //     let response = await result.json();\r\n        //     setDataKontinenty([response]);\r\n        // };\r\n        // fetchData();\r\n\r\n        // console.log(pom1)\r\n        // if (pom1) {\r\n        //     let result = pom1.filter(obj => {\r\n        //         return obj.continent === props.kontinent\r\n        //     })\r\n        //     console.log(result[0])\r\n        //     setDoTabulkyPrvyRiadok(result[0])\r\n        //     console.log(\"asdasdasdasdadadadadasd\")\r\n        // }\r\n\r\n        if (dataKontinenty) {\r\n            let result = dataKontinenty[0].filter(obj => {\r\n                return obj.continent === props.kontinent\r\n            })\r\n            setDoTabulkyPrvyRiadok(result[0])\r\n        }\r\n    }, [props.kontinent])\r\n\r\n\r\n    const rollDownContintinents = () => {\r\n        setSipkyDole(!sipkyDole)\r\n        if (sipkyDole) {\r\n            setSipkaKontinenty({\r\n                transform: \"rotate(180deg)\",\r\n                transition: 'all .2s ease-in',\r\n                marginBottom: '-3px',\r\n                marginLeft: '3px',\r\n            })\r\n            setStyleForRollDown({\r\n                // background: 'rgb(234, 234, 234)',\r\n                // fontSize: '15px',\r\n                transition: 'all .2s ease-in',\r\n            })\r\n        }\r\n        else {\r\n            setStyleForRollDown({\r\n                position: 'absolute',\r\n                left: '-1000px',\r\n                transition: 'all .2s ease-in',\r\n                // fontSize: '15px',\r\n            })\r\n\r\n            setSipkaKontinenty({\r\n                transform: \"rotate(0deg)\",\r\n                transition: 'all .2s ease-in',\r\n                marginBottom: '-3px',\r\n                marginLeft: '3px',\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        styleForRollDown && dataKontinenty && sipkaKontinenty && styleForRollDown && props.mainData && props ?\r\n            <>\r\n                {console.log(\"PrvyRiadokTabulky\")}\r\n                {/* {console.log(styleForRollDown, dataKontinenty, sipkaKontinenty, styleForRollDown, props.mainData, props)} */}\r\n                {props.kontinent === \"Svet\" ?\r\n                    <>\r\n                        <tr key={-1} style={{ background: 'rgb(234, 234, 234)' }} >\r\n                            <td style={{ width: '100px' }}\r\n                                onClick={rollDownContintinents}>\r\n                                Celý Svet <IoIosArrowUp style={sipkaKontinenty} />\r\n                                <div className=\"firstCase\">Počet testov: <div className=\"firstCaseNumber\"><FormatNumber prop={props.mainData[0].tests} /></div></div>\r\n                            </td>\r\n                            <td><FormatNumber prop={props.mainData[0].cases} /></td>\r\n                            <td><FormatNumber prop={props.mainData[0].active} /></td>\r\n                            <td style={{ background: ' rgb(254, 255, 194, .4)' }}>+<FormatNumber prop={props.mainData[0].todayCases} /></td>\r\n                            <td><FormatNumber prop={props.mainData[0].deaths} /></td>\r\n                            <td style={{ color: ' rgba(156, 20, 20, 0.849)', fontWeight: 'bold' }}>+<FormatNumber prop={props.mainData[0].todayDeaths} /></td>\r\n                            <td style={{ fontWeight: 'bold', color: '#006600' }}><FormatNumber prop={props.mainData[0].recovered} /></td>\r\n                        </tr>\r\n                        {\r\n                            dataKontinenty[0].map((oneKontinent, id) => (\r\n                                <tr key={id} className=\"zrolovaneKontinenty\" style={styleForRollDown} >\r\n                                    <td style={{ width: '100px' }}>\r\n                                        {oneKontinent.continent}\r\n                                        <div className=\"firstCase\">Počet testov: <div className=\"firstCaseNumber\"><FormatNumber prop={oneKontinent.tests} /></div></div>\r\n                                    </td>\r\n                                    <td><FormatNumber prop={oneKontinent.cases} /></td>\r\n                                    <td><FormatNumber prop={oneKontinent.active} /></td>\r\n                                    <td style={{ background: ' rgb(254, 255, 194, .4)' }}>+<FormatNumber prop={oneKontinent.todayCases} /></td>\r\n                                    <td><FormatNumber prop={oneKontinent.deaths} /></td>\r\n                                    <td style={{ color: ' rgba(156, 20, 20, 0.849)', fontWeight: 'bold' }}>+<FormatNumber prop={oneKontinent.todayDeaths} /></td>\r\n                                    <td style={{ fontWeight: 'bold', color: '#006600' }}><FormatNumber prop={oneKontinent.recovered} /></td>\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                    </>\r\n                    :\r\n                    <>\r\n                        {doTabulkyPrvyRiadok ?\r\n                            <tr key={-10} style={{ background: 'rgb(234, 234, 234)' }} >\r\n                                <td style={{ width: '100px' }}>\r\n                                    {doTabulkyPrvyRiadok.continent}\r\n                                    <div className=\"firstCase\">Počet testov: <div className=\"firstCaseNumber\"><FormatNumber prop={doTabulkyPrvyRiadok.tests} /></div></div>\r\n                                </td>\r\n                                <td><FormatNumber prop={doTabulkyPrvyRiadok.cases} /></td>\r\n                                <td><FormatNumber prop={doTabulkyPrvyRiadok.active} /></td>\r\n                                <td style={{ background: ' rgb(254, 255, 194, .4)' }}>+<FormatNumber prop={doTabulkyPrvyRiadok.todayCases} /></td>\r\n                                <td><FormatNumber prop={doTabulkyPrvyRiadok.deaths} /></td>\r\n                                <td style={{ color: ' rgba(156, 20, 20, 0.849)', fontWeight: 'bold' }}>+<FormatNumber prop={doTabulkyPrvyRiadok.todayDeaths} /></td>\r\n                                <td style={{ fontWeight: 'bold', color: '#006600' }}><FormatNumber prop={doTabulkyPrvyRiadok.recovered} /></td>\r\n                            </tr>\r\n                            : null}\r\n                    </>\r\n                }\r\n            </>\r\n            : null\r\n    )\r\n}\r\n\r\nexport default PrvyRiadokTabulky\r\n","import React, { useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { FaSortAmountDown } from 'react-icons/fa';\r\nimport PrvyRiadokTabulky from './PrvyRiadokTabulky';\r\nimport FormatNumber from './FormatNumber'\r\nimport './css/TabulkaSvet.css'\r\n\r\n\r\nfunction SvetTabulka(props) {\r\n    const [ikonka, setIkonka] = useState('cases')\r\n    const [kontinent, setKontinent] = useState(\"Svet\")\r\n    const [scrollPerformance, setScrollPerformance] = useState(false)\r\n\r\n    function zmenIkonku(key) {\r\n        if (key === ikonka) {\r\n            setIkonka(key + \"2\")\r\n        }\r\n        else { setIkonka(key) }\r\n    }\r\n\r\n    const myStyle2 = {\r\n        transform: \"rotateX(180deg)\",\r\n    }\r\n\r\n    // useEffect(() => {\r\n    //     axios.get(`https://disease.sh/v2/continents`)\r\n    //         .then(res => {\r\n    //             setDataKontinenty([res.data])\r\n    //             // console.log(res.data)\r\n    //         })\r\n    // }, [])\r\n\r\n\r\n    const myFunction = () => {\r\n        var input, filter, table, tr, td, i, txtValue;\r\n        input = document.getElementById(\"myInput\");\r\n        filter = input.value.toUpperCase();\r\n        table = document.getElementById(\"myTable\");\r\n        tr = table.getElementsByTagName(\"tr\");\r\n        for (i = 0; i < tr.length; i++) {\r\n            td = tr[i].getElementsByTagName(\"td\")[0];\r\n            if (td) {\r\n                txtValue = td.textContent || td.innerText;\r\n                if (txtValue.toUpperCase().indexOf(filter) > -1) {\r\n                    tr[i].style.display = \"\";\r\n                } else {\r\n                    tr[i].style.display = \"none\";\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    window.addEventListener('scroll', function () {\r\n        if (document.querySelector('.scrollingSvet')) {\r\n            if (document.querySelector('.scrollingSvet').getBoundingClientRect().y < 170)\r\n                setScrollPerformance(true)\r\n        }\r\n    });\r\n\r\n    const greenBackgroundforTR = (active) => {\r\n        if (active)\r\n            return null\r\n        else\r\n            return ({ background: 'rgb(190, 245, 204)' })\r\n    }\r\n\r\n    return (\r\n        ikonka && kontinent && props ?\r\n            <>\r\n                {console.log(\"svetTabulka\")}\r\n                <input type=\"text\" id=\"myInput\" onKeyUp={myFunction} placeholder=\"Hľadať..\" className=\"inputSearch\" />\r\n                <div className=\"kontinenty\">\r\n                    <button onClick={() => setKontinent(prevKontinent => { return \"Svet\" })}>\r\n                        Svet\r\n                </button>\r\n                    <button onClick={() => setKontinent(prevKontinent => { return \"Europe\" })}>\r\n                        Európa\r\n                </button>\r\n                    <button onClick={() => setKontinent(prevKontinent => { return \"North America\" })}>\r\n                        Severná Amerika\r\n                </button>\r\n                    <button onClick={() => setKontinent(prevKontinent => { return \"Asia\" })}>\r\n                        Ázia\r\n                </button>\r\n                    <button onClick={() => setKontinent(prevKontinent => { return \"South America\" })}>\r\n                        Južná Amerika\r\n                </button>\r\n                    <button onClick={() => setKontinent(prevKontinent => { return \"Africa\" })}>\r\n                        Afrika\r\n                </button>\r\n                    <button onClick={() => setKontinent(prevKontinent => { return \"Australia/Oceania\" })}>\r\n                        Austrália/Oceánia\r\n                </button>\r\n                </div>\r\n                <div className=\"divTable\" >\r\n                    <table id=\"myTable\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th onClick={() => (props.sortBy(\"tests\") || zmenIkonku(\"tests\"))} >\r\n                                    Krajina\r\n                            {ikonka === \"tests\"\r\n                                        ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                    {ikonka === \"tests2\"\r\n                                        ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                </th>\r\n                                <th onClick={() => (props.sortBy('cases') || zmenIkonku('cases'))} >\r\n                                    Počet nakazených\r\n                            {ikonka === \"cases\"\r\n                                        ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                    {ikonka === \"cases2\"\r\n                                        ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                </th>\r\n                                <th onClick={() => (props.sortBy(\"active\") || zmenIkonku(\"active\"))} >\r\n                                    Aktívne prípady\r\n                            {ikonka === \"active\"\r\n                                        ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                    {ikonka === \"active2\"\r\n                                        ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                </th>\r\n                                <th onClick={() => (props.sortBy(\"todayCases\") || zmenIkonku(\"todayCases\"))} >\r\n                                    Nové prípady\r\n                            {ikonka === \"todayCases\"\r\n                                        ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                    {ikonka === \"todayCases2\"\r\n                                        ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                </th>\r\n                                <th onClick={() => (props.sortBy(\"deaths\") || zmenIkonku(\"deaths\"))} >\r\n                                    Počet úmrtí\r\n                            {ikonka === \"deaths\"\r\n                                        ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                    {ikonka === \"deaths2\"\r\n                                        ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                </th>\r\n                                <th onClick={() => (props.sortBy(\"todayDeaths\") || zmenIkonku(\"todayDeaths\"))} >\r\n                                    Nové úmrtia\r\n                            {ikonka === \"todayDeaths\"\r\n                                        ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                    {ikonka === \"todayDeaths2\"\r\n                                        ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                </th>\r\n                                <th onClick={() => (props.sortBy(\"recovered\") || zmenIkonku(\"recovered\"))} >\r\n                                    Počet vyliečených\r\n                            {ikonka === \"recovered\"\r\n                                        ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                    {ikonka === \"recovered2\"\r\n                                        ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {console.log(\"tbodyyyy\")}\r\n\r\n                            <PrvyRiadokTabulky kontinent={kontinent} mainData={props.mainData} />\r\n\r\n                            {kontinent === \"Svet\" ?\r\n                                <>\r\n                                    {props.countriesData.map((item, id) => (\r\n                                        scrollPerformance || id < 20 ?\r\n                                            <tr className=\"scrollingSvet\" key={id} style={greenBackgroundforTR(item.active)}>\r\n                                                <td style={{ width: '100px' }}>{item.country}\r\n                                                    {item.tests > 0 ?\r\n                                                        <div className=\"firstCase\">Počet testov:\r\n                                        <div className=\"firstCaseNumber\">\r\n                                                                <FormatNumber prop={item.tests} />\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        : null}\r\n                                                </td>\r\n                                                <td><FormatNumber prop={item.cases} /></td>\r\n                                                <td>{item.active ? <FormatNumber prop={item.active} /> : \"0\"}</td>\r\n\r\n                                                {item.todayCases > 0 ?\r\n                                                    <td style={{ background: ' rgb(254, 255, 194)' }}>+<FormatNumber prop={item.todayCases} /> </td>\r\n                                                    : <td></td>\r\n                                                }\r\n                                                <td><FormatNumber prop={item.deaths} /></td>\r\n                                                {item.todayDeaths > 0 ?\r\n                                                    <td style={{ color: ' rgba(156, 20, 20, 0.849)', fontWeight: 'bold' }}>+<FormatNumber prop={item.todayDeaths} /> </td>\r\n                                                    : <td></td>\r\n                                                }\r\n                                                <td style={{ fontWeight: 'bold', color: '#006600' }}><FormatNumber prop={item.recovered} /></td>\r\n                                            </tr>\r\n                                            : null\r\n                                    ))\r\n                                    }\r\n                                </>\r\n                                :\r\n                                props.countriesData.map((item, id) => (\r\n                                    item.continent === kontinent ?\r\n                                        <tr key={id} style={greenBackgroundforTR(item.active)}>\r\n                                            <td style={{ width: '100px' }}>\r\n                                                {item.country === 'Slovakia' ?\r\n                                                    <div style={{ fontWeight: 'bold', textDecoration: 'underline' }}>\r\n                                                        <Link to='/Covid/CovidSK'>{item.country}</Link>\r\n                                                    </div>\r\n                                                    : item.country\r\n                                                }\r\n                                                {item.tests > 0 ?\r\n                                                    <div className=\"firstCase\">Počet testov:\r\n                                                    <div className=\"firstCaseNumber\">\r\n                                                            <FormatNumber prop={item.tests} />\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    : null}\r\n                                            </td>\r\n                                            <td><FormatNumber prop={item.cases} /></td>\r\n                                            <td>{item.active ? <FormatNumber prop={item.active} /> : \"0\"}</td>\r\n                                            {item.todayCases > 0 ?\r\n                                                <td style={{ background: ' rgb(254, 255, 194)' }}>+<FormatNumber prop={item.todayCases} /> </td>\r\n                                                : <td></td>\r\n                                            }\r\n                                            <td><FormatNumber prop={item.deaths} /></td>\r\n                                            {item.todayDeaths > 0 ?\r\n                                                <td style={{ color: ' rgba(156, 20, 20, 0.849)', fontWeight: 'bold' }}>+<FormatNumber prop={item.todayDeaths} /> </td>\r\n                                                : <td></td>\r\n                                            }\r\n                                            <td style={{ fontWeight: 'bold', color: 'green' }}><FormatNumber prop={item.recovered} /></td>\r\n                                        </tr>\r\n                                        : null\r\n                                ))\r\n                            }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                            {/* {\r\n                        props.countriesData.map((item, id) => (\r\n                            <>\r\n                                {item.continent === kontinent ?\r\n                            <tr key={id} style={greenBackgroundforTR(item.active)}>\r\n                                <td style={{ width: '100px' }}>\r\n                                    {item.country === 'Slovakia' ?\r\n                                        <div style={{ fontWeight: 'bold', textDecoration: 'underline' }}>\r\n                                            <Link to='/Covid/CovidSK'>{item.country}</Link>\r\n                                        </div>\r\n                                        : item.country\r\n                                    }\r\n                                    {item.tests > 0 ?\r\n                                        <div className=\"firstCase\">Počet testov:\r\n                                                    <div className=\"firstCaseNumber\">\r\n                                                <FormatNumber prop={item.tests} />\r\n                                            </div>\r\n                                        </div>\r\n                                        : null}\r\n                                </td>\r\n                                <td><FormatNumber prop={item.cases} /></td>\r\n                                <td>{item.active ? <FormatNumber prop={item.active} /> : \"0\"}</td>\r\n                                {item.todayCases > 0 ?\r\n                                    <td style={{ background: ' rgb(254, 255, 194)' }}>+<FormatNumber prop={item.todayCases} /> </td>\r\n                                    : <td></td>\r\n                                }\r\n                                <td><FormatNumber prop={item.deaths} /></td>\r\n                                {item.todayDeaths > 0 ?\r\n                                    <td style={{ color: ' rgba(156, 20, 20, 0.849)', fontWeight: 'bold' }}>+<FormatNumber prop={item.todayDeaths} /> </td>\r\n                                    : <td></td>\r\n                                }\r\n                                <td style={{ fontWeight: 'bold', color: 'green' }}><FormatNumber prop={item.recovered} /></td>\r\n                            </tr>\r\n                                    :\r\n                                    kontinent === \"Svet\" ?\r\n                            <tr key={id} style={greenBackgroundforTR(item.active)}>\r\n                                <td style={{ width: '100px' }}>\r\n                                    {item.country === 'Slovakia' ?\r\n                                        <div style={{ fontWeight: 'bold', textDecoration: 'underline' }}>\r\n                                            <Link to='/Covid/CovidSK'>{item.country}</Link>\r\n                                        </div>\r\n                                        : item.country\r\n                                    }\r\n                                    {item.tests > 0 ?\r\n                                        <div className=\"firstCase\">Počet testov:\r\n                                                    <div className=\"firstCaseNumber\">\r\n                                                <FormatNumber prop={item.tests} />\r\n                                            </div>\r\n                                        </div>\r\n                                        : null}\r\n                                </td>\r\n\r\n                                <td><FormatNumber prop={item.cases} /></td>\r\n                                <td>{item.active ? <FormatNumber prop={item.active} /> : \"0\"}</td>\r\n\r\n                                {item.todayCases > 0 ?\r\n                                    <td style={{ background: ' rgb(254, 255, 194)' }}>+<FormatNumber prop={item.todayCases} /> </td>\r\n                                    : <td></td>\r\n                                }\r\n                                <td><FormatNumber prop={item.deaths} /></td>\r\n                                {item.todayDeaths > 0 ?\r\n                                    <td style={{ color: ' rgba(156, 20, 20, 0.849)', fontWeight: 'bold' }}>+<FormatNumber prop={item.todayDeaths} /> </td>\r\n                                    : <td></td>\r\n                                }\r\n                                <td style={{ fontWeight: 'bold', color: 'green' }}><FormatNumber prop={item.recovered} /></td>\r\n                            </tr>\r\n                            : null\r\n                                }\r\n                            </>\r\n                        ))} */}\r\n                        </tbody>\r\n                    </table>\r\n                    <label htmlFor=\"myInput\">.</label>\r\n                </div>\r\n            </>\r\n            : null\r\n    )\r\n}\r\n\r\nexport default SvetTabulka","import React from 'react'\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport './css/csspreSvk.css'\r\nfunction DougnatChart(props) {\r\n    const data = {\r\n        labels: ['Nakazení', 'Vyliečení', 'Úmrtia'],\r\n        datasets: [{\r\n            label: '# of Votes',\r\n            data: props.dataForGraph,\r\n            backgroundColor: [\r\n                '#f85959',\r\n                '#17b978',\r\n                '#430d27',\r\n            ],\r\n        }]\r\n    }\r\n\r\n    // const data = {\r\n    //     labels: props.dataForGraph.labels,\r\n    //     datasets: [{\r\n    //         label: '# of Votes',\r\n    //         data: props.dataForGraph.data,\r\n    //         backgroundColor: props.dataForGraph.backgroundColor,\r\n    //     }]\r\n    // }\r\n\r\n    // const data = {\r\n    //     labels: ['Nakazení', 'Vyliečení'],\r\n    //     datasets: [{\r\n    //         label: '# of Votes',\r\n    //         data: [10, 20],\r\n    //         backgroundColor: ['red', 'blue'],\r\n    //     }]\r\n    // }\r\n\r\n\r\n    return (\r\n        props && data ?\r\n            <div>\r\n                {console.log(\"DougnatChart\")}\r\n\r\n                <div className=\"dougnut\">\r\n                    <Doughnut\r\n                        data={data}\r\n                        height={300}\r\n                        options={{\r\n                            maintainAspectRatio: false,\r\n                            animation: { duration: 2000, easing: 'easeOutQuint' }\r\n                        }}\r\n                    />\r\n\r\n\r\n                </div>\r\n\r\n            </div>\r\n            : null\r\n    )\r\n}\r\n\r\nexport default DougnatChart\r\n","import React, { useState, useEffect } from 'react'\r\nimport './css/covid.css'\r\nimport './css/covidDesign.css'\r\nimport { Link } from 'react-router-dom'\r\nimport coronaIcon from \"../imgs/coronaIcon.svg\"\r\n// import CovidTable from \"./CovidTable\"\r\nimport SvetTabulka from \"./SvetTabulka\"\r\nimport { GiDeathSkull } from \"react-icons/gi\";\r\nimport { AiOutlineDoubleRight } from \"react-icons/ai\";\r\nimport { FaPlusCircle } from \"react-icons/fa\";\r\nimport DougnatChart from \"./DougnatChart\"\r\n// import DataGrid from \"./DataGrid\"\r\nimport FormatNumber from './FormatNumber'\r\n\r\nfunction CovidApp() {\r\n    const [mainData, setMainData] = useState()\r\n    const [doughnatData, setDoughnatData] = useState()\r\n    const [countriesData, setCountriesData] = useState()\r\n    const [state, setState] = useState({\r\n        countriesData: countriesData,\r\n        direction: {\r\n            price_usd: 'asc',\r\n        }\r\n    })\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        // axios.get(`https://disease.sh/v2/all`)\r\n        //     .then(res => {\r\n        //         setDoughnatData([res.data.cases, res.data.recovered, res.data.deaths])\r\n        //         setMainData([res.data])\r\n        //     })\r\n\r\n        // axios.get(`https://disease.sh/v2/countries`)\r\n        //     .then(res => {\r\n        //         setCountriesData(res.data)\r\n        //         setState({\r\n        //             data: res.data.sort((a, b) => (\r\n        //                 state.direction['cases'] === 'asc'\r\n        //                     ? parseFloat(a['cases']) - parseFloat(b['cases'])\r\n        //                     : parseFloat(b['cases']) - parseFloat(a['cases'])\r\n        //             )),\r\n        //             direction: {\r\n        //                 'cases': state.direction['cases'] === 'asc'\r\n        //                     ? 'desc'\r\n        //                     : 'asc'\r\n        //             }\r\n        //         })\r\n        //     })\r\n        // HandleLoadData2()\r\n        // HandleLoadData1()\r\n\r\n        const fetchData = async () => {\r\n            const response1 = await fetch('https://disease.sh/v2/all')\r\n            let data1 = await response1.json()\r\n            setDoughnatData([data1.cases, data1.recovered, data1.deaths])\r\n            setMainData([data1])\r\n\r\n            const response = await fetch('https://disease.sh/v2/countries')\r\n            let data = await response.json()\r\n            setCountriesData(data)\r\n            setState({\r\n                data: data.sort((a, b) => (\r\n                    state.direction['cases'] === 'asc'\r\n                        ? parseFloat(a['cases']) - parseFloat(b['cases'])\r\n                        : parseFloat(b['cases']) - parseFloat(a['cases'])\r\n                )),\r\n                direction: {\r\n                    'cases': state.direction['cases'] === 'asc'\r\n                        ? 'desc'\r\n                        : 'asc'\r\n                }\r\n            })\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n\r\n    // const HandleLoadData1 = async () => {\r\n    //     const response1 = await fetch('https://disease.sh/v2/all')\r\n    //     let data1 = await response1.json()\r\n    //     setDoughnatData([data1.cases, data1.recovered, data1.deaths])\r\n    //     setMainData([data1])\r\n    // }\r\n\r\n    // const HandleLoadData2 = async () => {\r\n    //     const response = await fetch('https://disease.sh/v2/countries')\r\n    //     let data = await response.json()\r\n    //     setCountriesData(data)\r\n\r\n    //     setState({\r\n    //         data: data.sort((a, b) => (\r\n    //             state.direction['cases'] === 'asc'\r\n    //                 ? parseFloat(a['cases']) - parseFloat(b['cases'])\r\n    //                 : parseFloat(b['cases']) - parseFloat(a['cases'])\r\n    //         )),\r\n    //         direction: {\r\n    //             'cases': state.direction['cases'] === 'asc'\r\n    //                 ? 'desc'\r\n    //                 : 'asc'\r\n    //         }\r\n    //     })\r\n    // }\r\n\r\n    // function FormatNum(num) {\r\n    //     if (num) {\r\n    //         return (\r\n    //             num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \")\r\n    //         )\r\n    //     }\r\n    // }\r\n\r\n    function numberTrans3(a, b) {\r\n        if (a) {\r\n            let output = b / (a / 100)\r\n            output = b / (a / 100)\r\n            output = output.toFixed(3)\r\n            output = output.toString()\r\n            output = output.replace(\".\", \",\")\r\n            return (\r\n                <div className=\"aktiveNakazenych\">\r\n                    <span>V percentách:</span> {output}%\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    function sortBy(key) {\r\n        setState({\r\n            countriesData: countriesData.sort((a, b) => (\r\n                state.direction[key] === 'asc'\r\n                    ? parseFloat(a[key]) - parseFloat(b[key])\r\n                    : parseFloat(b[key]) - parseFloat(a[key])\r\n            )),\r\n            direction: {\r\n                [key]: state.direction[key] === 'asc'\r\n                    ? 'desc'\r\n                    : 'asc'\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        mainData && doughnatData && countriesData && (state.direction['cases'] || state.direction['tests']\r\n            || state.direction['active']\r\n            || state.direction['todayCases']\r\n            || state.direction['deaths']\r\n            || state.direction['recovered']\r\n            || state.direction['todayDeaths']) ?\r\n            <div className=\"covidApp\">\r\n                {console.log(\"CovidApp\")}\r\n                {\r\n                    mainData ?\r\n                        <div className=\"cardsDiv\">\r\n                            <div className=\"cards\">\r\n                                <div className=\"topCard\">\r\n                                    <div className=\"obrDiv\">\r\n                                        <div className=\"circle\">\r\n                                            <img alt=\"\" src={coronaIcon} />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"textCard\">Počet nakazených</div>\r\n                                </div>\r\n                                <div className=\"mainText\">\r\n                                    <FormatNumber prop={mainData[0].cases} />\r\n                                    <div className=\"aktiveNakazenych\">\r\n                                        <span>Počet aktívnych prípadov:</span> <FormatNumber prop={mainData[0].active} />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n\r\n                            <div className=\"cards\">\r\n                                <div className=\"topCard\">\r\n                                    <div className=\"obrDiv\">\r\n                                        <div className=\"circle HP\">\r\n                                            <FaPlusCircle color={\"green\"} />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"textCard\"> Počet vyliečených</div>\r\n                                </div>\r\n                                <div className=\"mainText\">\r\n                                    <FormatNumber prop={mainData[0].recovered} />\r\n                                    {numberTrans3(mainData[0].cases, mainData[0].recovered)}\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"cards\">\r\n                                <div className=\"topCard\">\r\n                                    <div className=\"obrDiv\">\r\n                                        <div className=\"circle skull\">\r\n                                            <GiDeathSkull color={\"white\"} />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"textCard\"> Počet úmrtí</div>\r\n                                </div>\r\n                                <div className=\"mainText\">\r\n                                    <FormatNumber prop={mainData[0].deaths} />\r\n                                    {numberTrans3(mainData[0].cases, mainData[0].deaths)}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        : ''\r\n                }\r\n                {/* <DataGrid /> */}\r\n                <DougnatChart dataForGraph={doughnatData} />\r\n                <br></br>\r\n                <br></br>\r\n                <div className=\"SlovenskeUdajeLink\" ><Link to='/Covid/CovidSK'>Slovenské údaje <AiOutlineDoubleRight className=\"iconSlovUdaje\" /></Link></div>\r\n                <br></br><br></br>\r\n                <SvetTabulka countriesData={countriesData} mainData={mainData} sortBy={sortBy} />\r\n                {/* <SvetTabulka countriesData={countriesData} mainData={mainData} sortBy={useMemo(() => { return sortBy }, [])} /> */}\r\n\r\n            </div >\r\n            : null\r\n\r\n    )\r\n}\r\n\r\nexport default CovidApp\r\n","function CompareCislo(data, sorting, stlpec) {\r\n\r\n    // const [stlpcek, setStlpcek] = useState(stlpec)\r\n    // if (stlpec === \"females\") {\r\n    //     data.sort(compareNum)\r\n    //     function compareNum(b, a) {\r\n    //         const A = a.females\r\n    //         const B = b.females\r\n    //         if (sorting) {\r\n    //             if (A > B) {\r\n    //                 return 1\r\n    //             } else if (A < B) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //         else {\r\n    //             if (B > A) {\r\n    //                 return 1\r\n    //             } else if (B < A) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //     }\r\n    // }\r\n    // else if (stlpec === \"males\") {\r\n    //     data.sort(compareNum)\r\n    //     function compareNum(b, a) {\r\n    //         const A = a.males\r\n    //         const B = b.males\r\n    //         if (sorting) {\r\n    //             if (A > B) {\r\n    //                 return 1\r\n    //             } else if (A < B) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //         else {\r\n    //             if (B > A) {\r\n    //                 return 1\r\n    //             } else if (B < A) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //     }\r\n    // }\r\n    if (stlpec === \"amountRecovered\") {\r\n        data.sort(compareNum)\r\n        function compareNum(b, a) {\r\n            const A = a.amount.recovered\r\n            const B = b.amount.recovered\r\n            if (sorting) {\r\n                if (A > B) {\r\n                    return 1\r\n                } else if (A < B) {\r\n                    return -1\r\n                } else return 0;\r\n            }\r\n            else {\r\n                if (B > A) {\r\n                    return 1\r\n                } else if (B < A) {\r\n                    return -1\r\n                } else return 0;\r\n            }\r\n        }\r\n    }\r\n    // else if (stlpec === \"amountDelta\") {\r\n    //     data.sort(compareNum)\r\n    //     function compareNum(b, a) {\r\n    //         const A = a.amount.infected_delta\r\n    //         const B = b.amount.infected_delta\r\n    //         if (sorting) {\r\n    //             if (A > B) {\r\n    //                 return 1\r\n    //             } else if (A < B) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //         else {\r\n    //             if (B > A) {\r\n    //                 return 1\r\n    //             } else if (B < A) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //     }\r\n    // }\r\n    // else {\r\n    //     data.sort(compareNum)\r\n    //     function compareNum(a, b) {\r\n    //         const A = a.amount.infected\r\n    //         const B = b.amount.infected\r\n    //         if (sorting) {\r\n    //             if (A > B) {\r\n    //                 return 1\r\n    //             } else if (A < B) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //         else {\r\n    //             if (B > A) {\r\n    //                 return 1\r\n    //             } else if (B < A) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //     }\r\n    // }\r\n    else {\r\n        if (JSON.parse(localStorage.getItem(\"zoradenieLocalStorage\")) === \"amountDelta\") {\r\n            data.sort(compareNum)\r\n            function compareNum(a, b) {\r\n                const A = a.amount.infected_delta\r\n                const B = b.amount.infected_delta\r\n                if (sorting) {\r\n                    if (A > B) {\r\n                        return 1\r\n                    } else if (A < B) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n                else {\r\n                    if (B > A) {\r\n                        return 1\r\n                    } else if (B < A) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n            }\r\n        }\r\n        else if (JSON.parse(localStorage.getItem(\"zoradenieLocalStorage\")) === \"amountInfected\") {\r\n            data.sort(compareNum)\r\n            function compareNum(a, b) {\r\n                const A = a.amount.infected\r\n                const B = b.amount.infected\r\n                if (sorting) {\r\n                    if (A > B) {\r\n                        return 1\r\n                    } else if (A < B) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n                else {\r\n                    if (B > A) {\r\n                        return 1\r\n                    } else if (B < A) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        else {\r\n            data.sort(compareNum)\r\n            function compareNum(a, b) {\r\n                const A = a.amount.infected\r\n                const B = b.amount.infected\r\n                if (sorting) {\r\n                    if (A > B) {\r\n                        return 1\r\n                    } else if (A < B) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n                else {\r\n                    if (B > A) {\r\n                        return 1\r\n                    } else if (B < A) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n}\r\n\r\nexport default CompareCislo ","import React, { useState, useEffect } from 'react'\r\nimport './css/tabulkaMesta.css'\r\nimport CompareCislo from './CompareCislo'\r\nimport { IoIosArrowDown } from 'react-icons/io';\r\n// import DougnatChart from \"./DougnatChart\"\r\n\r\nconst LOCAL_STORAGE_KEY = 'zoradenieLocalStorage'\r\n\r\n\r\nfunction TabulkaMesta(props) {\r\n    const data = props.tabulkaData\r\n    // const lastDay = props.tabulkaData.tested_chart[Object.keys(props.tested_chart).length - 1].day\r\n    // const [dataForTable, setDataForTable] = useState({})\r\n    const [sorting, setSorting] = useState(false)\r\n    const [ShowHide, setShowHide] = useState({\r\n        display: 'none'\r\n    })\r\n    const [textPreZobrazenieObci, setTextPreZobrazenieObci] = useState({\r\n        boolean: true,\r\n        text: \"Zobraziť údaje o jedntlivých obciach\"\r\n    })\r\n    const [sipkaObce, setSipkaObce] = useState({\r\n        transition: 'all .2s ease-in',\r\n        marginBottom: '-3px',\r\n        marginLeft: '3px',\r\n    })\r\n\r\n\r\n\r\n    // const [sorting, setSorting] = useState(false)\r\n    // console.log(props.tabulkaData)\r\n    // console.log(props.tabulkaData)\r\n    // const [dataTabulka, setDataTabulka] = useState(props.tabulkaData)\r\n    // const [state, setState] = useState({\r\n    //     dataTabulka: dataTabulka,\r\n    //     direction: {\r\n    //         price_usd: 'asc',\r\n    //     }\r\n    // })\r\n\r\n    useEffect(() => {\r\n        setSorting(s => !s)\r\n        CompareCislo(data, sorting, \"stlpec\")\r\n        // let zeny = 0;\r\n        // let muzi = 0;\r\n        // data.map(jednoData => {\r\n        //     zeny = zeny + jednoData.females\r\n        //     muzi = muzi + jednoData.males\r\n        // })\r\n        // setDataForTable({\r\n        //     labels: [\"Ženy\", \"Muži\"],\r\n        //     data: [zeny, muzi],\r\n        //     backgroundColor: [\"red\", \"blue\"]\r\n        // })\r\n    }, [])\r\n\r\n\r\n    // useEffect(() => {\r\n    //     setState({\r\n    //         dataTabulka: dataTabulka.sort((a, b) => (\r\n    //             state.direction['cases'] === 'asc'\r\n    //                 ? parseFloat(a['cases']) - parseFloat(b['cases'])\r\n    //                 : parseFloat(b['cases']) - parseFloat(a['cases'])\r\n    //         )),\r\n    //         direction: {\r\n    //             ['cases']: state.direction['cases'] === 'asc'\r\n    //                 ? 'desc'\r\n    //                 : 'asc'\r\n    //         }\r\n    //     })\r\n    // }, [])\r\n\r\n\r\n    // function sortBy(key) {\r\n    //     setState({\r\n    //         dataTabulka: dataTabulka.sort((a, b) => (\r\n    //             state.direction[key] === 'asc'\r\n    //                 ? parseFloat(a[key]) - parseFloat(b[key])\r\n    //                 : parseFloat(b[key]) - parseFloat(a[key])\r\n    //         )),\r\n    //         direction: {\r\n    //             [key]: state.direction[key] === 'asc'\r\n    //                 ? 'desc'\r\n    //                 : 'asc'\r\n    //         }\r\n    //     })\r\n    // }\r\n\r\n    function handleSortObce(stlpec) {\r\n        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(stlpec))\r\n\r\n        // const storedZoradenie = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY))\r\n        // if (storedZoradenie) console.log(storedZoradenie)\r\n\r\n\r\n        setSorting(!sorting)\r\n        CompareCislo(data, sorting, stlpec)\r\n    }\r\n\r\n    function zmenitText() {\r\n        if (textPreZobrazenieObci.boolean) {\r\n            setTextPreZobrazenieObci({\r\n                boolean: !textPreZobrazenieObci.boolean,\r\n                text: \"Schovať údaje o jedntlivých obciach\"\r\n            })\r\n            setShowHide({\r\n                display: 'flex',\r\n            })\r\n            setSipkaObce({\r\n                transform: \"rotateX(180deg)\",\r\n                transition: 'all .2s ease-in',\r\n                marginBottom: '-3px',\r\n                marginLeft: '3px',\r\n            })\r\n        }\r\n        else {\r\n            setTextPreZobrazenieObci({\r\n                boolean: !textPreZobrazenieObci.boolean,\r\n                text: \"Zobraziť údaje o jedntlivých obciach\"\r\n            })\r\n            setShowHide({\r\n                display: 'none',\r\n            })\r\n            setSipkaObce({\r\n                transform: \"rotateX(0deg)\",\r\n                transition: 'all .2s ease-in',\r\n                marginBottom: '-3px',\r\n                marginLeft: '3px',\r\n            })\r\n        }\r\n    }\r\n\r\n    function searchInputMesta() {\r\n        var input, filter, table, tr, td, i, txtValue;\r\n        input = document.getElementById(\"myInput\");\r\n        filter = input.value.toUpperCase();\r\n        table = document.getElementById(\"myTable\");\r\n        tr = table.getElementsByTagName(\"tr\");\r\n        for (i = 0; i < tr.length; i++) {\r\n            td = tr[i].getElementsByTagName(\"td\")[0];\r\n            if (td) {\r\n                txtValue = td.textContent || td.innerText;\r\n                if (txtValue.toUpperCase().indexOf(filter) > -1) {\r\n                    tr[i].style.display = \"\";\r\n                } else {\r\n                    tr[i].style.display = \"none\";\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"textPreZObrazenieTabulky\" onClick={zmenitText}>{textPreZobrazenieObci.text} <IoIosArrowDown style={sipkaObce} /></div>\r\n\r\n\r\n\r\n            <div style={ShowHide} className=\"tabulkaOkrajDivMain\">\r\n\r\n                <br></br>\r\n                <input type=\"text\" id=\"myInput\" onKeyUp={searchInputMesta} placeholder=\"Hľadať..\" className=\"inputSearch\" />\r\n                <div className=\"tabulkaMesta\">\r\n\r\n                    <table id=\"myTable\">\r\n                        <thead>\r\n                            <tr >\r\n                                <th >Obec</th>\r\n                                <th onClick={() => handleSortObce('amountInfected')} >Počet nakazených</th>\r\n                                <th onClick={() => handleSortObce('amountDelta')} >Za posledný deň</th>\r\n                                {/* <th onClick={() => handleSortObce('amountRecovered')} >Počet vyliečených</th> */}\r\n                                {/* <th onClick={() => handleSortObce('females')} >Ženy</th> */}\r\n                                {/* <th onClick={() => handleSortObce('males')} >Muži</th> */}\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {data.map((jednaObec, index) => <>\r\n                                <tr key={index} >\r\n                                    {/* {jednaObec.title === \"Bratislava II\" ? null\r\n                                        : jednaObec.title === \"Bratislava III\" ? null\r\n                                            : jednaObec.title === \"Bratislava IV\" ? null\r\n                                                : jednaObec.title === \"Bratislava V\" ? null\r\n                                                    : jednaObec.title === \"Košice II \" ? null\r\n                                                        : jednaObec.title === \"Košice III \" ? null\r\n                                                            : jednaObec.title === \"Košice IV \" ? null\r\n                                                                : jednaObec.title === \"Bratislava I \"\r\n                                                                    ? <td>{jednaObec.title}</td>\r\n                                                                    : jednaObec.title === \"Košice I\" ? <td>{jednaObec.title}</td>\r\n                                                                        : <td>{jednaObec.title}</td>} */}\r\n                                    {jednaObec.title === \"Bratislava II\"\r\n                                        || jednaObec.title === \"Bratislava III\"\r\n                                        || jednaObec.title === \"Bratislava IV\"\r\n                                        || jednaObec.title === \"Bratislava V\"\r\n                                        || jednaObec.title === \"Košice II\"\r\n                                        || jednaObec.title === \"Košice III\"\r\n                                        || jednaObec.title === \"Košice IV\" ? null\r\n                                        : <>\r\n                                            <td>{jednaObec.title === \"Bratislava I\" ? \"Bratislava\" :\r\n                                                jednaObec.title === \"Košice I\" ? \"Košice\" : jednaObec.title}</td>\r\n                                            <td>{jednaObec.amount.infected}</td>\r\n                                            <td style={{ color: 'red' }}>\r\n                                                {jednaObec.amount.infected_delta > 0 ?\r\n                                                    \"+\" + jednaObec.amount.infected_delta\r\n                                                    : null}\r\n                                            </td>\r\n                                        </>}\r\n\r\n                                    {/* <td>{jednaObec.amount.infected}\r\n                                        <span className=\"plusPreObecInfected\">{jednaObec.amount.infected_delta > 0 ? \"+\" + jednaObec.amount.infected_delta : ''}</span>\r\n                                    </td> */}\r\n\r\n                                    {/* <td><span className=\"plusPreObecRecovered\">{jednaObec.amount.recovered}</span></td> */}\r\n                                    {/* <td>{jednaObec.females}</td> */}\r\n                                    {/* <td>{jednaObec.males}</td> */}\r\n                                </tr>\r\n                            </>\r\n                            )}\r\n                        </tbody>\r\n                        {/* <tfoot>\r\n                        <tr>\r\n                            <td>Sum</td>\r\n                            <td>$180</td>\r\n                        </tr>\r\n                    </tfoot> */}\r\n                    </table>\r\n\r\n                </div>\r\n                {/* <DougnatChart dataForGraph={dataForTable} /> */}\r\n                {/* {dataForTable ? <DougnatChart dataForGraph={dataForTable} /> : null} */}\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TabulkaMesta\r\n","import React, { useState, useEffect } from 'react'\r\n// import CountUp from 'react-countup'\r\nimport styled, { keyframes } from \"styled-components\";\r\nimport './css/covid.css'\r\n// import './tooltip.css'\r\nimport coronaIcon from \"../imgs/coronaIcon.svg\"\r\nimport wideArrow from \"../imgs/wideArrow.svg\"\r\nimport TabulkaMesta from \"./TabulkaMesta\"\r\nimport FormatNumber from './FormatNumber';\r\n// import DataGrid from \"./DataGrid\"\r\n\r\n\r\n// import DougnatChart from \"./DougnatChart\"\r\n\r\nfunction CovidSK() {\r\n    const [dataSvk, setDataSvk] = useState()\r\n    const svk = 'https://mapa.covid.chat/map_data'\r\n    // const [tabulkaMestaData, setTabulkaMestaData] = useState([])\r\n    const [maxDate, setMaxDate] = useState()\r\n    const [maxDateboolLean, setMaxDateboolLean] = useState(false)\r\n    const [grafNegativneTesty, setGrafNegativneTesty] = useState({ stav: true, styling: { textDecoration: 'none' } })\r\n    const [styleWideArrow, setStyleWideArrow] = useState()\r\n    // const [toolTip, setToolTip] = useState({ background: 'red' })\r\n\r\n    const [state, setState] = useState({\r\n        dataSvk: dataSvk,\r\n        direction: {\r\n            price_usd: 'asc',\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n\r\n        const LoadData = async () => {\r\n            const response = await fetch(svk)\r\n            const data = await response.json()\r\n\r\n            setMaxDate(Object.keys(data.chart).length - 25)\r\n\r\n            setDataSvk([data])\r\n            setState({\r\n                dataSvk: data.map.sort((a, b) => (\r\n                    state.direction['cases'] === 'asc'\r\n                        ? parseFloat(a['cases']) - parseFloat(b['cases'])\r\n                        : parseFloat(b['cases']) - parseFloat(a['cases'])\r\n                )),\r\n                direction: {\r\n                    'cases': state.direction['cases'] === 'asc'\r\n                        ? 'desc'\r\n                        : 'asc'\r\n                }\r\n            })\r\n        }\r\n\r\n        LoadData()\r\n\r\n\r\n    }, [])\r\n\r\n    const negatTestyMoje = [83, 102, 50, 42, 120, 129, 118, 197, 228]\r\n\r\n    // const LoadData = async () => {\r\n    //     const response = await fetch(svk)\r\n    //     const data = await response.json()\r\n\r\n    //     setMaxDate(Object.keys(data.chart).length - 25)\r\n\r\n    //     setDataSvk([data])\r\n    //     setState({\r\n    //         dataSvk: data.map.sort((a, b) => (\r\n    //             state.direction['cases'] === 'asc'\r\n    //                 ? parseFloat(a['cases']) - parseFloat(b['cases'])\r\n    //                 : parseFloat(b['cases']) - parseFloat(a['cases'])\r\n    //         )),\r\n    //         direction: {\r\n    //             'cases': state.direction['cases'] === 'asc'\r\n    //                 ? 'desc'\r\n    //                 : 'asc'\r\n    //         }\r\n    //     })\r\n    // }\r\n\r\n    function handleData() {\r\n        let a = dataSvk[0].chart[Object.keys(dataSvk[0].tested_chart).length].recovered\r\n        let b = dataSvk[0].chart[Object.keys(dataSvk[0].tested_chart).length - 1].recovered\r\n        let c = a - b\r\n        let newRecovered = 0\r\n        if (c > 0) {\r\n            newRecovered = a - b\r\n        }\r\n\r\n        a = dataSvk[0].chart[Object.keys(dataSvk[0].tested_chart).length].deaths\r\n        b = dataSvk[0].chart[Object.keys(dataSvk[0].tested_chart).length - 1].deaths\r\n        c = a - b\r\n        let newDeaths = 0\r\n        if (c > 0) {\r\n            newDeaths = a - b\r\n        }\r\n\r\n\r\n        function GetTheDay() {\r\n            const lastDay = dataSvk[0].tested_chart[Object.keys(dataSvk[0].tested_chart).length - 1].day\r\n            if (lastDay === \"Pondelok\")\r\n                return \"pondelok\"\r\n            else if (lastDay === \"Utorok\")\r\n                return \"utorok\"\r\n            else if (lastDay === \"Streda\")\r\n                return \"stredu\"\r\n            else if (lastDay === \"Štvrtok\")\r\n                return \"štvrtok\"\r\n            else if (lastDay === \"Piatok\")\r\n                return \"piatok\"\r\n            else if (lastDay === \"Sobota\")\r\n                return \"sobotu\"\r\n            else return \"nedeľu\"\r\n\r\n        }\r\n        return (\r\n            <div>\r\n                <div className=\"cardsDiv\">\r\n                    <div className=\"cards cardsSVK\">\r\n                        <div className=\"topCard\">\r\n                            <div className=\"obrDiv\">\r\n                                <div className=\"circle\">\r\n                                    <img alt=\"\" src={coronaIcon} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"textCard\"><b>Slovenské údaje</b></div>\r\n                        </div>\r\n                        <div className=\"mainTextSK\">\r\n                            Počet testovaných: <FormatNumber prop={dataSvk[0].tested} /><br />\r\n                                Z toho pozitívnych testov: {dataSvk[0].infected}<br />\r\n                            Počet aktívnych prípadov: <b>{dataSvk[0].active}</b><br />\r\n                                Počet vyliečených: <span style={{ color: \"green\" }}>{dataSvk[0].recovered}</span><br />\r\n                            {dataSvk[0].deaths > 0 ? <>Počet úmrtí: {dataSvk[0].deaths}<br /></>\r\n                                : null}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"cards cardsSVK\">\r\n                        <div className=\"topCard\"><div className=\"textCard\"><b>Údaje za {GetTheDay()}</b></div></div>\r\n                        <div className=\"mainTextSK\">\r\n                            Počet nových testovaných: <span>{dataSvk[0].tested_chart[Object.keys(dataSvk[0].tested_chart).length - 1].tested}</span><br />\r\n                                Počet negatívnych testov: <span>{dataSvk[0].tested_chart[Object.keys(dataSvk[0].tested_chart).length - 1].tested - dataSvk[0].tested_chart[Object.keys(dataSvk[0].tested_chart).length - 1].infected}</span><br />\r\n                                Počet pozitívnych testov: <span>+{dataSvk[0].tested_chart[Object.keys(dataSvk[0].tested_chart).length - 1].infected}</span>\r\n                            {\r\n                                newRecovered > 0 ?\r\n                                    <> <br />Počet nových vyliečených: {newRecovered}</>\r\n                                    : null\r\n                            }\r\n                            {\r\n                                newDeaths > 0 ?\r\n                                    <>  <br />Počet nových úmrtí: {newDeaths}</>\r\n                                    : null\r\n                            }\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    const Heading = keyframes`\r\n    0%{\r\n        height: 0%;\r\n      }\r\n      100%{\r\n        height: 100%;\r\n      }\r\n    `;\r\n\r\n    const HomeHeader = styled.div`\r\n    height: 100%;\r\n    animation: ${Heading} .7s;\r\n    bottom: 0;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-evenly;\r\n    `;\r\n\r\n    function changeWideArrow() {\r\n        if (!maxDateboolLean) {\r\n            setMaxDate(-1)\r\n            setStyleWideArrow({\r\n                transform: 'rotateY(180deg)',\r\n            })\r\n        }\r\n        else {\r\n            setMaxDate(Object.keys(dataSvk[0].chart).length - 25)\r\n            setStyleWideArrow({\r\n                transform: 'rotateY(0deg)',\r\n            })\r\n        }\r\n        // dataSvk\r\n        setMaxDateboolLean(!maxDateboolLean)\r\n    }\r\n\r\n    function handleGraphAktivnePripady() {\r\n        let maxAktivnychInfikovanych = 0\r\n        dataSvk[0].chart.map(day1 => {\r\n            if (maxAktivnychInfikovanych < (day1.infected - day1.recovered - day1.deaths))\r\n                maxAktivnychInfikovanych = (day1.infected - day1.recovered - day1.deaths)\r\n            return maxAktivnychInfikovanych\r\n        })\r\n        const MaxInfected = 100 / maxAktivnychInfikovanych\r\n\r\n        // function testHover() {\r\n        //     setToolTip({\r\n        //         background: 'blue'\r\n        //     })\r\n        // }\r\n\r\n        // function testLeave() {\r\n        //     setToolTip({\r\n        //         background: 'red'\r\n        //     })\r\n        // }\r\n        return (\r\n            <div className=\"outsideDivGraf\">\r\n                <h1>Aktívne prípady</h1>\r\n                <div className=\"test\" onClick={changeWideArrow} style={styleWideArrow}>\r\n                    <div className=\"wideArrow\">\r\n                        <img alt=\"\" src={wideArrow} />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"svkGraf\">\r\n                    {dataSvk[0].chart.map((day1, index) =>\r\n                        index > maxDate ?\r\n                            <HomeHeader key={index}>\r\n                                {/* <div className=\"divInGraf\" style={toolTip}>{day1.infected}</div> */}\r\n                                <div className=\"aktivnePripadyGraf\" style={{ height: `calc(${MaxInfected * (day1.infected - day1.recovered - day1.deaths)}% )` }} >\r\n                                    {/* <div onMouseOver={testHover} onMouseLeave={testLeave} className=\"stlpcePrvehoGrafu\" style={{ height: `calc(${MaxInfected * (day1.infected - day1.recovered - day1.deaths)}% )` }} > */}\r\n                                    <span className=\"CountPrvehoGrafu\" >{day1.infected - day1.recovered - day1.deaths}</span>\r\n                                    {maxDateboolLean ?\r\n                                        index % 2 === 0 ?\r\n                                            <div className=\"spanDate\">{day1.date}</div>\r\n                                            : null\r\n                                        : <div className=\"spanDate\">{day1.date}</div>}\r\n                                </div>\r\n                            </HomeHeader>\r\n                            : null)}\r\n                </div>\r\n                <div className=\"medzeraPodDatumomGraf1\"></div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function handleGraph1() {\r\n        const MaxInfected = 100 / dataSvk[0].chart[Object.keys(dataSvk[0].chart).length - 1].infected\r\n        return (\r\n            <div className=\"outsideDivGraf\">\r\n                <h1>Celkový prírastok nakazených</h1>\r\n                <div className=\"test\" onClick={changeWideArrow} style={styleWideArrow}>\r\n                    <div className=\"wideArrow\">\r\n                        <img alt=\"\" src={wideArrow} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"svkGraf\">\r\n                    {\r\n                        dataSvk[0].chart.map((day1, index) =>\r\n                            index > maxDate ?\r\n                                <HomeHeader key={index}>\r\n                                    <div className=\"stlpcePrvehoGrafu tooltip\" style={{ height: `calc(${MaxInfected * day1.infected}% )` }} >\r\n                                        <span className=\"CountPrvehoGrafu\" >{day1.infected}</span>\r\n                                        {dataSvk[0].tested_chart[index - 1]\r\n                                            ? <><span className=\"countupFirstRed\">+{dataSvk[0].tested_chart[index - 1].infected}</span>\r\n                                            </>\r\n                                            : <><span className=\"countupFirstRed\">+1</span>\r\n                                            </>}\r\n                                        {\r\n                                            maxDateboolLean ?\r\n                                                index % 2 === 0 ?\r\n                                                    <div className=\"spanDate\">{day1.date}</div>\r\n                                                    : null\r\n                                                : <div className=\"spanDate\">{day1.date}</div>\r\n                                        }\r\n                                    </div>\r\n                                </HomeHeader>\r\n                                : null\r\n                        )\r\n                    }\r\n                </div>\r\n                <div className=\"medzeraPodDatumomGraf1\"></div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function negatTesty() {\r\n        if (grafNegativneTesty.stav)\r\n            setGrafNegativneTesty({ stav: false, styling: { textDecoration: 'line-through' } })\r\n        else\r\n            setGrafNegativneTesty({ stav: true, styling: { textDecoration: 'none' } })\r\n    }\r\n\r\n    function handleGraph2() {\r\n        let MaxDaily = 0\r\n        if (grafNegativneTesty.stav) {\r\n            if (dataSvk) {\r\n                dataSvk[0].tested_chart.map(pom1 => {\r\n                    if (pom1.tested > MaxDaily) {\r\n                        MaxDaily = pom1.tested - pom1.infected\r\n                    }\r\n                    return MaxDaily\r\n                })\r\n                MaxDaily = MaxDaily / 100\r\n            }\r\n        }\r\n        else {\r\n            if (dataSvk) {\r\n                dataSvk[0].tested_chart.map(pom1 => {\r\n                    if (pom1.infected > MaxDaily) {\r\n                        MaxDaily = pom1.infected\r\n                    }\r\n                    return MaxDaily\r\n                })\r\n                MaxDaily = MaxDaily / 100\r\n            }\r\n        }\r\n        return (\r\n            <div className=\"outsideDivGraf\">\r\n                <h1>Denný prírastok negatívnych a pozitívnych testov</h1>\r\n                <div className=\"test\" onClick={changeWideArrow} style={styleWideArrow}>\r\n                    <div className=\"wideArrow\">\r\n                        <img alt=\"\" src={wideArrow} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"svkGraf\">\r\n                    {maxDate === -1 ?\r\n                        <HomeHeader >  {/* prvy stlpec pre druhy graf */}\r\n                            <div className=\"PozitivneTestyDruhyGraf\" style={{ height: `calc(${1 / MaxDaily}%)` }} >\r\n                                <div className=\"spanDate\">{\"06-03-2020\"}</div>\r\n                            </div>\r\n\r\n                            {grafNegativneTesty.stav ?\r\n                                <div className=\"Graf2Stlpce\" style={{ height: `calc(${306 / MaxDaily}%)` }} >\r\n                                    <span className=\"CountDruhehoGrafu\">306</span>\r\n                                    <span className=\"CountDruhehoGrafu nakazeniZaDen\">+1</span>\r\n                                </div>\r\n                                : <div className=\"Graf2Stlpce\" style={{ height: `calc(${1 / MaxDaily}%)` }} >\r\n                                    <span className=\"CountDruhehoGrafu druhyGrafJedenTypSltpca\">+1</span>\r\n                                </div>}\r\n                        </HomeHeader>\r\n                        : ''}\r\n\r\n                    {dataSvk[0].tested_chart.map((day1, index) =>\r\n                        index > maxDate - 1 ?\r\n                            <HomeHeader key={index}>\r\n                                {\r\n                                    <>\r\n                                        <div className=\"PozitivneTestyDruhyGraf\" style={{ height: `calc(${(day1.infected) / MaxDaily}% )` }} >\r\n                                            {/* <div className=\"spanDate\">{day1.date}</div> */}\r\n\r\n                                            {\r\n                                                maxDateboolLean ?\r\n                                                    index % 2 === 0 ?\r\n                                                        null\r\n                                                        : <div className=\"spanDate\">{day1.date}</div>\r\n                                                    : <div className=\"spanDate\">{day1.date}</div>\r\n                                            }\r\n\r\n\r\n                                            {!grafNegativneTesty.stav ?\r\n                                                <span className=\" CountDruhehoGrafu druhyGrafJedenTypSltpca\" >+{day1.infected}</span>\r\n                                                : null}\r\n                                        </div>\r\n                                        {\r\n                                            negatTestyMoje[index]\r\n                                                ? grafNegativneTesty.stav ?\r\n                                                    <div className=\"Graf2Stlpce\" style={{ height: `calc(${negatTestyMoje[index] / MaxDaily}% )` }} >\r\n                                                        {(negatTestyMoje[index] > 99) ? <>\r\n                                                            <span className=\"CountDruhehoGrafu\" style={{ marginLeft: '-2px' }}>{negatTestyMoje[index]}</span>\r\n                                                            <span className=\" CountDruhehoGrafu nakazeniZaDen\">{day1.infected}</span>\r\n                                                        </>\r\n                                                            : <>\r\n                                                                <span className=\"CountDruhehoGrafu\">{negatTestyMoje[index]}</span>\r\n                                                                <span className=\" CountDruhehoGrafu nakazeniZaDen\">+{day1.infected}</span>\r\n                                                            </>\r\n                                                        }\r\n                                                    </div>\r\n                                                    : null\r\n                                                : grafNegativneTesty.stav ?\r\n                                                    <div className=\"Graf2Stlpce\" style={{ height: `calc(${day1.tested / MaxDaily}%)` }} >\r\n                                                        <span className=\"CountDruhehoGrafu\">{day1.tested - day1.infected}</span>\r\n                                                        <span className=\" CountDruhehoGrafu nakazeniZaDen\">+{day1.infected}</span>\r\n                                                    </div>\r\n                                                    : null\r\n                                        }\r\n                                    </>\r\n                                }\r\n                            </HomeHeader>\r\n                            : null\r\n                    )}\r\n                </div>\r\n                <div className=\"vysvetlivkyPodGrafom\">\r\n                    <div style={grafNegativneTesty.styling} onClick={negatTesty}><div className=\"blue\" ></div>Počet negatívnych testov</div>\r\n                    <div><div className=\"red\"></div>Počet pozitívnych testov</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    function sortBy(key) {\r\n        setState({\r\n            dataSvk: dataSvk[0].map.sort((a, b) => (\r\n\r\n                state.direction[key] === 'asc'\r\n                    ? parseFloat(a[key]) - parseFloat(b[key])\r\n                    : <>{parseFloat(b[key]) - parseFloat(a[key])} </>\r\n            )),\r\n            direction: {\r\n                [key]: state.direction[key] === 'asc'\r\n                    ? 'desc'\r\n                    : 'asc'\r\n            }\r\n        })\r\n    }\r\n    return (\r\n        <div className=\"covidApp\">\r\n            {\r\n                dataSvk\r\n                    ? <>\r\n                        {handleData()}\r\n                        {/* <DataGrid data={dataSvk[0].map} /> */}\r\n\r\n                        <TabulkaMesta tabulkaData={dataSvk[0].districts} sortBy={sortBy} />\r\n                        {/* <div className=\"tooltip\">Hover over me\r\n                        <div className=\"tooltiptext\">Tooltip text</div>\r\n                        </div> */}\r\n                        {/* <DougnatChart /> */}\r\n\r\n                        {handleGraphAktivnePripady()}\r\n\r\n                        {handleGraph1()}\r\n                        {handleGraph2()}\r\n                    </>\r\n                    : ''\r\n\r\n\r\n            }\r\n            <br></br><br></br><br></br><br></br>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default CovidSK\r\n","import React from 'react';\nimport './App.css';\nimport Nav from './Nav';\n\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom'\nimport CovidApp from './Covid/CovidApp';\n// const CovidApp = React.lazy(() => import('./Covid/CovidApp'));\n\nimport CovidSK from './Covid/CovidSK';\n// const CovidSK = React.lazy(() => import('./Covid/CovidSK'));\n\n// import CovidApp from './Covid/CovidApp';\n// import CovidSK from './Covid/CovidSK';\n// import TodoApp from './Todo/TodoApp';\n// import { polyfill } from 'es6-promise'; polyfill();\n// require('es6-promise').polyfill();\n// require('isomorphic-fetch');\n\n\nfunction App() {\n\n\n  return (\n    <Router basename=\"/\">\n      <div className=\"App\">\n        <Nav />\n        <Switch>\n          <Route path=\"/\" component={CovidApp} exact />\n          <Route path=\"/Covid/CovidApp\" component={CovidApp} />\n          <Route path=\"/Covid/CovidSK\" component={CovidSK} />\n          {/* <Route path=\"/Todo\" component={TodoApp} /> */}\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n","module.exports = __webpack_public_path__ + \"static/media/coronaIcon.02ed3e1a.svg\";","module.exports = __webpack_public_path__ + \"static/media/wideArrow.d20604a8.svg\";","module.exports = __webpack_public_path__ + \"static/media/earth.cdc4522b.svg\";","module.exports = __webpack_public_path__ + \"static/media/slovakiaIcon.a29682dd.svg\";"],"sourceRoot":""}