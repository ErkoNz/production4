{"version":3,"sources":["Nav.js","Covid/components/FormatNumber.js","Covid/PrvyRiadokTabulky.js","Covid/SvetTabulka.js","Covid/DougnatChart.js","Covid/CovidApp.js","Covid/CompareCislo.js","Covid/components/HandleSortObce.js","Covid/components/ActualTabulka.js","Covid/TabulkaMesta.js","Covid/components/ZmenitTextTabulkaMesta.js","Covid/CovidSK.js","Covid/BarGraf.js","Covid/GrafyKrajina.js","Covid/components/GetLastData.js","App.js","index.js","imgs/coronaIcon.svg","imgs/wideArrow.svg","imgs/earth.svg","imgs/slovakiaIcon.svg"],"names":["Nav","useState","state","setState","navStyle","color","useEffect","a","fetch","response","json","data","tested_chart","length","LoadData","className","style","to","alt","src","earthIcon","slovakiaIcon","sklnovaniePripadov","day","infected","PocPripadov","FormatNumber","num","prop","toString","replace","PrvyRiadokTabulky","props","dataKontinenty","setDataKontinenty","doTabulkyPrvyRiadok","setDoTabulkyPrvyRiadok","sipkyDole","setSipkyDole","transition","marginBottom","marginLeft","sipkaKontinenty","setSipkaKontinenty","position","left","styleForRollDown","setStyleForRollDown","axios","get","then","res","kontinent","result","filter","obj","continent","mainData","key","background","onClick","transform","tests","cases","active","todayCases","deaths","fontWeight","todayDeaths","recovered","map","oneKontinent","id","width","SvetTabulka","ikonka","setIkonka","setKontinent","scrollPerformance","setScrollPerformance","LastDayData","setLastDayData","Svet","boxShadow","Europe","V4","North_America","Asia","South_America","Africa","Australia_Oceania","style4Buttons","setStyle4Buttons","pomForStyleButtons","constStyleforButtons","useReducer","action","type","prevState","Error","dispatch","zmenIkonku","allowed","pom","countriesData","udaj","Object","keys","includes","reduce","myStyle2","window","addEventListener","document","querySelector","getBoundingClientRect","y","greenBackgroundforTR","LastDataFunction","propCountry","e","country","onKeyUp","tr","td","i","getElementById","value","toUpperCase","getElementsByTagName","textContent","innerText","indexOf","display","placeholder","sortBy","item","pathname","htmlFor","DougnatChart","labels","datasets","label","backgroundColor","height","options","maintainAspectRatio","tooltips","callbacks","title","tooltipItem","dataset","totalSpolu","percent","Math","round","centerText","text","animation","duration","easing","CovidApp","setMainData","doughnatData","setDoughnatData","setCountriesData","direction","price_usd","numberTrans3","b","output","toFixed","response1","data1","sort","parseFloat","fetchData","coronaIcon","CompareCislo","sorting","stlpec","A","amount","B","JSON","parse","localStorage","getItem","infected_delta","HandleSortObce","setStylesArrows","setSorting","setItem","stringify","desc","sipkaNakazeni","sipkaPoslednyden","ActualTabulka","onlyStars","rerender","setRerender","GimmeStar","obec","local","SaveObecStar","dataObce","push","jednaObec","index","TabulkaMesta","tabulkaData","styleArrows","ShowHide","setShowHide","boolean","textPreZobrazenieObci","setTextPreZobrazenieObci","sipkaObce","setSipkaObce","setOnlyStars","ZmeniTextTabulkaMesta","CovidSK","dataSvk","setDataSvk","maxDate","setMaxDate","maxDateboolLean","setMaxDateboolLean","stav","styling","textDecoration","grafNegativneTesty","setGrafNegativneTesty","styleWideArrow","setStyleWideArrow","chart","negatTestyMoje","Heading","keyframes","HomeHeader","styled","div","changeWideArrow","negatTesty","c","newRecovered","newDeaths","tested","lastDay","GetTheDay","handleData","districts","maxAktivnychInfikovanych","day1","MaxInfected","wideArrow","date","handleGraphAktivnePripady","handleGraph1","MaxDaily","pom1","handleGraph2","BarGraf","allData","dataSetsCases","datumy","dataSetsDeaths","dataSetsRecovered","dataSetsActiveCases","dataSetsDailyCases","slice","responsive","legend","padding","legendItem","Chart","defaults","datasetIndex","ci","this","meta","getDatasetMeta","hidden","update","scales","xAxes","stacked","gridLines","yAxes","ticks","callback","mode","intersect","yLabel","onProgress","nacitatViacUdajov","chartInstance","ctx","textAlign","fillStyle","textBaseline","innerWidth","font","forEach","controller","bar","_chartjs","listeners","legendItems","jedno","_model","datasetLabel","fillText","FormatNumberShorter","x","isNaN","GrafyKrajina","match","dataforChart","setDataforChart","bool","loadMoreData","setLoadMoreData","params","LOCAL_STORAGE_LASTDAY","returnThis","location","console","log","catch","error","GetLastData","dailyCases","valueActiveCases","valuesCases","values","valueRecovered","valueDeaths","timeline","jedenDatum","d","Date","datestring","getDate","getMonth","getFullYear","oneCase","splice","setDate","lastDataDatum","fillColor","hoverBackgroundColor","App","basename","path","component","exact","ReactDOM","render","module","exports"],"mappings":"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","file":"static/js/main.84fb857e.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport './nav.css'\r\nimport earthIcon from \"./imgs/earth.svg\"\r\nimport slovakiaIcon from \"./imgs/slovakiaIcon.svg\"\r\n\r\nfunction Nav() {\r\n    const [state, setState] = useState()\r\n    let navStyle = {\r\n        color: 'white',\r\n    }\r\n    useEffect(() => {\r\n        const LoadData = async () => {\r\n            const response = await fetch('https://mapa.covid.chat/map_data')\r\n            const data = await response.json()\r\n\r\n            setState(data.tested_chart[data.tested_chart.length - 1])\r\n        }\r\n        LoadData()\r\n    }, [])\r\n\r\n\r\n    const PocPripadov = () => {\r\n        if (state) {\r\n            let sklnovaniePripadov = \"prípadov\"\r\n            if (state.day === 1)\r\n                sklnovaniePripadov = \"prípad\"\r\n            else if (state.infected > 1 && state.infected < 5)\r\n                sklnovaniePripadov = \"prípady\"\r\n\r\n            return (\r\n                <div>{state.day}: <span>{state.infected}</span> {sklnovaniePripadov}</div>\r\n            )\r\n        }\r\n        else return null\r\n    }\r\n\r\n    // function doubleClickFC() {\r\n    //     window.location.href = \"#/Todo\"\r\n    // }\r\n\r\n    return (\r\n        <nav className=\"navApp\" >\r\n            <ul className=\"navLinks\">\r\n                <li>\r\n                    <Link style={navStyle} to='/Covid/CovidApp'>\r\n                        <div>\r\n                            <img alt=\"\" src={earthIcon} className=\"earthIcon\" />Covid vo svete\r\n                        </div>\r\n                    </Link>\r\n                </li>\r\n                <li>\r\n                    <Link style={navStyle} to='/Covid/CovidSK'>\r\n                        <div>\r\n                            <img alt=\"\" src={slovakiaIcon} className=\"svkIcon\" />Covid na Slovensku\r\n                           <div className=\"novePripady\">\r\n                                {PocPripadov()}\r\n                            </div>\r\n                        </div>\r\n                    </Link>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","function FormatNumber(num) {\r\n    if (num && num.prop > 999) {\r\n        return num.prop.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \")\r\n    }\r\n    else if (num) { return num.prop }\r\n    else { return null }\r\n}\r\n\r\nexport default FormatNumber\r\n","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport FormatNumber from './components/FormatNumber'\r\nimport { IoIosArrowUp } from 'react-icons/io';\r\n\r\nfunction PrvyRiadokTabulky(props) {\r\n    // console.log(props)\r\n    const [dataKontinenty, setDataKontinenty] = useState()\r\n    const [doTabulkyPrvyRiadok, setDoTabulkyPrvyRiadok] = useState()\r\n    const [sipkyDole, setSipkyDole] = useState(true)\r\n    const [sipkaKontinenty, setSipkaKontinenty] = useState({\r\n        transition: 'all .2s ease-in',\r\n        marginBottom: '-3px',\r\n        marginLeft: '3px',\r\n    })\r\n    const [styleForRollDown, setStyleForRollDown] = useState({\r\n        position: 'absolute',\r\n        left: '-1000px',\r\n        transition: 'all .2s ease-in',\r\n        // fontSize: '15px',\r\n    })\r\n\r\n    useEffect(() => {\r\n        axios.get(`https://disease.sh/v2/continents`)\r\n            .then(res => {\r\n                setDataKontinenty([res.data])\r\n            })\r\n\r\n        // if (dataKontinenty) {\r\n        //     let result = dataKontinenty[0].filter(obj => {\r\n        //         return obj.continent === props.kontinent\r\n        //     })\r\n        //     setDoTabulkyPrvyRiadok(result[0])\r\n        // }\r\n    }, [props.kontinent])\r\n\r\n\r\n    useEffect(() => {\r\n        if (dataKontinenty) {\r\n            let result = dataKontinenty[0].filter(obj => {\r\n                return obj.continent === props.kontinent\r\n            })\r\n            setDoTabulkyPrvyRiadok(result[0])\r\n        }\r\n    }, [dataKontinenty, props.kontinent])\r\n\r\n\r\n\r\n    const rollDownContintinents = () => {\r\n        setSipkyDole(!sipkyDole)\r\n        if (sipkyDole) {\r\n            setSipkaKontinenty({\r\n                transform: \"rotate(180deg)\",\r\n                transition: 'all .2s ease-in',\r\n                marginBottom: '-3px',\r\n                marginLeft: '3px',\r\n            })\r\n            setStyleForRollDown({\r\n                // background: 'rgb(234, 234, 234)',\r\n                // fontSize: '15px',\r\n                transition: 'all .2s ease-in',\r\n            })\r\n        }\r\n        else {\r\n            setStyleForRollDown({\r\n                position: 'absolute',\r\n                left: '-1000px',\r\n                transition: 'all .2s ease-in',\r\n                // fontSize: '15px',\r\n            })\r\n\r\n            setSipkaKontinenty({\r\n                transform: \"rotate(0deg)\",\r\n                transition: 'all .2s ease-in',\r\n                marginBottom: '-3px',\r\n                marginLeft: '3px',\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        styleForRollDown && dataKontinenty && sipkaKontinenty && styleForRollDown && props.mainData && props ?\r\n            <>\r\n                {/* {console.log(\"PrvyRiadokTabulky\")} */}\r\n                {/* {console.log(styleForRollDown, dataKontinenty, sipkaKontinenty, styleForRollDown, props.mainData, props)} */}\r\n                {props.kontinent === \"Svet\" ?\r\n                    <>\r\n                        <tr key={-1} style={{ background: 'rgb(234, 234, 234)' }} >\r\n                            <td onClick={rollDownContintinents}>\r\n                                <span className=\"spanJustHoverPointer\" >Celý Svet <IoIosArrowUp style={sipkaKontinenty} />\r\n                                    <div className=\"firstCase\">\r\n                                        <div className=\"firstCaseNumber\"><FormatNumber prop={props.mainData[0].tests} />\r\n                                        </div>\r\n                                    </div>\r\n                                </span>\r\n                            </td>\r\n                            <td><FormatNumber prop={props.mainData[0].cases} /></td>\r\n                            <td><FormatNumber prop={props.mainData[0].active} /></td>\r\n                            <td style={{ background: 'rgba(254, 255, 194, .4)' }}>+<FormatNumber prop={props.mainData[0].todayCases} /></td>\r\n                            <td><FormatNumber prop={props.mainData[0].deaths} /></td>\r\n                            <td style={{ color: ' rgba(156, 20, 20, 0.849)', fontWeight: 'bold' }}>+<FormatNumber prop={props.mainData[0].todayDeaths} /></td>\r\n                            <td style={{ fontWeight: 'bold', color: '#006600' }}><FormatNumber prop={props.mainData[0].recovered} /></td>\r\n                        </tr>\r\n                        {\r\n                            dataKontinenty[0].map((oneKontinent, id) => (\r\n                                <tr key={id} className=\"zrolovaneKontinenty\" style={styleForRollDown} >\r\n                                    <td style={{ width: '100px' }}>\r\n                                        {oneKontinent.continent}\r\n                                        <div className=\"firstCase\"><div className=\"firstCaseNumber\"><FormatNumber prop={oneKontinent.tests} /></div></div>\r\n                                    </td>\r\n                                    <td><FormatNumber prop={oneKontinent.cases} /></td>\r\n                                    <td><FormatNumber prop={oneKontinent.active} /></td>\r\n                                    <td style={{}}>+<FormatNumber prop={oneKontinent.todayCases} /></td>\r\n                                    <td><FormatNumber prop={oneKontinent.deaths} /></td>\r\n                                    <td style={{ color: ' rgba(156, 20, 20, 0.849)', fontWeight: 'bold' }}>+<FormatNumber prop={oneKontinent.todayDeaths} /></td>\r\n                                    <td style={{ fontWeight: 'bold', color: '#006600' }}><FormatNumber prop={oneKontinent.recovered} /></td>\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                    </>\r\n                    :\r\n                    <>\r\n                        {doTabulkyPrvyRiadok ?\r\n                            <tr key={-10} style={{ background: 'rgb(234, 234, 234)' }} >\r\n                                <td style={{ width: '100px' }}>\r\n                                    {doTabulkyPrvyRiadok.continent}\r\n                                    <div className=\"firstCase\"><div className=\"firstCaseNumber\"><FormatNumber prop={doTabulkyPrvyRiadok.tests} /></div></div>\r\n                                </td>\r\n                                <td><FormatNumber prop={doTabulkyPrvyRiadok.cases} /></td>\r\n                                <td><FormatNumber prop={doTabulkyPrvyRiadok.active} /></td>\r\n                                <td style={{}}>+<FormatNumber prop={doTabulkyPrvyRiadok.todayCases} /></td>\r\n                                <td><FormatNumber prop={doTabulkyPrvyRiadok.deaths} /></td>\r\n                                <td style={{ color: ' rgba(156, 20, 20, 0.849)', fontWeight: 'bold' }}>+<FormatNumber prop={doTabulkyPrvyRiadok.todayDeaths} /></td>\r\n                                <td style={{ fontWeight: 'bold', color: '#006600' }}><FormatNumber prop={doTabulkyPrvyRiadok.recovered} /></td>\r\n                            </tr>\r\n                            : null}\r\n                    </>\r\n                }\r\n            </>\r\n            : null\r\n    )\r\n}\r\n\r\nexport default PrvyRiadokTabulky\r\n","import React, { useState, useReducer, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { FaSortAmountDown } from 'react-icons/fa';\r\nimport PrvyRiadokTabulky from './PrvyRiadokTabulky';\r\nimport FormatNumber from './components/FormatNumber'\r\nimport './css/TabulkaSvet.css'\r\n\r\n\r\nfunction SvetTabulka(props) {\r\n    const [ikonka, setIkonka] = useState('cases')\r\n    const [kontinent, setKontinent] = useState(\"Svet\")\r\n    const [scrollPerformance, setScrollPerformance] = useState(false)\r\n    const [LastDayData, setLastDayData] = useState()\r\n    const [style4Buttons, setStyle4Buttons] = useState({\r\n        Svet: { background: '#e5e5e5', boxShadow: 'inset 0px 0px 5px #c1c1c1' },\r\n        Europe: null,\r\n        V4: null,\r\n        North_America: null,\r\n        Asia: null,\r\n        South_America: null,\r\n        Africa: null,\r\n        Australia_Oceania: null,\r\n    })\r\n\r\n    const pomForStyleButtons = {\r\n        Svet: null,\r\n        Europe: null,\r\n        V4: null,\r\n        North_America: null,\r\n        Asia: null,\r\n        South_America: null,\r\n        Africa: null,\r\n        Australia_Oceania: null,\r\n    }\r\n    const constStyleforButtons = {\r\n        background: '#e5e5e5',\r\n        // background: 'rgb(216, 216, 216)',\r\n        boxShadow: 'inset 0px 0px 5px rgb(179, 179, 179)',\r\n        // transform: \"translate(1px,2px)\",\r\n        // fontWeight: 'bold'\r\n        // color: 'white'\r\n    }\r\n    // const [dispatch] = useReducer(reducer, 1);\r\n    const [state, dispatch] = useReducer(reducer, 1);\r\n\r\n    useEffect(() => {\r\n        const allowed = [\"country\", \"active\", \"todayCases\", \"cases\", \"deaths\", \"recovered\"]\r\n        let pom = []\r\n        props.countriesData.map((udaj, id) => {\r\n            Object.keys(udaj)\r\n                .filter(key => allowed.includes(key))\r\n                .reduce((obj, key) => {\r\n                    obj[key] = udaj[key];\r\n                    pom[id] = obj\r\n                    return obj;\r\n\r\n                }, {})\r\n            return null\r\n        })\r\n        setLastDayData(pom)\r\n    }, [props.countriesData])\r\n\r\n    function reducer(state, action) {\r\n        switch (action.type) {\r\n            case 'Svet':\r\n                setKontinent(\"Svet\")\r\n                return (setStyle4Buttons(prevState => {\r\n                    return { ...pomForStyleButtons, Svet: constStyleforButtons }\r\n                }))\r\n            case 'Europe':\r\n                setKontinent(\"Europe\")\r\n                return (setStyle4Buttons(prevState => {\r\n                    return { ...pomForStyleButtons, Europe: constStyleforButtons }\r\n                }))\r\n            case 'V4':\r\n                setKontinent(\"V4\")\r\n                return (setStyle4Buttons(prevState => {\r\n                    return { ...pomForStyleButtons, V4: constStyleforButtons }\r\n                }))\r\n            case 'North America':\r\n                setKontinent(\"North America\")\r\n                return (setStyle4Buttons(prevState => {\r\n                    return { ...pomForStyleButtons, North_America: constStyleforButtons }\r\n                }))\r\n            case 'Asia':\r\n                setKontinent(\"Asia\")\r\n                return (setStyle4Buttons(prevState => {\r\n                    return { ...pomForStyleButtons, Asia: constStyleforButtons }\r\n                }))\r\n            case 'South America':\r\n                setKontinent(\"South America\")\r\n                return (setStyle4Buttons(prevState => {\r\n                    return { ...pomForStyleButtons, South_America: constStyleforButtons }\r\n                }))\r\n            case 'Africa':\r\n                setKontinent(\"Africa\")\r\n                return (setStyle4Buttons(prevState => {\r\n                    return { ...pomForStyleButtons, Africa: constStyleforButtons }\r\n                }))\r\n            case 'Australia/Oceania':\r\n                setKontinent(\"Australia/Oceania\")\r\n                return (setStyle4Buttons(prevState => {\r\n                    return { ...pomForStyleButtons, Australia_Oceania: constStyleforButtons }\r\n                }))\r\n\r\n\r\n            default:\r\n                throw new Error();\r\n        }\r\n    }\r\n\r\n\r\n\r\n    function zmenIkonku(key) {\r\n        if (key === ikonka) {\r\n            setIkonka(key + \"2\")\r\n        }\r\n        else { setIkonka(key) }\r\n    }\r\n\r\n    const myStyle2 = {\r\n        transform: \"rotateX(180deg)\",\r\n    }\r\n\r\n    const myFunction = () => {\r\n        var input, filter, table, tr, td, i, txtValue;\r\n        input = document.getElementById(\"myInput\");\r\n        filter = input.value.toUpperCase();\r\n        table = document.getElementById(\"myTable\");\r\n        tr = table.getElementsByTagName(\"tr\");\r\n        for (i = 0; i < tr.length; i++) {\r\n            td = tr[i].getElementsByTagName(\"td\")[0];\r\n            if (td) {\r\n                txtValue = td.textContent || td.innerText;\r\n                if (txtValue.toUpperCase().indexOf(filter) > -1) {\r\n                    tr[i].style.display = \"\";\r\n                } else {\r\n                    tr[i].style.display = \"none\";\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    window.addEventListener('scroll', function () {\r\n        if (document.querySelector('.scrollingSvet')) {\r\n            if (document.querySelector('.scrollingSvet').getBoundingClientRect().y < 170)\r\n                setScrollPerformance(true)\r\n        }\r\n    });\r\n\r\n    const greenBackgroundforTR = (active) => {\r\n        if (active)\r\n            return null\r\n        else\r\n            return ({ background: 'rgb(190, 245, 204)' })\r\n    }\r\n\r\n    function LastDataFunction(propCountry) {\r\n        if (LastDayData)\r\n            return LastDayData.filter(function (e) {\r\n                return e.country === propCountry\r\n            })\r\n    }\r\n    return (\r\n        ikonka && kontinent && props ?\r\n            <>\r\n                {/* {console.log(\"svetTabulka\")} */}\r\n                <input type=\"text\" id=\"myInput\" onKeyUp={myFunction} placeholder=\"Hľadať..\" className=\"inputSearch\" />\r\n                <div className=\"kontinenty\">\r\n                    <button onClick={() => dispatch({ type: 'Svet' })} style={style4Buttons.Svet}>\r\n                        Svet\r\n                    </button>\r\n                    <button onClick={() => dispatch({ type: 'Europe' })} style={style4Buttons.Europe}>\r\n                        Európa\r\n                    </button>\r\n                    <button onClick={() => dispatch({ type: 'V4' })} style={style4Buttons.V4}>\r\n                        V4\r\n                    </button>\r\n                    <button onClick={() => dispatch({ type: 'North America' })} style={style4Buttons.North_America}>\r\n                        Severná Amerika\r\n                    </button>\r\n                    <button onClick={() => dispatch({ type: 'Asia' })} style={style4Buttons.Asia}>\r\n                        Ázia\r\n                    </button>\r\n                    <button onClick={() => dispatch({ type: 'South America' })} style={style4Buttons.South_America}>\r\n                        Južná Amerika\r\n                    </button>\r\n                    <button onClick={() => dispatch({ type: 'Africa' })} style={style4Buttons.Africa}>\r\n                        Afrika\r\n                    </button>\r\n                    <button onClick={() => dispatch({ type: 'Australia/Oceania' })} style={style4Buttons.Australia_Oceania}>\r\n                        Austrália/Oceánia\r\n                    </button>\r\n\r\n                </div>\r\n                <div className=\"divTable\" >\r\n                    <table id=\"myTable\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th onClick={() => (props.sortBy(\"tests\") || zmenIkonku(\"tests\"))} >\r\n                                    Krajina<br></br>\r\n                                    <div className=\"firstCase\" style={{ fontWeight: 'normal' }}>Počet testov</div>\r\n                                    {ikonka === \"tests\"\r\n                                        ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                    {ikonka === \"tests2\"\r\n                                        ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                </th>\r\n                                <th onClick={() => (props.sortBy('cases') || zmenIkonku('cases'))} >\r\n                                    Počet nakazených\r\n                            {ikonka === \"cases\"\r\n                                        ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                    {ikonka === \"cases2\"\r\n                                        ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                </th>\r\n                                <th onClick={() => (props.sortBy(\"active\") || zmenIkonku(\"active\"))} >\r\n                                    Aktívne prípady\r\n                            {ikonka === \"active\"\r\n                                        ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                    {ikonka === \"active2\"\r\n                                        ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                </th>\r\n                                <th onClick={() => (props.sortBy(\"todayCases\") || zmenIkonku(\"todayCases\"))} >\r\n                                    Nové prípady\r\n                            {ikonka === \"todayCases\"\r\n                                        ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                    {ikonka === \"todayCases2\"\r\n                                        ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                </th>\r\n                                <th onClick={() => (props.sortBy(\"deaths\") || zmenIkonku(\"deaths\"))} >\r\n                                    Počet úmrtí\r\n                            {ikonka === \"deaths\"\r\n                                        ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                    {ikonka === \"deaths2\"\r\n                                        ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                </th>\r\n                                <th onClick={() => (props.sortBy(\"todayDeaths\") || zmenIkonku(\"todayDeaths\"))} >\r\n                                    Nové úmrtia\r\n                            {ikonka === \"todayDeaths\"\r\n                                        ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                    {ikonka === \"todayDeaths2\"\r\n                                        ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                </th>\r\n                                <th onClick={() => (props.sortBy(\"recovered\") || zmenIkonku(\"recovered\"))} >\r\n                                    Počet vyliečených\r\n                            {ikonka === \"recovered\"\r\n                                        ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                    {ikonka === \"recovered2\"\r\n                                        ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <PrvyRiadokTabulky kontinent={kontinent} mainData={props.mainData} />\r\n                            {kontinent === \"Svet\" ?\r\n                                <>\r\n                                    {props.countriesData.map((item, id) => (\r\n                                        scrollPerformance || id < 20 ?\r\n                                            <tr className=\"scrollingSvet\" key={id} style={greenBackgroundforTR(item.active)}>\r\n                                                <td style={{ width: '100px' }}>\r\n                                                    <Link to={{\r\n                                                        state: LastDataFunction(item.country), pathname: `/Covid/CovidApp/${item.country}`\r\n                                                    }}>\r\n                                                        {/* <Link to={`/Covid/CovidApp/${item.country}`\r\n                                                    }> */}\r\n                                                        <span className=\"KrajinaLink\" >{item.country}</span>\r\n\r\n                                                        {item.tests > 0 ?\r\n                                                            <div className=\"firstCase\">\r\n                                                                <div className=\"firstCaseNumber\">\r\n                                                                    <FormatNumber prop={item.tests} />\r\n                                                                </div>\r\n                                                            </div>\r\n                                                            : null}\r\n                                                    </Link>\r\n\r\n                                                </td>\r\n                                                <td><FormatNumber prop={item.cases} /></td>\r\n                                                <td>{item.active ? <FormatNumber prop={item.active} /> : \"0\"}</td>\r\n\r\n                                                {item.todayCases > 0 ?\r\n                                                    <td style={{ background: ' rgb(254, 255, 194)' }}>+<FormatNumber prop={item.todayCases} /> </td>\r\n                                                    : <td></td>\r\n                                                }\r\n                                                <td><FormatNumber prop={item.deaths} /></td>\r\n                                                {item.todayDeaths > 0 ?\r\n                                                    <td style={{ color: ' rgba(156, 20, 20, 0.849)', fontWeight: 'bold' }}>+<FormatNumber prop={item.todayDeaths} /> </td>\r\n                                                    : <td></td>\r\n                                                }\r\n                                                <td style={{ fontWeight: 'bold', color: '#006600' }}><FormatNumber prop={item.recovered} /></td>\r\n                                            </tr>\r\n                                            : null\r\n                                    ))\r\n                                    }\r\n                                </>\r\n\r\n                                : kontinent === \"V4\" ?\r\n                                    <>\r\n                                        {props.countriesData.map((item, id) => (\r\n                                            item.country === \"Slovakia\"\r\n                                                || item.country === \"Czechia\"\r\n                                                || item.country === \"Hungary\"\r\n                                                || item.country === \"Poland\"\r\n                                                || item.country === \"Austria\"\r\n                                                || item.country === \"Ukraine\" ?\r\n\r\n                                                <tr className=\"scrollingSvet\" key={id} style={greenBackgroundforTR(item.active)}>\r\n                                                    {/* {console.log(item.country)} */}\r\n\r\n                                                    <td style={{ width: '100px' }}>\r\n                                                        <Link to={{\r\n                                                            state: LastDataFunction(item.country), pathname: `/Covid/CovidApp/${item.country}`\r\n                                                        }}>\r\n                                                            <span className=\"KrajinaLink\" >{item.country}</span>\r\n\r\n                                                            {item.tests > 0 ?\r\n                                                                <div className=\"firstCase\">\r\n                                                                    <div className=\"firstCaseNumber\">\r\n                                                                        <FormatNumber prop={item.tests} />\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                                : null}\r\n                                                        </Link>\r\n\r\n                                                    </td>\r\n                                                    <td><FormatNumber prop={item.cases} /></td>\r\n                                                    <td>{item.active ? <FormatNumber prop={item.active} /> : \"0\"}</td>\r\n\r\n                                                    {item.todayCases > 0 ?\r\n                                                        <td style={{ background: ' rgb(254, 255, 194)' }}>+<FormatNumber prop={item.todayCases} /> </td>\r\n                                                        : <td></td>\r\n                                                    }\r\n                                                    <td><FormatNumber prop={item.deaths} /></td>\r\n                                                    {item.todayDeaths > 0 ?\r\n                                                        <td style={{ color: ' rgba(156, 20, 20, 0.849)', fontWeight: 'bold' }}>+<FormatNumber prop={item.todayDeaths} /> </td>\r\n                                                        : <td></td>\r\n                                                    }\r\n                                                    <td style={{ fontWeight: 'bold', color: '#006600' }}><FormatNumber prop={item.recovered} /></td>\r\n                                                </tr>\r\n                                                : null\r\n                                        ))\r\n                                        }\r\n                                    </>\r\n\r\n                                    :\r\n                                    props.countriesData.map((item, id) => (\r\n                                        item.continent === kontinent ?\r\n                                            <tr key={id} style={greenBackgroundforTR(item.active)}>\r\n                                                <td style={{ width: '100px' }}>\r\n                                                    {/* <Link to={`/Covid/CovidApp/${item.country}`} > */}\r\n\r\n                                                    <Link to={{\r\n                                                        state: LastDataFunction(item.country), pathname: `/Covid/CovidApp/${item.country}`\r\n                                                    }}>\r\n\r\n\r\n                                                        <span className=\"KrajinaLink\" >{item.country}</span>\r\n                                                        {item.tests > 0 ?\r\n                                                            <div className=\"firstCase\">\r\n                                                                <div className=\"firstCaseNumber\">\r\n                                                                    <FormatNumber prop={item.tests} />\r\n                                                                </div>\r\n                                                            </div>\r\n                                                            : null}\r\n                                                    </Link>\r\n\r\n                                                </td>\r\n                                                <td><FormatNumber prop={item.cases} /></td>\r\n                                                <td>{item.active ? <FormatNumber prop={item.active} /> : \"0\"}</td>\r\n                                                {item.todayCases > 0 ?\r\n                                                    <td style={{ background: ' rgb(254, 255, 194)' }}>+<FormatNumber prop={item.todayCases} /> </td>\r\n                                                    : <td></td>\r\n                                                }\r\n                                                <td><FormatNumber prop={item.deaths} /></td>\r\n                                                {item.todayDeaths > 0 ?\r\n                                                    <td style={{ color: ' rgba(156, 20, 20, 0.849)', fontWeight: 'bold' }}>+<FormatNumber prop={item.todayDeaths} /> </td>\r\n                                                    : <td></td>\r\n                                                }\r\n                                                <td style={{ fontWeight: 'bold', color: 'green' }}><FormatNumber prop={item.recovered} /></td>\r\n                                            </tr>\r\n                                            : null\r\n                                    ))\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                    <label htmlFor=\"myInput\">.</label>\r\n                </div>\r\n            </>\r\n            : null\r\n    )\r\n}\r\n\r\nexport default SvetTabulka","import React from 'react'\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport './css/csspreSvk.css'\r\nfunction DougnatChart(props) {\r\n    // console.log(props.dataForGraph[props.dataForGraph.length - 1])\r\n    // console.log(props)\r\n    const data = {\r\n        labels: ['Nakazení', 'Vyliečení', 'Úmrtia'],\r\n        datasets: [{\r\n            label: '# of Votes',\r\n            data: [props.cases, props.recovered, props.deaths],\r\n            backgroundColor: [\r\n                '#f85959',\r\n                '#17b978',\r\n                '#430d27',\r\n            ],\r\n        }]\r\n    }\r\n\r\n\r\n    // const data = {\r\n    //     labels: props.dataForGraph.labels,\r\n    //     datasets: [{\r\n    //         label: '# of Votes',\r\n    //         data: props.dataForGraph.data,\r\n    //         backgroundColor: props.dataForGraph.backgroundColor,\r\n    //     }]\r\n    // }\r\n\r\n    // const data = {\r\n    //     labels: ['Nakazení', 'Vyliečení'],\r\n    //     datasets: [{\r\n    //         label: '# of Votes',\r\n    //         data: [10, 20],\r\n    //         backgroundColor: ['red', 'blue'],\r\n    //     }]\r\n    // }\r\n\r\n\r\n    return (\r\n        props && data ?\r\n            <div>\r\n                {/* {console.log(\"DougnatChart\")} */}\r\n                <div className=\"dougnut\">\r\n                    <Doughnut\r\n                        data={data}\r\n                        height={300}\r\n                        options={{\r\n                            maintainAspectRatio: false,\r\n                            tooltips: {\r\n                                callbacks: {\r\n                                    title: function (tooltipItem, data) {\r\n                                        return data['labels'][tooltipItem[0]['index']];\r\n                                    },\r\n                                    label: function (tooltipItem, data) {\r\n                                        var dataset = data.datasets[0]\r\n                                        // console.log(dataset.data[0])\r\n                                        let totalSpolu = dataset.data[0] + dataset.data[1] + dataset.data[2]\r\n                                        let percent = data['datasets'][0]['data'][tooltipItem['index']] / totalSpolu\r\n                                        // console.log(data['datasets'][0]['data'][tooltipItem['index']])\r\n                                        // console.log(dataset._meta[0].total)\r\n                                        // console.log(dataset.data[tooltipItem['index']])\r\n                                        // if (dataset)\r\n                                        //     var percent = Math.round((dataset.data[tooltipItem['index']] / dataset._meta[0].total) * 100)\r\n                                        return data['datasets'][0]['data'][tooltipItem['index']] + \" (\" + Math.round(percent * 100) + \"%)\";\r\n                                    },\r\n\r\n                                    // label: function (tooltipItem, data) {\r\n                                    //     var percent = Math.round((dataset.data[tooltipItem['index']] / dataset._meta[0].total) * 100)\r\n\r\n                                    //     return data['datasets'][0]['data'][tooltipItem['index']] + \" (\" + percent + \"%)\";\r\n                                    // }\r\n\r\n\r\n                                    // afterLabel: function (tooltipItem, data) {\r\n                                    //     var dataset = data['datasets'][0];\r\n                                    //     var percent = Math.round((dataset['data'][tooltipItem['index']] / dataset[\"_meta\"][0]['total']) * 100)\r\n                                    //     return '(' + percent + '%)';\r\n                                    // },\r\n                                },\r\n                            },\r\n                            centerText: {\r\n                                display: true,\r\n                                text: `90%`\r\n                            },\r\n                            animation: {\r\n                                duration: 2000,\r\n                                easing: 'easeOutQuint',\r\n                                // beforeDraw: function (chart) {\r\n                                //     var width = chart.chart.width,\r\n                                //         height = chart.chart.height,\r\n                                //         ctx = chart.chart.ctx;\r\n                                //     ctx.restore();\r\n                                //     var fontSize = (height / 160).toFixed(2);\r\n                                //     ctx.font = fontSize + \"em sans-serif\";\r\n                                //     ctx.textBaseline = \"top\";\r\n                                //     var text = \"Foo-bar\",\r\n                                //         textX = Math.round((width - ctx.measureText(text).width) / 2),\r\n                                //         textY = height / 2;\r\n                                //     ctx.fillText(text, textX, textY);\r\n                                //     ctx.save();\r\n                                // },\r\n                                // onProgress: function () {\r\n                                //     var chartInstance = this.chart,\r\n                                //         ctx = chartInstance.ctx;\r\n                                //     ctx.textAlign = 'center';\r\n                                //     ctx.fillStyle = \"rgba(0, 0, 0, .75)\";\r\n                                //     ctx.textBaseline = 'bottom';\r\n\r\n\r\n                                //     if (window.innerWidth > 1220) {\r\n                                //         ctx.font = \"bold 12px Arial\";\r\n                                //     }\r\n                                //     else if (window.innerWidth > 720) {\r\n                                //         ctx.font = \"bold 11px Arial\";\r\n                                //     }\r\n                                //     else {\r\n                                //         ctx.font = \"bold 6px Arial\";\r\n                                //     }\r\n                                //     // if (window.innerWidth > 720) {\r\n                                //     this.data.datasets.forEach(function (dataset, i) {\r\n                                //         var meta = chartInstance.controller.getDatasetMeta(i);\r\n                                //         meta.data.forEach(function (bar, index) {\r\n                                //             var data = dataset.data[index];\r\n                                //             console.log(bar._model)\r\n                                //             console.log(index)\r\n                                //             // ctx.fillText(data, bar._model.x + index * 100, bar._model.y - 4);\r\n                                //             ctx.fillText(\"o\", bar._model.x + index * 100, bar._model.y - 4);\r\n                                //             // console.log(data, bar._model.x + 0, bar._model.y - 4)\r\n                                //             // console.log(Math.abs(data) > 999 ? Math.sign(data) * ((Math.abs(data) / 1000).toFixed(1)) + 'k' : Math.sign(data) * Math.abs(data))\r\n                                //         })\r\n                                //     })\r\n                                //     // }\r\n                                // }\r\n                            }\r\n                        }\r\n                        }\r\n                    />\r\n                </div>\r\n\r\n            </div>\r\n            : null\r\n    )\r\n}\r\n\r\nexport default DougnatChart\r\n","import React, { useState, useEffect } from 'react'\r\nimport './css/covid.css'\r\nimport './css/covidDesign.css'\r\nimport { Link } from 'react-router-dom'\r\nimport coronaIcon from \"../imgs/coronaIcon.svg\"\r\n// import CovidTable from \"./CovidTable\"\r\nimport SvetTabulka from \"./SvetTabulka\"\r\nimport { GiDeathSkull } from \"react-icons/gi\";\r\nimport { AiOutlineDoubleRight } from \"react-icons/ai\";\r\nimport { FaPlusCircle } from \"react-icons/fa\";\r\nimport DougnatChart from \"./DougnatChart\"\r\n// import DataGrid from \"./DataGrid\"\r\nimport FormatNumber from './components/FormatNumber'\r\n\r\nfunction CovidApp() {\r\n    const [mainData, setMainData] = useState()\r\n    const [doughnatData, setDoughnatData] = useState()\r\n    const [countriesData, setCountriesData] = useState()\r\n    const [state, setState] = useState({\r\n        countriesData: countriesData,\r\n        direction: {\r\n            price_usd: 'asc',\r\n        }\r\n    })\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const response1 = await fetch('https://disease.sh/v2/all')\r\n            let data1 = await response1.json()\r\n            setDoughnatData([data1.cases, data1.recovered, data1.deaths])\r\n            setMainData([data1])\r\n\r\n            const response = await fetch('https://disease.sh/v2/countries')\r\n            let data = await response.json()\r\n            setCountriesData(data)\r\n            setState({\r\n                data: data.sort((a, b) => (\r\n                    state.direction['cases'] === 'asc'\r\n                        ? parseFloat(a['cases']) - parseFloat(b['cases'])\r\n                        : parseFloat(b['cases']) - parseFloat(a['cases'])\r\n                )),\r\n                direction: {\r\n                    'cases': state.direction['cases'] === 'asc'\r\n                        ? 'desc'\r\n                        : 'asc'\r\n                }\r\n            })\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    function numberTrans3(a, b) {\r\n        if (a) {\r\n            let output = b / (a / 100)\r\n            output = b / (a / 100)\r\n            output = output.toFixed(3)\r\n            output = output.toString()\r\n            output = output.replace(\".\", \",\")\r\n            return (\r\n                <div className=\"aktiveNakazenych\">\r\n                    <span>V percentách:</span> {output}%\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    function sortBy(key) {\r\n        setState({\r\n            countriesData: countriesData.sort((a, b) => (\r\n                state.direction[key] === 'asc'\r\n                    ? parseFloat(a[key]) - parseFloat(b[key])\r\n                    : parseFloat(b[key]) - parseFloat(a[key])\r\n            )),\r\n            direction: {\r\n                [key]: state.direction[key] === 'asc'\r\n                    ? 'desc'\r\n                    : 'asc'\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        mainData && doughnatData && countriesData && (state.direction['cases'] || state.direction['tests']\r\n            || state.direction['active']\r\n            || state.direction['todayCases']\r\n            || state.direction['deaths']\r\n            || state.direction['recovered']\r\n            || state.direction['todayDeaths']) ?\r\n            <div className=\"covidApp\">\r\n                {\r\n                    mainData ?\r\n                        <div className=\"cardsDiv\">\r\n                            <div className=\"cards\">\r\n                                <div className=\"topCard\">\r\n                                    <div className=\"obrDiv\">\r\n                                        <div className=\"circle\">\r\n                                            <img alt=\"\" src={coronaIcon} />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"textCard\">Počet nakazených</div>\r\n                                </div>\r\n                                <div className=\"mainText\">\r\n                                    <FormatNumber prop={mainData[0].cases} />\r\n                                    <div className=\"aktiveNakazenych\">\r\n                                        <span>Počet aktívnych prípadov:</span> <FormatNumber prop={mainData[0].active} />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n\r\n                            <div className=\"cards\">\r\n                                <div className=\"topCard\">\r\n                                    <div className=\"obrDiv\">\r\n                                        <div className=\"circle HP\">\r\n                                            <FaPlusCircle color={\"green\"} />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"textCard\"> Počet vyliečených</div>\r\n                                </div>\r\n                                <div className=\"mainText\">\r\n                                    <FormatNumber prop={mainData[0].recovered} />\r\n                                    {numberTrans3(mainData[0].cases, mainData[0].recovered)}\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"cards\">\r\n                                <div className=\"topCard\">\r\n                                    <div className=\"obrDiv\">\r\n                                        <div className=\"circle skull\">\r\n                                            <GiDeathSkull color={\"white\"} />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"textCard\"> Počet úmrtí</div>\r\n                                </div>\r\n                                <div className=\"mainText\">\r\n                                    <FormatNumber prop={mainData[0].deaths} />\r\n                                    {numberTrans3(mainData[0].cases, mainData[0].deaths)}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        : ''\r\n                }\r\n                {/* <DataGrid /> */}\r\n                <DougnatChart cases={doughnatData[0]} recovered={doughnatData[1]} deaths={doughnatData[2]} />\r\n                <br></br>\r\n                <br></br>\r\n                <div className=\"SlovenskeUdajeLink\" >\r\n                    <Link to='/Covid/CovidSK'>Slovenské údaje <AiOutlineDoubleRight className=\"iconSlovUdaje\" />\r\n                    </Link>\r\n                </div>\r\n                <br></br>\r\n                <div className=\"SlovenskeUdajeLink\" >\r\n                    <Link to={`/Covid/CovidApp/Svet`} >Grafy pre celý svet <AiOutlineDoubleRight className=\"iconSlovUdaje\" />\r\n                    </Link>\r\n\r\n                </div>\r\n                {/* <Link to={`/Covid/CovidApp/${item.country}`} > */}\r\n\r\n                {/* <div className=\"SlovenskeUdajeLink\" ><Link to={`/Covid/SamostatnaKrajina/GrafyKrajina/${Slovakiatest}`}>samosts údaje </Link></div> */}\r\n                {/* <Link to={`/ReceptyV2/ReceptyV2/${recepty.recipe.label}`}></Link> */}\r\n                <br></br><br></br>\r\n                <SvetTabulka countriesData={countriesData} mainData={mainData} sortBy={sortBy} />\r\n                {/* <SvetTabulka countriesData={countriesData} mainData={mainData} sortBy={useMemo(() => { return sortBy }, [])} /> */}\r\n\r\n            </div >\r\n            : null\r\n\r\n    )\r\n}\r\n\r\nexport default CovidApp\r\n","function CompareCislo(data, sorting, stlpec) {\r\n\r\n    // const [stlpcek, setStlpcek] = useState(stlpec)\r\n    // if (stlpec === \"females\") {\r\n    //     data.sort(compareNum)\r\n    //     function compareNum(b, a) {\r\n    //         const A = a.females\r\n    //         const B = b.females\r\n    //         if (sorting) {\r\n    //             if (A > B) {\r\n    //                 return 1\r\n    //             } else if (A < B) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //         else {\r\n    //             if (B > A) {\r\n    //                 return 1\r\n    //             } else if (B < A) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //     }\r\n    // }\r\n    // else if (stlpec === \"males\") {\r\n    //     data.sort(compareNum)\r\n    //     function compareNum(b, a) {\r\n    //         const A = a.males\r\n    //         const B = b.males\r\n    //         if (sorting) {\r\n    //             if (A > B) {\r\n    //                 return 1\r\n    //             } else if (A < B) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //         else {\r\n    //             if (B > A) {\r\n    //                 return 1\r\n    //             } else if (B < A) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //     }\r\n    // }\r\n    if (stlpec === \"amountRecovered\") {\r\n        data.sort(compareNum)\r\n        function compareNum(b, a) {\r\n            const A = a.amount.recovered\r\n            const B = b.amount.recovered\r\n            if (!sorting) {\r\n                if (A > B) {\r\n                    return 1\r\n                } else if (A < B) {\r\n                    return -1\r\n                } else return 0;\r\n            }\r\n            else {\r\n                if (B > A) {\r\n                    return 1\r\n                } else if (B < A) {\r\n                    return -1\r\n                } else return 0;\r\n            }\r\n        }\r\n    }\r\n    // else if (stlpec === \"amountDelta\") {\r\n    //     data.sort(compareNum)\r\n    //     function compareNum(b, a) {\r\n    //         const A = a.amount.infected_delta\r\n    //         const B = b.amount.infected_delta\r\n    //         if (sorting) {\r\n    //             if (A > B) {\r\n    //                 return 1\r\n    //             } else if (A < B) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //         else {\r\n    //             if (B > A) {\r\n    //                 return 1\r\n    //             } else if (B < A) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //     }\r\n    // }\r\n    // else {\r\n    //     data.sort(compareNum)\r\n    //     function compareNum(a, b) {\r\n    //         const A = a.amount.infected\r\n    //         const B = b.amount.infected\r\n    //         if (sorting) {\r\n    //             if (A > B) {\r\n    //                 return 1\r\n    //             } else if (A < B) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //         else {\r\n    //             if (B > A) {\r\n    //                 return 1\r\n    //             } else if (B < A) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //     }\r\n    // }\r\n    else {\r\n        if (JSON.parse(localStorage.getItem(\"zoradenieLocalStorage\")) === \"amountDelta\") {\r\n            data.sort(compareNum)\r\n            function compareNum(a, b) {\r\n                const A = a.amount.infected_delta\r\n                const B = b.amount.infected_delta\r\n                if (!sorting) {\r\n                    if (A > B) {\r\n                        return 1\r\n                    } else if (A < B) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n                else {\r\n                    if (B > A) {\r\n                        return 1\r\n                    } else if (B < A) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n            }\r\n        }\r\n        else if (JSON.parse(localStorage.getItem(\"zoradenieLocalStorage\")) === \"amountInfected\") {\r\n            data.sort(compareNum)\r\n            function compareNum(a, b) {\r\n                const A = a.amount.infected\r\n                const B = b.amount.infected\r\n                if (!sorting) {\r\n                    if (A > B) {\r\n                        return 1\r\n                    } else if (A < B) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n                else {\r\n                    if (B > A) {\r\n                        return 1\r\n                    } else if (B < A) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        else {\r\n            data.sort(compareNum)\r\n            function compareNum(a, b) {\r\n                const A = a.amount.infected\r\n                const B = b.amount.infected\r\n                if (!sorting) {\r\n                    if (A > B) {\r\n                        return 1\r\n                    } else if (A < B) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n                else {\r\n                    if (B > A) {\r\n                        return 1\r\n                    } else if (B < A) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n}\r\n\r\nexport default CompareCislo ","\r\nfunction HandleSortObce(stlpec, CompareCislo, data, sorting, setStylesArrows, setSorting) {\r\n    const LOCAL_STORAGE_KEY = 'zoradenieLocalStorage'\r\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(stlpec))\r\n\r\n    if (stlpec === \"amountInfected\") {\r\n        CompareCislo(data, sorting.desc, \"amountInfected\")\r\n        if (sorting.desc)\r\n            setStylesArrows({\r\n                sipkaNakazeni: {\r\n                    transform: 'rotate(0deg)'\r\n                },\r\n                sipkaPoslednyden: {\r\n                    display: 'none',\r\n                }\r\n            })\r\n        else\r\n            setStylesArrows({\r\n                sipkaNakazeni: {\r\n                    transform: 'rotate(180deg)'\r\n                },\r\n                sipkaPoslednyden: {\r\n                    display: 'none',\r\n                }\r\n            })\r\n    }\r\n    if (stlpec === \"amountDelta\") {\r\n        CompareCislo(data, !sorting.desc, \"amountDelta\")\r\n        if (!sorting.desc)\r\n            setStylesArrows({\r\n                sipkaNakazeni: {\r\n                    display: 'none'\r\n                },\r\n                sipkaPoslednyden: {\r\n                    transform: 'rotate(0deg)',\r\n                }\r\n            })\r\n        else\r\n            setStylesArrows({\r\n                sipkaNakazeni: {\r\n                    display: 'none'\r\n                },\r\n                sipkaPoslednyden: {\r\n                    transform: 'rotate(180deg)',\r\n                }\r\n            })\r\n    }\r\n    setSorting({\r\n        desc: !sorting.desc\r\n    })\r\n}\r\n\r\nexport default HandleSortObce\r\n","import React from 'react'\r\nimport { IoMdStarOutline } from 'react-icons/io'\r\nimport { IoMdStar } from 'react-icons/io'\r\n\r\nfunction ActualTabulka({ data, onlyStars, rerender, setRerender }) {\r\n    const LOCAL_STORAGE_KEY_OBCE = 'obceSave'\r\n    function GimmeStar(obec) {\r\n        const local = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY_OBCE))\r\n        if (local && local.includes(obec))\r\n            return <IoMdStar className=\"star\" />\r\n        else\r\n            return <IoMdStarOutline className=\"star\" />\r\n    }\r\n\r\n    function SaveObecStar(obec) {\r\n        let dataObce = []\r\n        if (!localStorage.getItem(LOCAL_STORAGE_KEY_OBCE)) {\r\n            localStorage.setItem(LOCAL_STORAGE_KEY_OBCE, JSON.stringify([obec]))\r\n        }\r\n        else {\r\n\r\n            dataObce = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY_OBCE))\r\n            if (dataObce.includes(obec))\r\n                dataObce = dataObce.filter(item => item !== obec)\r\n            else\r\n                dataObce.push(obec)\r\n            localStorage.setItem(LOCAL_STORAGE_KEY_OBCE, JSON.stringify(dataObce))\r\n        }\r\n        setRerender(!rerender)\r\n    }\r\n\r\n\r\n\r\n    if (onlyStars)\r\n        return (\r\n            data.map((jednaObec, index) =>\r\n                localStorage.getItem(LOCAL_STORAGE_KEY_OBCE) && JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY_OBCE)).includes(jednaObec.title) ?\r\n                    <tr key={index} >\r\n                        <td onClick={() => SaveObecStar(jednaObec.title)}>\r\n                            {GimmeStar(jednaObec.title)}\r\n                            {jednaObec.title === \"Bratislava I\" ? \"Bratislava\" :\r\n                                jednaObec.title === \"Košice I\" ? \"Košice\" : jednaObec.title}</td>\r\n                        <td>{jednaObec.amount.infected}</td>\r\n                        <td style={{ color: 'red' }}>\r\n                            {jednaObec.amount.infected_delta > 0 ?\r\n                                \"+\" + jednaObec.amount.infected_delta\r\n                                : null}\r\n                        </td>\r\n                    </tr>\r\n                    : null\r\n            )\r\n        )\r\n\r\n    else return (\r\n        data.map((jednaObec, index) =>\r\n            jednaObec.title === \"Bratislava II\"\r\n                || jednaObec.title === \"Bratislava III\"\r\n                || jednaObec.title === \"Bratislava IV\"\r\n                || jednaObec.title === \"Bratislava V\"\r\n                || jednaObec.title === \"Košice II\"\r\n                || jednaObec.title === \"Košice III\"\r\n                || jednaObec.title === \"Košice IV\" ? null\r\n                :\r\n                <tr key={index}>\r\n                    <td onClick={() => SaveObecStar(jednaObec.title)}>\r\n                        {GimmeStar(jednaObec.title)}\r\n                        {jednaObec.title === \"Bratislava I\" ? \"Bratislava\" :\r\n                            jednaObec.title === \"Košice I\" ? \"Košice\" : jednaObec.title}</td>\r\n                    <td>{jednaObec.amount.infected}</td>\r\n                    <td style={{ color: 'red' }}>\r\n                        {jednaObec.amount.infected_delta > 0 ?\r\n                            \"+\" + jednaObec.amount.infected_delta\r\n                            : null}\r\n                    </td>\r\n                </tr>\r\n        ))\r\n}\r\n\r\nexport default ActualTabulka\r\n","import React, { useState, useEffect } from 'react'\r\nimport './css/tabulkaMesta.scss'\r\nimport CompareCislo from './CompareCislo'\r\nimport { IoIosArrowDown } from 'react-icons/io';\r\nimport { FaSortAmountDown } from 'react-icons/fa'\r\nimport { IoMdStarOutline } from 'react-icons/io'\r\nimport { IoMdStar } from 'react-icons/io'\r\nimport ZmeniTextTabulkaMesta from './components/ZmenitTextTabulkaMesta'\r\nimport HandleSortObce from './components/HandleSortObce'\r\nimport ActualTabulka from './components/ActualTabulka';\r\nconst LOCAL_STORAGE_KEY = 'zoradenieLocalStorage'\r\nconst LOCAL_STORAGE_KEY_STAR = 'starsTabulkaMesta'\r\n\r\n\r\nfunction TabulkaMesta(props) {\r\n    const data = props.tabulkaData\r\n    const [sorting, setSorting] = useState({\r\n        desc: true,\r\n    })\r\n    const [styleArrows, setStylesArrows] = useState({\r\n        sipkaNakazeni: {\r\n            transform: 'rotate(0deg)'\r\n        },\r\n        sipkaPoslednyden: {\r\n            display: 'none',\r\n        }\r\n    })\r\n    const [ShowHide, setShowHide] = useState({\r\n        display: 'none'\r\n    })\r\n    const [textPreZobrazenieObci, setTextPreZobrazenieObci] = useState({\r\n        boolean: true,\r\n        text: \"Zobraziť údaje o jedntlivých obciach\"\r\n    })\r\n    const [sipkaObce, setSipkaObce] = useState({\r\n        transition: 'all .2s ease-in',\r\n        marginBottom: '-3px',\r\n        marginLeft: '3px',\r\n    })\r\n\r\n    const [rerender, setRerender] = useState(true)\r\n    const [onlyStars, setOnlyStars] = useState(false)\r\n\r\n\r\n    useEffect(() => {\r\n        CompareCislo(data, true, JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY)))\r\n        if (JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY)) === \"amountDelta\")\r\n            setStylesArrows({\r\n                sipkaNakazeni: {\r\n                    display: 'none'\r\n                },\r\n                sipkaPoslednyden: {\r\n                    transform: 'rotate(0deg)',\r\n                }\r\n            })\r\n        if (JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY_STAR)))\r\n            setOnlyStars(true)\r\n    }, [data])\r\n\r\n    function searchInputMesta() {\r\n        var input, filter, table, tr, td, i, txtValue;\r\n        input = document.getElementById(\"myInput\");\r\n        filter = input.value.toUpperCase();\r\n        table = document.getElementById(\"myTable\");\r\n        tr = table.getElementsByTagName(\"tr\");\r\n        for (i = 0; i < tr.length; i++) {\r\n            td = tr[i].getElementsByTagName(\"td\")[0];\r\n            if (td) {\r\n                txtValue = td.textContent || td.innerText;\r\n                if (txtValue.toUpperCase().indexOf(filter) > -1) {\r\n                    tr[i].style.display = \"\";\r\n                } else {\r\n                    tr[i].style.display = \"none\";\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function ShowOnlyStars() {\r\n        if (onlyStars)\r\n            return <IoMdStar className=\"star\" />\r\n        else\r\n            return <IoMdStarOutline className=\"star\" />\r\n    }\r\n\r\n    function SetingStarsAndLocalStorage() {\r\n        setOnlyStars(!onlyStars)\r\n        localStorage.setItem(LOCAL_STORAGE_KEY_STAR, !onlyStars)\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"textPreZObrazenieTabulky\" onClick={() => ZmeniTextTabulkaMesta(textPreZobrazenieObci, setTextPreZobrazenieObci, setShowHide, setSipkaObce)}>{textPreZobrazenieObci.text} <IoIosArrowDown style={sipkaObce} /></div>\r\n            <div style={ShowHide} className=\"tabulkaOkrajDivMain\">\r\n\r\n                <input type=\"text\" id=\"myInput\" onKeyUp={searchInputMesta} placeholder=\"Hľadať..\" className=\"inputSearch\" />\r\n                <div className=\"tabulkaMesta\">\r\n\r\n                    <table id=\"myTable\">\r\n                        <thead>\r\n                            <tr >\r\n                                <th onClick={() => SetingStarsAndLocalStorage()}>Obec {ShowOnlyStars()}</th>\r\n                                <th onClick={() => HandleSortObce('amountInfected', CompareCislo, data, sorting, setStylesArrows, setSorting)} >\r\n                                    Počet nakazených <FaSortAmountDown className=\"sipkaNakazeni\" style={styleArrows.sipkaNakazeni} />\r\n                                </th>\r\n                                <th onClick={() => HandleSortObce('amountDelta', CompareCislo, data, sorting, setStylesArrows, setSorting)} >\r\n                                    Za posledný deň <FaSortAmountDown className=\"sipkaPoslednyden\" style={styleArrows.sipkaPoslednyden} />\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <ActualTabulka data={data} onlyStars={onlyStars} rerender={rerender} setRerender={setRerender} />\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TabulkaMesta\r\n","export default function ZmenitTextTabulkaMesta(textPreZobrazenieObci, setTextPreZobrazenieObci, setShowHide, setSipkaObce) {\r\n    if (textPreZobrazenieObci.boolean) {\r\n        setTextPreZobrazenieObci({\r\n            boolean: !textPreZobrazenieObci.boolean,\r\n            text: \"Schovať údaje o jedntlivých obciach\"\r\n        })\r\n        setShowHide({\r\n            display: 'flex',\r\n        })\r\n        setSipkaObce({\r\n            transform: \"rotateX(180deg)\",\r\n            transition: 'all .2s ease-in',\r\n            marginBottom: '-3px',\r\n            marginLeft: '3px',\r\n        })\r\n    }\r\n    else {\r\n        setTextPreZobrazenieObci({\r\n            boolean: !textPreZobrazenieObci.boolean,\r\n            text: \"Zobraziť údaje o jedntlivých obciach\"\r\n        })\r\n        setShowHide({\r\n            display: 'none',\r\n        })\r\n        setSipkaObce({\r\n            transform: \"rotateX(0deg)\",\r\n            transition: 'all .2s ease-in',\r\n            marginBottom: '-3px',\r\n            marginLeft: '3px',\r\n        })\r\n    }\r\n}\r\n\r\n","import React, { useState, useEffect } from 'react'\r\n// import CountUp from 'react-countup'\r\nimport styled, { keyframes } from \"styled-components\";\r\nimport './css/covid.css'\r\n// import './tooltip.css'\r\nimport coronaIcon from \"../imgs/coronaIcon.svg\"\r\nimport wideArrow from \"../imgs/wideArrow.svg\"\r\nimport TabulkaMesta from \"./TabulkaMesta\"\r\nimport FormatNumber from './components/FormatNumber';\r\n// import DataGrid from \"./DataGrid\"\r\n\r\n\r\n// import DougnatChart from \"./DougnatChart\"\r\n\r\nfunction CovidSK() {\r\n    const [dataSvk, setDataSvk] = useState()\r\n    const svk = 'https://mapa.covid.chat/map_data'\r\n    // const [tabulkaMestaData, setTabulkaMestaData] = useState([])\r\n    const [maxDate, setMaxDate] = useState()\r\n    const [maxDateboolLean, setMaxDateboolLean] = useState(false)\r\n    const [grafNegativneTesty, setGrafNegativneTesty] = useState({ stav: true, styling: { textDecoration: 'none' } })\r\n    const [styleWideArrow, setStyleWideArrow] = useState()\r\n    // const [toolTip, setToolTip] = useState({ background: 'red' })\r\n\r\n    const [state, setState] = useState({\r\n        dataSvk: dataSvk,\r\n        direction: {\r\n            price_usd: 'asc',\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        const LoadData = async () => {\r\n            const response = await fetch(svk)\r\n            const data = await response.json()\r\n\r\n            setMaxDate(Object.keys(data.chart).length - 25)\r\n\r\n            setDataSvk([data])\r\n            setState({\r\n                dataSvk: data.map.sort((a, b) => (\r\n                    state.direction['cases'] === 'asc'\r\n                        ? parseFloat(a['cases']) - parseFloat(b['cases'])\r\n                        : parseFloat(b['cases']) - parseFloat(a['cases'])\r\n                )),\r\n                direction: {\r\n                    'cases': state.direction['cases'] === 'asc'\r\n                        ? 'desc'\r\n                        : 'asc'\r\n                }\r\n            })\r\n        }\r\n\r\n        LoadData()\r\n\r\n    }, [])\r\n\r\n    const negatTestyMoje = [83, 102, 50, 42, 120, 129, 118, 197, 228]\r\n\r\n    // const LoadData = async () => {\r\n    //     const response = await fetch(svk)\r\n    //     const data = await response.json()\r\n\r\n    //     setMaxDate(Object.keys(data.chart).length - 25)\r\n\r\n    //     setDataSvk([data])\r\n    //     setState({\r\n    //         dataSvk: data.map.sort((a, b) => (\r\n    //             state.direction['cases'] === 'asc'\r\n    //                 ? parseFloat(a['cases']) - parseFloat(b['cases'])\r\n    //                 : parseFloat(b['cases']) - parseFloat(a['cases'])\r\n    //         )),\r\n    //         direction: {\r\n    //             'cases': state.direction['cases'] === 'asc'\r\n    //                 ? 'desc'\r\n    //                 : 'asc'\r\n    //         }\r\n    //     })\r\n    // }\r\n\r\n    function handleData() {\r\n        let a = dataSvk[0].chart[Object.keys(dataSvk[0].tested_chart).length].recovered\r\n        let b = dataSvk[0].chart[Object.keys(dataSvk[0].tested_chart).length - 1].recovered\r\n        let c = a - b\r\n        let newRecovered = 0\r\n        if (c > 0) {\r\n            newRecovered = a - b\r\n        }\r\n\r\n        a = dataSvk[0].chart[Object.keys(dataSvk[0].tested_chart).length].deaths\r\n        b = dataSvk[0].chart[Object.keys(dataSvk[0].tested_chart).length - 1].deaths\r\n        c = a - b\r\n        let newDeaths = 0\r\n        if (c > 0) {\r\n            newDeaths = a - b\r\n        }\r\n\r\n\r\n        const GetTheDay = () => {\r\n            const lastDay = dataSvk[0].tested_chart[Object.keys(dataSvk[0].tested_chart).length - 1].day\r\n            if (lastDay === \"Pondelok\")\r\n                return \"pondelok\"\r\n            else if (lastDay === \"Utorok\")\r\n                return \"utorok\"\r\n            else if (lastDay === \"Streda\")\r\n                return \"stredu\"\r\n            else if (lastDay === \"Štvrtok\")\r\n                return \"štvrtok\"\r\n            else if (lastDay === \"Piatok\")\r\n                return \"piatok\"\r\n            else if (lastDay === \"Sobota\")\r\n                return \"sobotu\"\r\n            else return \"nedeľu\"\r\n\r\n        }\r\n        return (\r\n            <div>\r\n                <div className=\"cardsDiv\">\r\n                    <div className=\"cards cardsSVK\">\r\n                        <div className=\"topCard\">\r\n                            <div className=\"obrDiv\">\r\n                                <div className=\"circle\">\r\n                                    <img alt=\"\" src={coronaIcon} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"textCard\"><b>Slovenské údaje</b></div>\r\n                        </div>\r\n                        <div className=\"mainTextSK\">\r\n                            Počet testovaných: <FormatNumber prop={dataSvk[0].tested} /><br />\r\n                                Z toho pozitívnych testov: {dataSvk[0].infected}<br />\r\n                            Počet aktívnych prípadov: <b>{dataSvk[0].active}</b><br />\r\n                                Počet vyliečených: <span style={{ color: \"green\" }}>{dataSvk[0].recovered}</span><br />\r\n                            {dataSvk[0].deaths > 0 ? <>Počet úmrtí: {dataSvk[0].deaths}<br /></>\r\n                                : null}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"cards cardsSVK\">\r\n                        <div className=\"topCard\"><div className=\"textCard\"><b>Údaje za {GetTheDay()}</b></div></div>\r\n                        <div className=\"mainTextSK\">\r\n                            Počet nových testovaných: <span>{dataSvk[0].tested_chart[Object.keys(dataSvk[0].tested_chart).length - 1].tested}</span><br />\r\n                                Počet negatívnych testov: <span>{dataSvk[0].tested_chart[Object.keys(dataSvk[0].tested_chart).length - 1].tested - dataSvk[0].tested_chart[Object.keys(dataSvk[0].tested_chart).length - 1].infected}</span><br />\r\n                                Počet pozitívnych testov: <span>+{dataSvk[0].tested_chart[Object.keys(dataSvk[0].tested_chart).length - 1].infected}</span>\r\n                            {\r\n                                newRecovered > 0 ?\r\n                                    <> <br />Počet nových vyliečených: {newRecovered}</>\r\n                                    : null\r\n                            }\r\n                            {\r\n                                newDeaths > 0 ?\r\n                                    <>  <br />Počet nových úmrtí: {newDeaths}</>\r\n                                    : null\r\n                            }\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    const Heading = keyframes`\r\n    0%{\r\n        height: 0%;\r\n      }\r\n      100%{\r\n        height: 100%;\r\n      }\r\n    `;\r\n\r\n    const HomeHeader = styled.div`\r\n    height: 100%;\r\n    animation: ${Heading} .7s;\r\n    bottom: 0;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-evenly;\r\n    `;\r\n\r\n    function changeWideArrow() {\r\n        if (!maxDateboolLean) {\r\n            setMaxDate(-1)\r\n            setStyleWideArrow({\r\n                transform: 'rotateY(180deg)',\r\n            })\r\n        }\r\n        else {\r\n            setMaxDate(Object.keys(dataSvk[0].chart).length - 25)\r\n            setStyleWideArrow({\r\n                transform: 'rotateY(0deg)',\r\n            })\r\n        }\r\n        // dataSvk\r\n        setMaxDateboolLean(!maxDateboolLean)\r\n    }\r\n\r\n    function handleGraphAktivnePripady() {\r\n        let maxAktivnychInfikovanych = 0\r\n        dataSvk[0].chart.map(day1 => {\r\n            if (maxAktivnychInfikovanych < (day1.infected - day1.recovered - day1.deaths))\r\n                maxAktivnychInfikovanych = (day1.infected - day1.recovered - day1.deaths)\r\n            return maxAktivnychInfikovanych\r\n        })\r\n        const MaxInfected = 100 / maxAktivnychInfikovanych\r\n\r\n        // function testHover() {\r\n        //     setToolTip({\r\n        //         background: 'blue'\r\n        //     })\r\n        // }\r\n\r\n        // function testLeave() {\r\n        //     setToolTip({\r\n        //         background: 'red'\r\n        //     })\r\n        // }\r\n        return (\r\n            <div className=\"outsideDivGraf\">\r\n                <h1>Aktívne prípady</h1>\r\n                <div className=\"test\" onClick={changeWideArrow} style={styleWideArrow}>\r\n                    <div className=\"wideArrow\">\r\n                        <img alt=\"\" src={wideArrow} />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"svkGraf\">\r\n                    {dataSvk[0].chart.map((day1, index) =>\r\n                        index > maxDate ?\r\n                            <HomeHeader key={index}>\r\n                                {/* <div className=\"divInGraf\" style={toolTip}>{day1.infected}</div> */}\r\n                                <div className=\"aktivnePripadyGraf\" style={{ height: `calc(${MaxInfected * (day1.infected - day1.recovered - day1.deaths)}% )` }} >\r\n                                    {/* <div onMouseOver={testHover} onMouseLeave={testLeave} className=\"stlpcePrvehoGrafu\" style={{ height: `calc(${MaxInfected * (day1.infected - day1.recovered - day1.deaths)}% )` }} > */}\r\n                                    <span className=\"CountPrvehoGrafu\" >{day1.infected - day1.recovered - day1.deaths}</span>\r\n                                    {maxDateboolLean ?\r\n                                        index % 2 === 0 ?\r\n                                            <div className=\"spanDate\">{day1.date}</div>\r\n                                            : null\r\n                                        : <div className=\"spanDate\">{day1.date}</div>}\r\n                                </div>\r\n                            </HomeHeader>\r\n                            : null)}\r\n                </div>\r\n                <div className=\"medzeraPodDatumomGraf1\"></div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function handleGraph1() {\r\n        const MaxInfected = 100 / dataSvk[0].chart[Object.keys(dataSvk[0].chart).length - 1].infected\r\n        return (\r\n            <div className=\"outsideDivGraf\">\r\n                <h1>Celkový prírastok nakazených</h1>\r\n                <div className=\"test\" onClick={changeWideArrow} style={styleWideArrow}>\r\n                    <div className=\"wideArrow\">\r\n                        <img alt=\"\" src={wideArrow} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"svkGraf\">\r\n                    {\r\n                        dataSvk[0].chart.map((day1, index) =>\r\n                            index > maxDate ?\r\n                                <HomeHeader key={index}>\r\n                                    <div className=\"stlpcePrvehoGrafu tooltip\" style={{ height: `calc(${MaxInfected * day1.infected}% )` }} >\r\n                                        <span className=\"CountPrvehoGrafu\" >{day1.infected}</span>\r\n                                        {dataSvk[0].tested_chart[index - 1]\r\n                                            ? <><span className=\"countupFirstRed\">+{dataSvk[0].tested_chart[index - 1].infected}</span>\r\n                                            </>\r\n                                            : <><span className=\"countupFirstRed\">+1</span>\r\n                                            </>}\r\n                                        {\r\n                                            maxDateboolLean ?\r\n                                                index % 2 === 0 ?\r\n                                                    <div className=\"spanDate\">{day1.date}</div>\r\n                                                    : null\r\n                                                : <div className=\"spanDate\">{day1.date}</div>\r\n                                        }\r\n                                    </div>\r\n                                </HomeHeader>\r\n                                : null\r\n                        )\r\n                    }\r\n                </div>\r\n                <div className=\"medzeraPodDatumomGraf1\"></div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function negatTesty() {\r\n        if (grafNegativneTesty.stav)\r\n            setGrafNegativneTesty({ stav: false, styling: { textDecoration: 'line-through' } })\r\n        else\r\n            setGrafNegativneTesty({ stav: true, styling: { textDecoration: 'none' } })\r\n    }\r\n\r\n    function handleGraph2() {\r\n        let MaxDaily = 0\r\n        if (grafNegativneTesty.stav) {\r\n            if (dataSvk) {\r\n                dataSvk[0].tested_chart.map(pom1 => {\r\n                    if (pom1.tested > MaxDaily) {\r\n                        MaxDaily = pom1.tested - pom1.infected\r\n                    }\r\n                    return MaxDaily\r\n                })\r\n                MaxDaily = MaxDaily / 100\r\n            }\r\n        }\r\n        else {\r\n            if (dataSvk) {\r\n                dataSvk[0].tested_chart.map(pom1 => {\r\n                    if (pom1.infected > MaxDaily) {\r\n                        MaxDaily = pom1.infected\r\n                    }\r\n                    return MaxDaily\r\n                })\r\n                MaxDaily = MaxDaily / 100\r\n            }\r\n        }\r\n        return (\r\n            <div className=\"outsideDivGraf\">\r\n                <h1>Denný prírastok negatívnych a pozitívnych testov</h1>\r\n                <div className=\"test\" onClick={changeWideArrow} style={styleWideArrow}>\r\n                    <div className=\"wideArrow\">\r\n                        <img alt=\"\" src={wideArrow} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"svkGraf\">\r\n                    {maxDate === -1 ?\r\n                        <HomeHeader >  {/* prvy stlpec pre druhy graf */}\r\n                            <div className=\"PozitivneTestyDruhyGraf\" style={{ height: `calc(${1 / MaxDaily}%)` }} >\r\n                                <div className=\"spanDate\">{\"06-03-2020\"}</div>\r\n                            </div>\r\n\r\n                            {grafNegativneTesty.stav ?\r\n                                <div className=\"Graf2Stlpce\" style={{ height: `calc(${306 / MaxDaily}%)` }} >\r\n                                    <span className=\"CountDruhehoGrafu\">306</span>\r\n                                    <span className=\"CountDruhehoGrafu nakazeniZaDen\">+1</span>\r\n                                </div>\r\n                                : <div className=\"Graf2Stlpce\" style={{ height: `calc(${1 / MaxDaily}%)` }} >\r\n                                    <span className=\"CountDruhehoGrafu druhyGrafJedenTypSltpca\">+1</span>\r\n                                </div>}\r\n                        </HomeHeader>\r\n                        : ''}\r\n\r\n                    {dataSvk[0].tested_chart.map((day1, index) =>\r\n                        index > maxDate - 1 ?\r\n                            <HomeHeader key={index}>\r\n                                {\r\n                                    <>\r\n                                        <div className=\"PozitivneTestyDruhyGraf\" style={{ height: `calc(${(day1.infected) / MaxDaily}% )` }} >\r\n                                            {/* <div className=\"spanDate\">{day1.date}</div> */}\r\n\r\n                                            {\r\n                                                maxDateboolLean ?\r\n                                                    index % 2 === 0 ?\r\n                                                        null\r\n                                                        : <div className=\"spanDate\">{day1.date}</div>\r\n                                                    : <div className=\"spanDate\">{day1.date}</div>\r\n                                            }\r\n\r\n\r\n                                            {!grafNegativneTesty.stav ?\r\n                                                <span className=\" CountDruhehoGrafu druhyGrafJedenTypSltpca\" >+{day1.infected}</span>\r\n                                                : null}\r\n                                        </div>\r\n                                        {\r\n                                            negatTestyMoje[index]\r\n                                                ? grafNegativneTesty.stav ?\r\n                                                    <div className=\"Graf2Stlpce\" style={{ height: `calc(${negatTestyMoje[index] / MaxDaily}% )` }} >\r\n                                                        {(negatTestyMoje[index] > 99) ? <>\r\n                                                            <span className=\"CountDruhehoGrafu\" style={{ marginLeft: '-2px' }}>{negatTestyMoje[index]}</span>\r\n                                                            <span className=\" CountDruhehoGrafu nakazeniZaDen\">{day1.infected}</span>\r\n                                                        </>\r\n                                                            : <>\r\n                                                                <span className=\"CountDruhehoGrafu\">{negatTestyMoje[index]}</span>\r\n                                                                <span className=\" CountDruhehoGrafu nakazeniZaDen\">+{day1.infected}</span>\r\n                                                            </>\r\n                                                        }\r\n                                                    </div>\r\n                                                    : null\r\n                                                : grafNegativneTesty.stav ?\r\n                                                    <div className=\"Graf2Stlpce\" style={{ height: `calc(${day1.tested / MaxDaily}%)` }} >\r\n                                                        <span className=\"CountDruhehoGrafu\">{day1.tested - day1.infected}</span>\r\n                                                        <span className=\" CountDruhehoGrafu nakazeniZaDen\">+{day1.infected}</span>\r\n                                                    </div>\r\n                                                    : null\r\n                                        }\r\n                                    </>\r\n                                }\r\n                            </HomeHeader>\r\n                            : null\r\n                    )}\r\n                </div>\r\n                <div className=\"vysvetlivkyPodGrafom\">\r\n                    <div style={grafNegativneTesty.styling} onClick={negatTesty}><div className=\"blue\" ></div>Počet negatívnych testov</div>\r\n                    <div><div className=\"red\"></div>Počet pozitívnych testov</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    function sortBy(key) {\r\n        setState({\r\n            dataSvk: dataSvk[0].map.sort((a, b) => (\r\n\r\n                state.direction[key] === 'asc'\r\n                    ? parseFloat(a[key]) - parseFloat(b[key])\r\n                    : <>{parseFloat(b[key]) - parseFloat(a[key])} </>\r\n            )),\r\n            direction: {\r\n                [key]: state.direction[key] === 'asc'\r\n                    ? 'desc'\r\n                    : 'asc'\r\n            }\r\n        })\r\n    }\r\n\r\n    // const Testing = () => {\r\n    //     const lastDay = dataSvk[0].tested_chart[Object.keys(dataSvk[0].tested_chart).length - 1].day\r\n    //     if (lastDay === \"Pondelok\")\r\n    //         return \"Pondelok\"\r\n    //     else if (lastDay === \"Utorok\")\r\n    //         return \"Utorok\"\r\n    //     else if (lastDay === \"Streda\")\r\n    //         return \"Stredu\"\r\n    //     else if (lastDay === \"Štvrtok\")\r\n    //         return \"Štvrtok\"\r\n    //     else if (lastDay === \"Piatok\")\r\n    //         return \"Piatok\"\r\n    //     else if (lastDay === \"Sobota\")\r\n    //         return \"Sobota\"\r\n    //     else return \"Nedeľa\"\r\n    // }\r\n    return (\r\n        <div className=\"covidApp\">\r\n            {dataSvk ?\r\n                <>\r\n                    {/* <div className=\"PocetPripadovdoNav\">za {Testing()}: {dataSvk[0].tested_chart[Object.keys(dataSvk[0].tested_chart).length - 1].infected}  </div> */}\r\n                    {/* <div className=\"PripadydoNavDiv\">\r\n                        <ul className=\"PripadydoNavUl\">\r\n                            <li></li>\r\n                            <li>\r\n                                {Testing()}: {dataSvk[0].tested_chart[Object.keys(dataSvk[0].tested_chart).length - 1].infected} prípadov\r\n                            </li>\r\n                        </ul>\r\n                    </div> */}\r\n                    {handleData()}\r\n                    {/* <DataGrid data={dataSvk[0].map} /> */}\r\n\r\n                    <TabulkaMesta tabulkaData={dataSvk[0].districts} sortBy={sortBy} />\r\n                    {/* <div className=\"tooltip\">Hover over me\r\n                        <div className=\"tooltiptext\">Tooltip text</div>\r\n                        </div> */}\r\n                    {/* <DougnatChart /> */}\r\n\r\n                    {handleGraphAktivnePripady()}\r\n\r\n                    {handleGraph1()}\r\n                    {handleGraph2()}\r\n\r\n\r\n\r\n\r\n                    <br></br><br></br><br></br><br></br>\r\n                </>\r\n                : ''}\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default CovidSK\r\n","import React from 'react'\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { Chart } from 'react-chartjs-2';\r\nimport './css/cssPreBarGrafy.css'\r\n\r\nfunction BarGraf({ props }) {\r\n\r\n    // console.log(props.datumy.slice(-29))\r\n    // console.log(props.datumy.length - 1)\r\n    // console.log(props.datumy.slice(-(props.datumy.length - 1)))\r\n    // console.log(props.dataSetsDailyCases.datasets)\r\n    const allData = {\r\n        dataSetsCases: {\r\n            labels: props.datumy,\r\n            datasets: [{\r\n                label: 'Počet mŕtvych',\r\n                backgroundColor: \"grey\",\r\n                data: props.dataSetsDeaths.datasets[0].data,\r\n            },\r\n            {\r\n                label: 'Počet vyliečených',\r\n                backgroundColor: \"#57C757\",\r\n                data: props.dataSetsRecovered.datasets[0].data,\r\n            },\r\n            {\r\n                label: 'Počet nakazených',\r\n                backgroundColor: \"#FF4D4D\",\r\n                data: props.dataSetsCases.datasets[0].data,\r\n            }],\r\n        },\r\n\r\n        // dataSetsDeaths: {\r\n        //     labels: props.datumy,\r\n        //     datasets: props.dataSetsDeaths.datasets\r\n        // },\r\n\r\n\r\n        // dataSetsRecovered: {\r\n        //     labels: props.datumy,\r\n        //     datasets: props.dataSetsRecovered.datasets\r\n        // },\r\n\r\n        dataSetsActiveCases: {\r\n            labels: props.datumy,\r\n            datasets: props.dataSetsActiveCases.datasets\r\n        },\r\n\r\n        dataSetsDailyCases: {\r\n            // labels: props.datumy,\r\n            // labels: [2, 3, 4, 5, 6],\r\n            labels: props.datumy.slice(-(props.datumy.length - 1)),\r\n            // datasets: props.dataSetsActiveCases.datasets,\r\n            datasets: props.dataSetsDailyCases.datasets\r\n        },\r\n\r\n        options: {\r\n            maintainAspectRatio: false,\r\n            responsive: true,\r\n\r\n            legend: {\r\n                position: \"bottom\",\r\n                labels: {\r\n                    padding: 25,\r\n                },\r\n                onClick: function (e, legendItem) {\r\n                    const defaultLegendClickHandler = () => { return Chart.defaults }\r\n                    defaultLegendClickHandler(e, legendItem);\r\n                    // return \r\n                    var index = legendItem.datasetIndex;\r\n                    var ci = this.chart;\r\n                    var meta = ci.getDatasetMeta(index);\r\n                    // See controller.isDatasetVisible comment\r\n                    meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null;\r\n\r\n                    // We hid a dataset ... rerender the chart\r\n                    ci.update();\r\n\r\n                }\r\n            },\r\n            scales: {\r\n                xAxes: [{\r\n                    stacked: true,\r\n                    gridLines: {\r\n                        display: false,\r\n                    }\r\n                }],\r\n                yAxes: [{\r\n                    stacked: true,\r\n                    ticks: {\r\n                        callback: function (value) {\r\n                            return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \")\r\n                        }\r\n                    }\r\n                }]\r\n            },\r\n            tooltips: {\r\n                // mode: 'x',\r\n                mode: 'index',\r\n                position: 'nearest',\r\n                intersect: false,\r\n                callbacks: {\r\n                    label: function (tooltipItem, chart) {\r\n                        var datasetLabel = chart.datasets[tooltipItem.datasetIndex].label || '';\r\n\r\n                        return datasetLabel + \": \" + tooltipItem.yLabel.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \")\r\n                    }\r\n                },\r\n            },\r\n            animation: {\r\n                duration: 500,\r\n                onProgress: function () {\r\n                    // console.log(props.nacitatViacUdajov)\r\n                    if (props.nacitatViacUdajov === false) {\r\n                        var chartInstance = this.chart,\r\n                            ctx = chartInstance.ctx;\r\n                        ctx.textAlign = 'center';\r\n                        ctx.fillStyle = \"rgba(0, 0, 0, .75)\";\r\n                        ctx.textBaseline = 'bottom';\r\n                        if (window.innerWidth > 1220) {\r\n                            ctx.font = \"bold 12px Arial\";\r\n                        }\r\n                        else if (window.innerWidth > 720) {\r\n                            ctx.font = \"bold 11px Arial\";\r\n                        }\r\n                        else {\r\n                            ctx.font = \"bold 6px Arial\";\r\n                        }\r\n                        this.data.datasets.forEach(function (dataset, i) {\r\n                            var meta = chartInstance.controller.getDatasetMeta(i);\r\n                            meta.data.forEach(function (bar, index) {\r\n                                var data = dataset.data[index];\r\n                                if (index % 2 === 0) {\r\n                                    if (dataset.data._chartjs.listeners[0].chart.legend.legendItems[0].hidden === true\r\n                                        || dataset.data._chartjs.listeners[0].chart.legend.legendItems[0].hidden === false) {\r\n\r\n                                        if (dataset.data._chartjs.listeners[0].chart.legend.legendItems[0].text === \"Počet mŕtvych\") { //overenie pre posledny graf (tri udaje v objekte)\r\n                                            let pom1 = []\r\n                                            dataset.data._chartjs.listeners[0].chart.legend.legendItems.map((jedno, id) => {\r\n                                                pom1[id] = jedno.hidden\r\n                                                return pom1\r\n                                            })\r\n                                            if (bar._model.datasetLabel === \"Počet mŕtvych\" && pom1[0] === false)\r\n                                                ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n                                            else if (bar._model.datasetLabel === \"Počet vyliečených\" && pom1[1] === false)\r\n                                                ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n                                            else if (bar._model.datasetLabel === \"Počet nakazených\" && pom1[2] === false)\r\n                                                ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n\r\n                                        }\r\n                                        else\r\n                                            ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    if (data < 100) {\r\n                                        if (dataset.data._chartjs.listeners[0].chart.legend.legendItems[0].hidden === true\r\n                                            || dataset.data._chartjs.listeners[0].chart.legend.legendItems[0].hidden === false) {\r\n\r\n                                            if (dataset.data._chartjs.listeners[0].chart.legend.legendItems[0].text === \"Počet mŕtvych\") { //overenie pre posledny graf (tri udaje v objekte)\r\n                                                let pom1 = []\r\n                                                dataset.data._chartjs.listeners[0].chart.legend.legendItems.map((jedno, id) => {\r\n                                                    pom1[id] = jedno.hidden\r\n                                                    return pom1\r\n                                                })\r\n                                                if (bar._model.datasetLabel === \"Počet mŕtvych\" && pom1[0] === false)\r\n                                                    ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n                                                else if (bar._model.datasetLabel === \"Počet vyliečených\" && pom1[1] === false)\r\n                                                    ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n                                                else if (bar._model.datasetLabel === \"Počet nakazených\" && pom1[2] === false)\r\n                                                    ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n\r\n                                            }\r\n                                            else\r\n                                                ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            })\r\n                        })\r\n                    }\r\n                }\r\n            },\r\n        },\r\n    }\r\n\r\n    function FormatNumberShorter(x) {\r\n        if (isNaN(x) || (x < 1000)) {\r\n            return x\r\n        }\r\n        else if (x < 10000) {\r\n            return (x / 1000).toFixed(2) + \"k\"\r\n        }\r\n        else if (x < 100000) {\r\n            return (x / 1000).toFixed(1) + \"k\"\r\n        }\r\n\r\n        else if (x < 1000000) {\r\n            // return (x / 1000).toFixed(1) + \"k\"\r\n            return Math.round((x / 1000)) + \"k\"\r\n\r\n        }\r\n        else if (x < 10000000) {\r\n            return (x / 1000000).toFixed(1) + \"M\"\r\n        }\r\n\r\n        else if (x < 1000000000) {\r\n            return (x / 1000000).toFixed(1) + \"M\"\r\n        }\r\n\r\n        else if (x < 1000000000000) {\r\n            return Math.round((x / 1000000000)) + \"B\"\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"\">\r\n            {/* {console.log(\"asdasd\")} */}\r\n            <div className=\"mainDivPreGrafy\" >\r\n\r\n\r\n                <div className=\"barsGrafy\" >\r\n                    <h1>Denný prírastok nakazených</h1>\r\n                    <Bar\r\n                        data={allData.dataSetsDailyCases}\r\n                        options={allData.options}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"barsGrafy\" >\r\n                    <h1>Celkový počet aktívnych prípadov</h1>\r\n                    <Bar\r\n                        data={allData.dataSetsActiveCases}\r\n                        options={allData.options}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"barsGrafy\"  >\r\n                    <h1>Celkový prírastok nakazených/vyliečených</h1>\r\n                    <Bar\r\n                        data={allData.dataSetsCases}\r\n                        options={allData.options}\r\n                    />\r\n                </div>\r\n\r\n                {/* <div className=\"barsGrafy\" >\r\n                    <h1>Celkový počet vyliečených</h1>\r\n                    <Bar\r\n                        data={allData.dataSetsRecovered}\r\n                        options={allData.options}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"barsGrafy\" >\r\n                    <h1>Celkový počet úmrtí</h1>\r\n                    <Bar\r\n                        data={allData.dataSetsDeaths}\r\n                        options={allData.options}\r\n                    />\r\n                </div> */}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BarGraf\r\n","import React, { useState, useEffect } from 'react'\r\nimport BarGraf from './BarGraf';\r\nimport DougnatChart from './DougnatChart';\r\nimport GetLastData from './components/GetLastData';\r\n\r\nconst LOCAL_STORAGE_LASTDAY = \"lastdayStorage\"\r\n\r\nfunction GrafyKrajina(props) {\r\n    // console.log(props.location.state)\r\n    const match = props.match\r\n    const [dataforChart, setDataforChart] = useState()\r\n    const [LastDayData, setLastDayData] = useState()\r\n\r\n    const [loadMoreData, setLoadMoreData] = useState({\r\n        text: 'Zobraziť viac dni',\r\n        bool: false\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (!(match.params.id === \"Svet\"))\r\n            GetLastData(props, LOCAL_STORAGE_LASTDAY, setLastDayData)\r\n    }, [props])\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            let response1, data1, datumy, valuesCases, valueRecovered, valueDeaths, dailyCases = [], valueActiveCases = []\r\n            if (match.params.id === \"Svet\") {\r\n                if (loadMoreData.bool === false)\r\n                    response1 = await fetch(`https://disease.sh/v2/historical/All`)\r\n                else\r\n                    response1 = await fetch(`https://disease.sh/v2/historical/All?lastdays=all`)\r\n                data1 = await response1.json()\r\n                datumy = Object.keys(data1.cases)\r\n                valuesCases = Object.values(data1.cases)\r\n                valueRecovered = Object.values(data1.recovered)\r\n                valueDeaths = Object.values(data1.deaths)\r\n\r\n            }\r\n            else {\r\n                if (loadMoreData.bool === false)\r\n                    response1 = await fetch(`https://disease.sh/v2/historical/${match.params.id}`)\r\n                else\r\n                    response1 = await fetch(`https://disease.sh/v2/historical/${match.params.id}/?lastdays=all`)\r\n\r\n                data1 = await response1.json()\r\n                datumy = Object.keys(data1.timeline.cases)\r\n                valuesCases = Object.values(data1.timeline.cases)\r\n\r\n                valueRecovered = Object.values(data1.timeline.recovered)\r\n\r\n                valueDeaths = Object.values(data1.timeline.deaths)\r\n\r\n            }\r\n\r\n            datumy.map((jedenDatum, id) => {\r\n                if (valuesCases[id] > 0) {\r\n                    var d = new Date(jedenDatum);\r\n                    var datestring = d.getDate() + \". \" + (d.getMonth() + 1) + \". \" + d.getFullYear()\r\n                    return datumy[id] = datestring\r\n                }\r\n                else return null\r\n            })\r\n\r\n            // let testingX = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n            // console.log(\"length: \" + testingX.length)\r\n            // testingX = testingX.slice(-8)\r\n\r\n\r\n            valuesCases.map((oneCase, id) => {\r\n                valueActiveCases[id] = oneCase - valueRecovered[id] - valueDeaths[id]\r\n                if (id > 0) {\r\n                    dailyCases[id - 1] = valuesCases[id] - valuesCases[id - 1]\r\n                }\r\n\r\n                return dailyCases\r\n            })\r\n\r\n            valuesCases = valuesCases.filter(jedno => jedno !== 0);\r\n            valueRecovered = valueRecovered.splice(-valuesCases.length)\r\n            valueDeaths = valueDeaths.splice(-valuesCases.length)\r\n            datumy = datumy.splice(-valuesCases.length)\r\n            dailyCases = dailyCases.slice(-valuesCases.length)\r\n            valueActiveCases = valueActiveCases.slice(-valuesCases.length)\r\n\r\n\r\n\r\n\r\n\r\n            if (LastDayData) {\r\n                let pom = Object.keys(data1.timeline.cases)[Object.keys(data1.timeline.cases).length - 1]\r\n                var d = new Date(pom);\r\n                d.setDate(d.getDate() + 1)\r\n                var lastDataDatum = d.getDate() + \". \" + (d.getMonth() + 1) + \". \" + d.getFullYear()\r\n                valuesCases.push(LastDayData.cases)\r\n                dailyCases.push(LastDayData.todayCases)\r\n                valueDeaths.push(LastDayData.deaths)\r\n                datumy.push(lastDataDatum)\r\n                valueRecovered.push(LastDayData.recovered)\r\n                valueActiveCases.push(LastDayData.active)\r\n            }\r\n\r\n            setDataforChart(\r\n                {\r\n                    nacitatViacUdajov: loadMoreData.bool,\r\n                    datumy: datumy,\r\n\r\n                    dataSetsCases: {\r\n                        datasets: [\r\n                            {\r\n                                label: \"Celkový počet nakazených\",\r\n                                data: valuesCases,\r\n                                backgroundColor: \"rgb(249, 70, 68)\",\r\n                                fillColor: 'black',\r\n                                hoverBackgroundColor: 'red',\r\n                            }\r\n                        ]\r\n                    },\r\n\r\n                    dataSetsDeaths: {\r\n                        datasets: [\r\n                            {\r\n                                label: \"Celkový počet úmrtí\",\r\n                                data: valueDeaths,\r\n                                backgroundColor: \"grey\",\r\n                                hoverBackgroundColor: 'grey',\r\n                            }\r\n                        ]\r\n                    },\r\n\r\n                    dataSetsRecovered: {\r\n                        datasets: [\r\n                            {\r\n                                label: \"Celkový počet vyliečených\",\r\n                                data: valueRecovered,\r\n                                backgroundColor: \"green\",\r\n                                hoverBackgroundColor: 'green',\r\n                            }\r\n                        ]\r\n                    },\r\n\r\n                    dataSetsActiveCases: {\r\n                        datasets: [\r\n                            {\r\n                                label: \"Celkový počet aktivnych prípadov\",\r\n                                data: valueActiveCases,\r\n                                backgroundColor: \"blue\",\r\n                                hoverBackgroundColor: 'blue',\r\n                            }\r\n                        ]\r\n                    },\r\n\r\n                    dataSetsDailyCases: {\r\n                        datasets: [\r\n                            {\r\n                                label: \"Denný prírastok nakazených\",\r\n                                data: dailyCases,\r\n                                backgroundColor: \"salmon\",\r\n                                hoverBackgroundColor: 'salmon',\r\n                            }\r\n                        ]\r\n                    },\r\n\r\n                }\r\n            )\r\n        }\r\n\r\n        fetchData()\r\n\r\n    }, [loadMoreData, match.params.id, LastDayData])\r\n    // }, [loadMoreData])\r\n\r\n\r\n    const ZmenitLoadMoreData = () => {\r\n        if (loadMoreData.bool === false)\r\n            setLoadMoreData({\r\n                text: 'Zobraziť menej dní',\r\n                bool: !loadMoreData.bool\r\n            })\r\n        else {\r\n            setLoadMoreData({\r\n                text: 'Zobraziť viac dní',\r\n                bool: !loadMoreData.bool\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        dataforChart ?\r\n            <div className=\"testingGrafy\">\r\n                {/* {console.log(\"graffyyyy\")} */}\r\n\r\n                {match.params.id === \"Svet\" ?\r\n                    <h1>Covid-19 vo svete</h1>\r\n\r\n                    :\r\n                    < h1 > Covid - 19 v krajine {match.params.id}</h1>\r\n                }\r\n\r\n                <DougnatChart cases={dataforChart.dataSetsCases.datasets[0].data[dataforChart.dataSetsCases.datasets[0].data.length - 1]}\r\n                    recovered={dataforChart.dataSetsRecovered.datasets[0].data[dataforChart.dataSetsRecovered.datasets[0].data.length - 1]}\r\n                    deaths={dataforChart.dataSetsDeaths.datasets[0].data[dataforChart.dataSetsDeaths.datasets[0].data.length - 1]} />\r\n\r\n                <div className=\"NacitatViacDniDoGrafov\" onClick={ZmenitLoadMoreData}>\r\n                    {loadMoreData.text}\r\n                </div>\r\n\r\n\r\n                <div >\r\n                    <BarGraf props={dataforChart} />\r\n                </div>\r\n            </div >\r\n            : null\r\n    )\r\n}\r\n\r\nexport default GrafyKrajina\r\n","import axios from 'axios'\r\n\r\nexport default function GetLastData(props, LOCAL_STORAGE_LASTDAY, setLastDayData) {\r\n    var returnThis\r\n\r\n    if (props.location.state) {\r\n        returnThis = props.location.state[0]\r\n        localStorage.setItem(LOCAL_STORAGE_LASTDAY, JSON.stringify(props.location.state[0]))\r\n        setLastDayData(returnThis)\r\n        console.log(\"this is good\")\r\n\r\n        return returnThis\r\n    }\r\n    else if (localStorage.getItem(LOCAL_STORAGE_LASTDAY)) {\r\n        returnThis = JSON.parse(localStorage.getItem(LOCAL_STORAGE_LASTDAY))\r\n        setLastDayData(returnThis)\r\n\r\n        return returnThis\r\n    }\r\n\r\n    else {\r\n        var pom = []\r\n        axios.get('https://disease.sh/v2/countries')\r\n            .then(response => {\r\n                const allowed = [\"country\", \"active\", \"todayCases\", \"cases\", \"deaths\", \"recovered\"]\r\n                response.data.map((udaj, id) => {\r\n                    Object.keys(udaj)\r\n                        .filter(key => allowed.includes(key))\r\n                        .reduce((obj, key) => {\r\n                            obj[key] = udaj[key];\r\n                            pom[id] = obj\r\n                            return obj;\r\n                        }, {})\r\n                    return null\r\n                })\r\n                pom = pom.filter(function (e) {\r\n                    return e.country === props.match.params.id\r\n                })\r\n                localStorage.setItem(LOCAL_STORAGE_LASTDAY, JSON.stringify(pom[0]))\r\n                setLastDayData(pom[0])\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n    }\r\n}\r\n\r\n","import React from 'react';\nimport './App.css';\nimport Nav from './Nav';\n\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom'\nimport CovidApp from './Covid/CovidApp';\n// const CovidApp = React.lazy(() => import('./Covid/CovidApp'));\n\nimport CovidSK from './Covid/CovidSK';\nimport GrafyKrajina from './Covid/GrafyKrajina';\n// const CovidSK = React.lazy(() => import('./Covid/CovidSK'));\n\n// import CovidApp from './Covid/CovidApp';\n// import CovidSK from './Covid/CovidSK';\n// import TodoApp from './Todo/TodoApp';\n// import { polyfill } from 'es6-promise'; polyfill();\n// require('es6-promise').polyfill();\n// require('isomorphic-fetch');\n\n\nfunction App() {\n  return (\n    <Router basename=\"/\">\n      <div className=\"App\">\n        <Nav />\n        <Switch>\n          <Route path=\"/\" component={CovidApp} exact />\n          <Route path=\"/Covid/CovidSK\" component={CovidSK} />\n          <Route path=\"/Covid/CovidApp\" exact component={CovidApp} />\n          <Route path=\"/Covid/CovidApp/:id\" component={GrafyKrajina} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n","module.exports = __webpack_public_path__ + \"static/media/coronaIcon.02ed3e1a.svg\";","module.exports = __webpack_public_path__ + \"static/media/wideArrow.d20604a8.svg\";","module.exports = __webpack_public_path__ + \"static/media/earth.cdc4522b.svg\";","module.exports = __webpack_public_path__ + \"static/media/slovakiaIcon.a29682dd.svg\";"],"sourceRoot":""}