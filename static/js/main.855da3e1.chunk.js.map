{"version":3,"sources":["Nav.js","Covid/components/FormatNumber.js","Covid/PrvyRiadokTabulky.js","Covid/SvetTabulka.js","Covid/components/DataWorld.js","Covid/CovidApp.js","Covid/components/FormatNumberShorter.js","Covid/BarGrafSvk.js","Covid/CompareCislo.js","Covid/components/HandleSortObce.js","Covid/components/ActualTabulka.js","Covid/TabulkaMesta.js","Covid/components/ZmenitTextTabulkaMesta.js","Covid/components/HandleDataSvk.js","Covid/components/FuncSetDataForGraph.js","Covid/CovidSK.js","Covid/BarGraf.js","Covid/DougnatChart.js","Covid/GrafyKrajina.js","Covid/components/GetLastData.js","App.js","index.js","imgs/earth.svg","imgs/slovakiaIcon.svg"],"names":["Nav","useState","state","setState","navStyle","color","useEffect","a","fetch","response","json","data","tested_chart","length","LoadData","className","style","to","alt","src","earthIcon","slovakiaIcon","sklnovaniePripadov","day","infected","PocPripadov","FormatNumber","num","prop","toString","replace","PrvyRiadokTabulky","props","dataKontinenty","setDataKontinenty","doTabulkyPrvyRiadok","setDoTabulkyPrvyRiadok","sipkyDole","setSipkyDole","transition","marginBottom","marginLeft","sipkaKontinenty","setSipkaKontinenty","position","left","styleForRollDown","setStyleForRollDown","axios","get","then","res","kontinent","result","filter","obj","continent","mainData","key","background","onClick","transform","tests","cases","active","todayCases","deaths","fontWeight","todayDeaths","recovered","map","oneKontinent","id","width","SvetTabulka","ikonka","setIkonka","setKontinent","scrollPerformance","setScrollPerformance","LastDayData","setLastDayData","Svet","boxShadow","Europe","V4","North_America","Asia","South_America","Africa","Australia_Oceania","style4Buttons","setStyle4Buttons","pomForStyleButtons","constStyleforButtons","useReducer","action","type","prevState","Error","dispatch","zmenIkonku","allowed","pom","countriesData","udaj","Object","keys","includes","reduce","myStyle2","window","addEventListener","document","querySelector","getBoundingClientRect","y","greenBackgroundforTR","LastDataFunction","propCountry","e","country","onKeyUp","tr","td","i","getElementById","value","toUpperCase","getElementsByTagName","textContent","innerText","indexOf","display","placeholder","sortBy","item","pathname","htmlFor","DataWorld","numberTrans3","b","output","toFixed","CovidApp","setMainData","doughnatData","setDoughnatData","setCountriesData","direction","price_usd","response1","data1","sort","parseFloat","fetchData","FormatNumberShorter","x","isNaN","Math","round","BarGrafSvk","allData","dataSetsCases","labels","datumy","datasets","label","backgroundColor","dataSetsDeaths","dataSetsRecovered","dataSetsDailyCasesAndTests","dataSetsDailyCases","dataSetsDailyTests","dataSetsActiveCases","options","maintainAspectRatio","responsive","legend","padding","legendItem","Chart","defaults","index","datasetIndex","ci","this","chart","meta","getDatasetMeta","hidden","update","scales","xAxes","stacked","gridLines","yAxes","ticks","callback","tooltips","mode","intersect","callbacks","tooltipItem","yLabel","animation","duration","onProgress","nacitatViacUdajov","chartInstance","ctx","textAlign","fillStyle","textBaseline","innerWidth","font","forEach","dataset","controller","bar","_chartjs","listeners","legendItems","text","pom1","jedno","_model","datasetLabel","fillText","CompareCislo","sorting","stlpec","A","amount","B","JSON","parse","localStorage","getItem","infected_delta","HandleSortObce","setStylesArrows","setSorting","setItem","stringify","desc","sipkaNakazeni","sipkaPoslednyden","ActualTabulka","onlyStars","rerender","setRerender","GimmeStar","obec","local","SaveObecStar","dataObce","push","jednaObec","title","TabulkaMesta","tabulkaData","styleArrows","ShowHide","setShowHide","boolean","textPreZobrazenieObci","setTextPreZobrazenieObci","sipkaObce","setSipkaObce","setOnlyStars","maxHeight","ZmeniTextTabulkaMesta","HandleDataSvk","GetLastData","tested","lastDay","GetTheDay","districts","FuncSetDataForGraph","setDataForChart","dailyCases","valueActiveCases","valuesCases","valueDeaths","valueRecovered","valueTest","booleanProp","fillColor","hoverBackgroundColor","CovidSK","dataSvk","setDataSvk","dataForChart","bool","loadMoreData","setLoadMoreData","date","infected_daily","tested_daily","slice","LoadDataBegin","ZmenitLoadMoreData","LoadDataOnChange","BarGraf","DougnatChart","height","totalSpolu","percent","centerText","easing","GrafyKrajina","match","dataforChart","setDataforChart","params","LOCAL_STORAGE_LASTDAY","returnThis","location","console","log","catch","error","values","timeline","jedenDatum","d","Date","datestring","getDate","getMonth","getFullYear","oneCase","splice","setDate","lastDataDatum","App","basename","path","component","exact","ReactDOM","render","module","exports"],"mappings":"+UAkEeA,MA5Df,WAAgB,IAAD,EACeC,qBADf,mBACJC,EADI,KACGC,EADH,KAEPC,EAAW,CACXC,MAAO,SAgCX,OA9BAC,qBAAU,YACQ,uCAAG,8BAAAC,EAAA,sEACUC,MAAM,oCADhB,cACPC,EADO,gBAEMA,EAASC,OAFf,OAEPC,EAFO,OAIbR,EAASQ,EAAKC,aAAaD,EAAKC,aAAaC,OAAS,IAJzC,2CAAH,qDAMdC,KACD,IAuBC,yBAAKC,UAAU,UACX,wBAAIA,UAAU,YACV,4BACI,kBAAC,IAAD,CAAMC,MAAOZ,EAAUa,GAAG,mBACtB,6BACI,yBAAKC,IAAI,GAAGC,IAAKC,IAAWL,UAAU,cAD1C,oBAKR,4BACI,kBAAC,IAAD,CAAMC,MAAOZ,EAAUa,GAAG,kBACtB,6BACI,yBAAKC,IAAI,GAAGC,IAAKE,IAAcN,UAAU,YAD7C,qBAEG,yBAAKA,UAAU,eAjClB,WAChB,GAAIb,EAAO,CACP,IAAIoB,EAAqB,cAMzB,OALkB,IAAdpB,EAAMqB,IACND,EAAqB,YAChBpB,EAAMsB,SAAW,GAAKtB,EAAMsB,SAAW,IAC5CF,EAAqB,cAGrB,6BAAMpB,EAAMqB,IAAZ,KAAkB,8BAAOrB,EAAMsB,UAA/B,IAAiDF,GAGpD,OAAO,KAsBaG,U,6DChDlBC,MARf,SAAsBC,GAClB,OAAIA,GAAOA,EAAIC,KAAO,IACXD,EAAIC,KAAKC,WAAWC,QAAQ,wBAAyB,KAEvDH,EAAcA,EAAIC,KACb,M,QC0IHG,MA1If,SAA2BC,GAAO,MAEc/B,qBAFd,mBAEvBgC,EAFuB,KAEPC,EAFO,OAGwBjC,qBAHxB,mBAGvBkC,EAHuB,KAGFC,EAHE,OAIInC,oBAAS,GAJb,mBAIvBoC,EAJuB,KAIZC,EAJY,OAKgBrC,mBAAS,CACnDsC,WAAY,kBACZC,aAAc,OACdC,WAAY,QARc,mBAKvBC,EALuB,KAKNC,EALM,OAUkB1C,mBAAS,CACrD2C,SAAU,WACVC,KAAM,UACNN,WAAY,oBAbc,mBAUvBO,EAVuB,KAULC,EAVK,KA2E9B,OA1DAzC,qBAAU,WACN0C,IAAMC,IAAN,oCACKC,MAAK,SAAAC,GACFjB,EAAkB,CAACiB,EAAIxC,YAShC,CAACqB,EAAMoB,YAGV9C,qBAAU,WACN,GAAI2B,EAAgB,CAChB,IAAIoB,EAASpB,EAAe,GAAGqB,QAAO,SAAAC,GAClC,OAAOA,EAAIC,YAAcxB,EAAMoB,aAEnChB,EAAuBiB,EAAO,OAEnC,CAACpB,EAAgBD,EAAMoB,YAqCtBN,GAAoBb,GAAkBS,GAAmBI,GAAoBd,EAAMyB,UAAYzB,EAC3F,oCAGyB,SAApBA,EAAMoB,UACH,oCACI,wBAAIM,KAAM,EAAG1C,MAAO,CAAE2C,WAAY,uBAC9B,wBAAIC,QAxCE,WAC1BtB,GAAcD,GACVA,GACAM,EAAmB,CACfkB,UAAW,iBACXtB,WAAY,kBACZC,aAAc,OACdC,WAAY,QAEhBM,EAAoB,CAGhBR,WAAY,sBAIhBQ,EAAoB,CAChBH,SAAU,WACVC,KAAM,UACNN,WAAY,oBAIhBI,EAAmB,CACfkB,UAAW,eACXtB,WAAY,kBACZC,aAAc,OACdC,WAAY,WAcI,0BAAM1B,UAAU,wBAAhB,gBAAkD,kBAAC,IAAD,CAAcC,MAAO0B,IACnE,yBAAK3B,UAAU,aACX,yBAAKA,UAAU,mBAAkB,kBAAC,EAAD,CAAca,KAAMI,EAAMyB,SAAS,GAAGK,YAKnF,4BAAI,kBAAC,EAAD,CAAclC,KAAMI,EAAMyB,SAAS,GAAGM,SAC1C,4BAAI,kBAAC,EAAD,CAAcnC,KAAMI,EAAMyB,SAAS,GAAGO,UAC1C,wBAAIhD,MAAO,CAAE2C,WAAY,4BAAzB,IAAuD,kBAAC,EAAD,CAAc/B,KAAMI,EAAMyB,SAAS,GAAGQ,cAC7F,4BAAI,kBAAC,EAAD,CAAcrC,KAAMI,EAAMyB,SAAS,GAAGS,UAC1C,wBAAIlD,MAAO,CAAEX,MAAO,4BAA6B8D,WAAY,SAA7D,IAAwE,kBAAC,EAAD,CAAcvC,KAAMI,EAAMyB,SAAS,GAAGW,eAC9G,wBAAIpD,MAAO,CAAEmD,WAAY,OAAQ9D,MAAO,YAAa,kBAAC,EAAD,CAAcuB,KAAMI,EAAMyB,SAAS,GAAGY,cAG3FpC,EAAe,GAAGqC,KAAI,SAACC,EAAcC,GAAf,OAClB,wBAAId,IAAKc,EAAIzD,UAAU,sBAAsBC,MAAO8B,GAChD,wBAAI9B,MAAO,CAAEyD,MAAO,UACfF,EAAaf,UACd,yBAAKzC,UAAU,aAAY,yBAAKA,UAAU,mBAAkB,kBAAC,EAAD,CAAca,KAAM2C,EAAaT,WAEjG,4BAAI,kBAAC,EAAD,CAAclC,KAAM2C,EAAaR,SACrC,4BAAI,kBAAC,EAAD,CAAcnC,KAAM2C,EAAaP,UACrC,wBAAIhD,MAAO,IAAX,IAAgB,kBAAC,EAAD,CAAcY,KAAM2C,EAAaN,cACjD,4BAAI,kBAAC,EAAD,CAAcrC,KAAM2C,EAAaL,UACrC,wBAAIlD,MAAO,CAAEX,MAAO,4BAA6B8D,WAAY,SAA7D,IAAwE,kBAAC,EAAD,CAAcvC,KAAM2C,EAAaH,eACzG,wBAAIpD,MAAO,CAAEmD,WAAY,OAAQ9D,MAAO,YAAa,kBAAC,EAAD,CAAcuB,KAAM2C,EAAaF,kBAMtG,oCACKlC,EACG,wBAAIuB,KAAM,GAAI1C,MAAO,CAAE2C,WAAY,uBAC/B,wBAAI3C,MAAO,CAAEyD,MAAO,UACftC,EAAoBqB,UACrB,yBAAKzC,UAAU,aAAY,yBAAKA,UAAU,mBAAkB,kBAAC,EAAD,CAAca,KAAMO,EAAoB2B,WAExG,4BAAI,kBAAC,EAAD,CAAclC,KAAMO,EAAoB4B,SAC5C,4BAAI,kBAAC,EAAD,CAAcnC,KAAMO,EAAoB6B,UAC5C,wBAAIhD,MAAO,IAAX,IAAgB,kBAAC,EAAD,CAAcY,KAAMO,EAAoB8B,cACxD,4BAAI,kBAAC,EAAD,CAAcrC,KAAMO,EAAoB+B,UAC5C,wBAAIlD,MAAO,CAAEX,MAAO,4BAA6B8D,WAAY,SAA7D,IAAwE,kBAAC,EAAD,CAAcvC,KAAMO,EAAoBiC,eAChH,wBAAIpD,MAAO,CAAEmD,WAAY,OAAQ9D,MAAO,YAAa,kBAAC,EAAD,CAAcuB,KAAMO,EAAoBkC,cAE/F,OAIhB,M,OC6TCK,MAhcf,SAAqB1C,GAAQ,IAAD,EACI/B,mBAAS,SADb,mBACjB0E,EADiB,KACTC,EADS,OAEU3E,mBAAS,QAFnB,mBAEjBmD,EAFiB,KAENyB,EAFM,OAG0B5E,oBAAS,GAHnC,mBAGjB6E,EAHiB,KAGEC,EAHF,OAIc9E,qBAJd,mBAIjB+E,EAJiB,KAIJC,EAJI,OAKkBhF,mBAAS,CAC/CiF,KAAM,CAAEvB,WAAY,UAAWwB,UAAW,6BAC1CC,OAAQ,KACRC,GAAI,KACJC,cAAe,KACfC,KAAM,KACNC,cAAe,KACfC,OAAQ,KACRC,kBAAmB,OAbC,mBAKjBC,EALiB,KAKFC,EALE,KAgBlBC,EAAqB,CACvBX,KAAM,KACNE,OAAQ,KACRC,GAAI,KACJC,cAAe,KACfC,KAAM,KACNC,cAAe,KACfC,OAAQ,KACRC,kBAAmB,MAEjBI,EAAuB,CACzBnC,WAAY,UAEZwB,UAAW,wCA7BS,EAmCEY,sBAmB1B,SAAiB7F,EAAO8F,GACpB,OAAQA,EAAOC,MACX,IAAK,OAED,OADApB,EAAa,QACLe,GAAiB,SAAAM,GACrB,OAAO,eAAKL,EAAZ,CAAgCX,KAAMY,OAE9C,IAAK,SAED,OADAjB,EAAa,UACLe,GAAiB,SAAAM,GACrB,OAAO,eAAKL,EAAZ,CAAgCT,OAAQU,OAEhD,IAAK,KAED,OADAjB,EAAa,MACLe,GAAiB,SAAAM,GACrB,OAAO,eAAKL,EAAZ,CAAgCR,GAAIS,OAE5C,IAAK,gBAED,OADAjB,EAAa,iBACLe,GAAiB,SAAAM,GACrB,OAAO,eAAKL,EAAZ,CAAgCP,cAAeQ,OAEvD,IAAK,OAED,OADAjB,EAAa,QACLe,GAAiB,SAAAM,GACrB,OAAO,eAAKL,EAAZ,CAAgCN,KAAMO,OAE9C,IAAK,gBAED,OADAjB,EAAa,iBACLe,GAAiB,SAAAM,GACrB,OAAO,eAAKL,EAAZ,CAAgCL,cAAeM,OAEvD,IAAK,SAED,OADAjB,EAAa,UACLe,GAAiB,SAAAM,GACrB,OAAO,eAAKL,EAAZ,CAAgCJ,OAAQK,OAEhD,IAAK,oBAED,OADAjB,EAAa,qBACLe,GAAiB,SAAAM,GACrB,OAAO,eAAKL,EAAZ,CAAgCH,kBAAmBI,OAI3D,QACI,MAAM,IAAIK,SAhEwB,GAnCtB,mBAmCVC,GAnCU,WAyGxB,SAASC,EAAW3C,GAEZkB,EADAlB,IAAQiB,EACEjB,EAAM,IAEHA,GAxErBpD,qBAAU,WACN,IAAMgG,EAAU,CAAC,UAAW,SAAU,aAAc,QAAS,SAAU,aACnEC,EAAM,GACVvE,EAAMwE,cAAclC,KAAI,SAACmC,EAAMjC,GAS3B,OARAkC,OAAOC,KAAKF,GACPnD,QAAO,SAAAI,GAAG,OAAI4C,EAAQM,SAASlD,MAC/BmD,QAAO,SAACtD,EAAKG,GAGV,OAFAH,EAAIG,GAAO+C,EAAK/C,GAChB6C,EAAI/B,GAAMjB,EACHA,IAER,IACA,QAEX0B,EAAesB,KAChB,CAACvE,EAAMwE,gBA4DV,IAAMM,EAAW,CACbjD,UAAW,mBAsBfkD,OAAOC,iBAAiB,UAAU,WAC1BC,SAASC,cAAc,mBACnBD,SAASC,cAAc,kBAAkBC,wBAAwBC,EAAI,KACrErC,GAAqB,MAIjC,IAAMsC,EAAuB,SAACrD,GAC1B,OAAIA,EACO,KAEC,CAAEL,WAAY,uBAG9B,SAAS2D,EAAiBC,GACtB,GAAIvC,EACA,OAAOA,EAAY1B,QAAO,SAAUkE,GAChC,OAAOA,EAAEC,UAAYF,KAGjC,OACI5C,GAAUvB,GAAapB,EACnB,oCACI,2BAAOiE,KAAK,OAAOzB,GAAG,UAAUkD,QA1CzB,WACf,IAAWpE,EAAeqE,EAAIC,EAAIC,EAKlC,IAHAvE,EADQ2D,SAASa,eAAe,WACjBC,MAAMC,cAErBL,EADQV,SAASa,eAAe,WACrBG,qBAAqB,MAC3BJ,EAAI,EAAGA,EAAIF,EAAG9G,OAAQgH,KACvBD,EAAKD,EAAGE,GAAGI,qBAAqB,MAAM,OAEvBL,EAAGM,aAAeN,EAAGO,WACnBH,cAAcI,QAAQ9E,IAAW,EAC1CqE,EAAGE,GAAG7G,MAAMqH,QAAU,GAEtBV,EAAGE,GAAG7G,MAAMqH,QAAU,SA6B2BC,YAAY,qBAAWvH,UAAU,gBACtF,yBAAKA,UAAU,cACX,4BAAQ6C,QAAS,kBAAMwC,EAAS,CAAEH,KAAM,UAAWjF,MAAO2E,EAAcT,MAAxE,QAGA,4BAAQtB,QAAS,kBAAMwC,EAAS,CAAEH,KAAM,YAAajF,MAAO2E,EAAcP,QAA1E,aAGA,4BAAQxB,QAAS,kBAAMwC,EAAS,CAAEH,KAAM,QAASjF,MAAO2E,EAAcN,IAAtE,MAGA,4BAAQzB,QAAS,kBAAMwC,EAAS,CAAEH,KAAM,mBAAoBjF,MAAO2E,EAAcL,eAAjF,sBAGA,4BAAQ1B,QAAS,kBAAMwC,EAAS,CAAEH,KAAM,UAAWjF,MAAO2E,EAAcJ,MAAxE,WAGA,4BAAQ3B,QAAS,kBAAMwC,EAAS,CAAEH,KAAM,mBAAoBjF,MAAO2E,EAAcH,eAAjF,yBAGA,4BAAQ5B,QAAS,kBAAMwC,EAAS,CAAEH,KAAM,YAAajF,MAAO2E,EAAcF,QAA1E,UAGA,4BAAQ7B,QAAS,kBAAMwC,EAAS,CAAEH,KAAM,uBAAwBjF,MAAO2E,EAAcD,mBAArF,4BAKJ,yBAAK3E,UAAU,YACX,2BAAOyD,GAAG,WACN,+BACI,4BACI,wBAAIZ,QAAS,kBAAO5B,EAAMuG,OAAO,UAAYlC,EAAW,WAAxD,UACW,6BACP,yBAAKtF,UAAU,YAAYC,MAAO,CAAEmD,WAAY,WAAhD,qBACY,UAAXQ,EACK,kBAAC,IAAD,CAAkB5D,UAAU,aAC5B,KAEM,WAAX4D,EACK,kBAAC,IAAD,CAAkB3D,MAAO8F,EAAU/F,UAAU,aAC7C,MAGV,wBAAI6C,QAAS,kBAAO5B,EAAMuG,OAAO,UAAYlC,EAAW,WAAxD,2BAEQ,UAAX1B,EACa,kBAAC,IAAD,CAAkB5D,UAAU,aAC5B,KAEM,WAAX4D,EACK,kBAAC,IAAD,CAAkB3D,MAAO8F,EAAU/F,UAAU,aAC7C,MAGV,wBAAI6C,QAAS,kBAAO5B,EAAMuG,OAAO,WAAalC,EAAW,YAAzD,wBAEQ,WAAX1B,EACa,kBAAC,IAAD,CAAkB5D,UAAU,aAC5B,KAEM,YAAX4D,EACK,kBAAC,IAAD,CAAkB3D,MAAO8F,EAAU/F,UAAU,aAC7C,MAGV,wBAAI6C,QAAS,kBAAO5B,EAAMuG,OAAO,eAAiBlC,EAAW,gBAA7D,qBAEQ,eAAX1B,EACa,kBAAC,IAAD,CAAkB5D,UAAU,aAC5B,KAEM,gBAAX4D,EACK,kBAAC,IAAD,CAAkB3D,MAAO8F,EAAU/F,UAAU,aAC7C,MAGV,wBAAI6C,QAAS,kBAAO5B,EAAMuG,OAAO,WAAalC,EAAW,YAAzD,yBAEQ,WAAX1B,EACa,kBAAC,IAAD,CAAkB5D,UAAU,aAC5B,KAEM,YAAX4D,EACK,kBAAC,IAAD,CAAkB3D,MAAO8F,EAAU/F,UAAU,aAC7C,MAGV,wBAAI6C,QAAS,kBAAO5B,EAAMuG,OAAO,gBAAkBlC,EAAW,iBAA9D,oBAEQ,gBAAX1B,EACa,kBAAC,IAAD,CAAkB5D,UAAU,aAC5B,KAEM,iBAAX4D,EACK,kBAAC,IAAD,CAAkB3D,MAAO8F,EAAU/F,UAAU,aAC7C,MAGV,wBAAI6C,QAAS,kBAAO5B,EAAMuG,OAAO,cAAgBlC,EAAW,eAA5D,iCAEQ,cAAX1B,EACa,kBAAC,IAAD,CAAkB5D,UAAU,aAC5B,KAEM,eAAX4D,EACK,kBAAC,IAAD,CAAkB3D,MAAO8F,EAAU/F,UAAU,aAC7C,QAKlB,+BACI,kBAAC,EAAD,CAAmBqC,UAAWA,EAAWK,SAAUzB,EAAMyB,WAC1C,SAAdL,EACG,oCACKpB,EAAMwE,cAAclC,KAAI,SAACkE,EAAMhE,GAAP,OACrBM,GAAqBN,EAAK,GACtB,wBAAIzD,UAAU,gBAAgB2C,IAAKc,EAAIxD,MAAOqG,EAAqBmB,EAAKxE,SACpE,wBAAIhD,MAAO,CAAEyD,MAAO,UACE,aAAjB+D,EAAKf,QACF,kBAAC,IAAD,CAAMxG,GAAG,kBACL,0BAAMF,UAAU,eAAgByH,EAAKf,SACpCe,EAAK1E,MAAQ,EACV,yBAAK/C,UAAU,aACX,yBAAKA,UAAU,mBACX,kBAAC,EAAD,CAAca,KAAM4G,EAAK1E,UAG/B,MAGV,kBAAC,IAAD,CAAM7C,GAAI,CACNf,MAAOoH,EAAiBkB,EAAKf,SAAUgB,SAAS,mBAAD,OAAqBD,EAAKf,WAEzE,0BAAM1G,UAAU,eAAgByH,EAAKf,SACpCe,EAAK1E,MAAQ,EACV,yBAAK/C,UAAU,aACX,yBAAKA,UAAU,mBACX,kBAAC,EAAD,CAAca,KAAM4G,EAAK1E,UAG/B,OAKlB,4BAAI,kBAAC,EAAD,CAAclC,KAAM4G,EAAKzE,SAC7B,4BAAKyE,EAAKxE,OAAS,kBAAC,EAAD,CAAcpC,KAAM4G,EAAKxE,SAAa,KAExDwE,EAAKvE,WAAa,EACf,wBAAIjD,MAAO,CAAE2C,WAAY,wBAAzB,IAAmD,kBAAC,EAAD,CAAc/B,KAAM4G,EAAKvE,aAA5E,KACE,6BAEN,4BAAI,kBAAC,EAAD,CAAcrC,KAAM4G,EAAKtE,UAC5BsE,EAAKpE,YAAc,EAChB,wBAAIpD,MAAO,CAAEX,MAAO,4BAA6B8D,WAAY,SAA7D,IAAwE,kBAAC,EAAD,CAAcvC,KAAM4G,EAAKpE,cAAjG,KACE,6BAEN,wBAAIpD,MAAO,CAAEmD,WAAY,OAAQ9D,MAAO,YAAa,kBAAC,EAAD,CAAcuB,KAAM4G,EAAKnE,cAEhF,SAKE,OAAdjB,EACE,oCACKpB,EAAMwE,cAAclC,KAAI,SAACkE,EAAMhE,GAAP,MACJ,aAAjBgE,EAAKf,SACmB,YAAjBe,EAAKf,SACY,YAAjBe,EAAKf,SACY,WAAjBe,EAAKf,SACY,YAAjBe,EAAKf,SACY,YAAjBe,EAAKf,QAER,wBAAI1G,UAAU,gBAAgB2C,IAAKc,EAAIxD,MAAOqG,EAAqBmB,EAAKxE,SAGpE,wBAAIhD,MAAO,CAAEyD,MAAO,UACE,aAAjB+D,EAAKf,QACF,kBAAC,IAAD,CAAMxG,GAAG,kBAEL,0BAAMF,UAAU,eAAgByH,EAAKf,SACpCe,EAAK1E,MAAQ,EACV,yBAAK/C,UAAU,aACX,yBAAKA,UAAU,mBACX,kBAAC,EAAD,CAAca,KAAM4G,EAAK1E,UAG/B,MAIV,kBAAC,IAAD,CAAM7C,GAAI,CACNf,MAAOoH,EAAiBkB,EAAKf,SAAUgB,SAAS,mBAAD,OAAqBD,EAAKf,WAEzE,0BAAM1G,UAAU,eAAgByH,EAAKf,SAEpCe,EAAK1E,MAAQ,EACV,yBAAK/C,UAAU,aACX,yBAAKA,UAAU,mBACX,kBAAC,EAAD,CAAca,KAAM4G,EAAK1E,UAG/B,OAOlB,4BAAI,kBAAC,EAAD,CAAclC,KAAM4G,EAAKzE,SAC7B,4BAAKyE,EAAKxE,OAAS,kBAAC,EAAD,CAAcpC,KAAM4G,EAAKxE,SAAa,KAExDwE,EAAKvE,WAAa,EACf,wBAAIjD,MAAO,CAAE2C,WAAY,wBAAzB,IAAmD,kBAAC,EAAD,CAAc/B,KAAM4G,EAAKvE,aAA5E,KACE,6BAEN,4BAAI,kBAAC,EAAD,CAAcrC,KAAM4G,EAAKtE,UAC5BsE,EAAKpE,YAAc,EAChB,wBAAIpD,MAAO,CAAEX,MAAO,4BAA6B8D,WAAY,SAA7D,IAAwE,kBAAC,EAAD,CAAcvC,KAAM4G,EAAKpE,cAAjG,KACE,6BAEN,wBAAIpD,MAAO,CAAEmD,WAAY,OAAQ9D,MAAO,YAAa,kBAAC,EAAD,CAAcuB,KAAM4G,EAAKnE,cAEhF,SAMdrC,EAAMwE,cAAclC,KAAI,SAACkE,EAAMhE,GAAP,OACpBgE,EAAKhF,YAAcJ,EACf,wBAAIM,IAAKc,EAAIxD,MAAOqG,EAAqBmB,EAAKxE,SAC1C,wBAAIhD,MAAO,CAAEyD,MAAO,UAGE,aAAjB+D,EAAKf,QACF,kBAAC,IAAD,CAAMxG,GAAG,kBACL,0BAAMF,UAAU,eAAgByH,EAAKf,SACpCe,EAAK1E,MAAQ,EACV,yBAAK/C,UAAU,aACX,yBAAKA,UAAU,mBACX,kBAAC,EAAD,CAAca,KAAM4G,EAAK1E,UAG/B,MAGV,kBAAC,IAAD,CAAM7C,GAAI,CACNf,MAAOoH,EAAiBkB,EAAKf,SAAUgB,SAAS,mBAAD,OAAqBD,EAAKf,WAEzE,0BAAM1G,UAAU,eAAgByH,EAAKf,SACpCe,EAAK1E,MAAQ,EACV,yBAAK/C,UAAU,aACX,yBAAKA,UAAU,mBACX,kBAAC,EAAD,CAAca,KAAM4G,EAAK1E,UAG/B,OAKlB,4BAAI,kBAAC,EAAD,CAAclC,KAAM4G,EAAKzE,SAC7B,4BAAKyE,EAAKxE,OAAS,kBAAC,EAAD,CAAcpC,KAAM4G,EAAKxE,SAAa,KACxDwE,EAAKvE,WAAa,EACf,wBAAIjD,MAAO,CAAE2C,WAAY,wBAAzB,IAAmD,kBAAC,EAAD,CAAc/B,KAAM4G,EAAKvE,aAA5E,KACE,6BAEN,4BAAI,kBAAC,EAAD,CAAcrC,KAAM4G,EAAKtE,UAC5BsE,EAAKpE,YAAc,EAChB,wBAAIpD,MAAO,CAAEX,MAAO,4BAA6B8D,WAAY,SAA7D,IAAwE,kBAAC,EAAD,CAAcvC,KAAM4G,EAAKpE,cAAjG,KACE,6BAEN,wBAAIpD,MAAO,CAAEmD,WAAY,OAAQ9D,MAAO,UAAW,kBAAC,EAAD,CAAcuB,KAAM4G,EAAKnE,cAE9E,UAK1B,2BAAOqE,QAAQ,WAAf,OAGN,M,+BCpUCC,MAxHf,YAAkC,IAAblF,EAAY,EAAZA,SAGjB,SAASmF,EAAarI,EAAGsI,GACrB,GAAItI,EAAG,CACH,IAAIuI,EAASD,GAAKtI,EAAI,KAKtB,OADAuI,GADAA,GADAA,GADAA,EAASD,GAAKtI,EAAI,MACFwI,QAAQ,IACRlH,YACAC,QAAQ,IAAK,KAEzB,yBAAKf,UAAU,oBAAf,oBACkB,8BAAO+H,EAAP,OAO9B,OACI,yBAAK/H,UAAU,eAGX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,oBACX,kBAAC,IAAD,OAEJ,yBAAKA,UAAU,aAAf,4BACA,yBAAKA,UAAU,kBACX,kBAAC,EAAD,CAAca,KAAM6B,EAAS,GAAGM,SAEpC,yBAAKhD,UAAU,aAAf,2CACiC,8BAAM,kBAAC,EAAD,CAAca,KAAM6B,EAAS,GAAGO,YAI3E,yBAAKjD,UAAU,YACX,yBAAKA,UAAU,wBACX,kBAAC,IAAD,OAEJ,yBAAKA,UAAU,aAAf,kCACA,yBAAKA,UAAU,sBACX,kBAAC,EAAD,CAAca,KAAM6B,EAAS,GAAGY,aAEpC,yBAAKtD,UAAU,aAEV6H,EAAanF,EAAS,GAAGM,MAAON,EAAS,GAAGY,aAMrD,yBAAKtD,UAAU,YACX,yBAAKA,UAAU,qBACX,kBAAC,IAAD,OAEJ,yBAAKA,UAAU,aAAf,0BACA,yBAAKA,UAAU,mBACX,kBAAC,EAAD,CAAca,KAAM6B,EAAS,GAAGS,UAEpC,yBAAKnD,UAAU,aACV6H,EAAanF,EAAS,GAAGM,MAAON,EAAS,GAAGS,YCuBlD8E,MAnFf,WAAqB,IAAD,EACgB/I,qBADhB,mBACTwD,EADS,KACCwF,EADD,OAEwBhJ,qBAFxB,mBAETiJ,EAFS,KAEKC,EAFL,OAG0BlJ,qBAH1B,mBAGTuG,EAHS,KAGM4C,EAHN,OAIUnJ,mBAAS,CAC/BuG,cAAeA,EACf6C,UAAW,CACPC,UAAW,SAPH,mBAITpJ,EAJS,KAIFC,EAJE,KAsDhB,OA1CAG,qBAAU,YACS,uCAAG,kCAAAC,EAAA,sEACUC,MAAM,6BADhB,cACR+I,EADQ,gBAEIA,EAAU7I,OAFd,cAEV8I,EAFU,OAGdL,EAAgB,CAACK,EAAMzF,MAAOyF,EAAMnF,UAAWmF,EAAMtF,SACrD+E,EAAY,CAACO,IAJC,UAMShJ,MAAM,mCANf,eAMRC,EANQ,iBAOGA,EAASC,OAPZ,QAOVC,EAPU,OAQdyI,EAAiBzI,GACjBR,EAAS,CACLQ,KAAMA,EAAK8I,MAAK,SAAClJ,EAAGsI,GAAJ,MACiB,QAA7B3I,EAAMmJ,UAAN,MACMK,WAAWnJ,EAAC,OAAamJ,WAAWb,EAAC,OACrCa,WAAWb,EAAC,OAAaa,WAAWnJ,EAAC,UAE/C8I,UAAW,CACP,MAAsC,QAA7BnJ,EAAMmJ,UAAN,MACH,OACA,SAlBA,4CAAH,qDAsBfM,KACD,IAmBClG,GAAYyF,GAAgB1C,IAAkBtG,EAAMmJ,UAAN,OAA4BnJ,EAAMmJ,UAAN,OACnEnJ,EAAMmJ,UAAN,QACAnJ,EAAMmJ,UAAN,YACAnJ,EAAMmJ,UAAN,QACAnJ,EAAMmJ,UAAN,WACAnJ,EAAMmJ,UAAN,aACH,yBAAKtI,UAAU,YACX,kBAAC,EAAD,CAAW0C,SAAUA,IAErB,6BACA,6BACA,yBAAK1C,UAAU,sBACX,kBAAC,IAAD,CAAME,GAAG,kBAAT,yBAA0C,kBAAC,IAAD,CAAsBF,UAAU,oBAG9E,6BACA,yBAAKA,UAAU,sBACX,kBAAC,IAAD,CAAME,GAAE,wBAAR,0BAAuD,kBAAC,IAAD,CAAsBF,UAAU,oBAG3F,6BAAS,6BACT,kBAAC,EAAD,CAAayF,cAAeA,EAAe/C,SAAUA,EAAU8E,OAtC3E,SAAgB7E,GACZvD,EAAS,CACLqG,cAAeA,EAAciD,MAAK,SAAClJ,EAAGsI,GAAJ,MACL,QAAzB3I,EAAMmJ,UAAU3F,GACVgG,WAAWnJ,EAAEmD,IAAQgG,WAAWb,EAAEnF,IAClCgG,WAAWb,EAAEnF,IAAQgG,WAAWnJ,EAAEmD,OAE5C2F,UAAU,eACL3F,EAA+B,QAAzBxD,EAAMmJ,UAAU3F,GACjB,OACA,aA8BR,M,aC1DCkG,MA7Bf,SAA6BC,GACzB,OAAIC,MAAMD,IAAOA,EAAI,IACVA,EAEFA,EAAI,KACDA,EAAI,KAAMd,QAAQ,GAAK,IAE1Bc,EAAI,KACDA,EAAI,KAAMd,QAAQ,GAAK,IAG1Bc,EAAI,IAEFE,KAAKC,MAAOH,EAAI,KAAS,IAG3BA,EAAI,KACDA,EAAI,KAASd,QAAQ,GAAK,IAG7Bc,EAAI,KACDA,EAAI,KAASd,QAAQ,GAAK,IAG7Bc,EAAI,KACFE,KAAKC,MAAOH,EAAI,KAAe,SADrC,GCkNMI,MAnOf,YAAgC,IAAVjI,EAAS,EAATA,MACZkI,EAAU,CACZC,cAAe,CACXC,OAAQpI,EAAMqI,OACdC,SAAU,CAAC,CACPC,MAAO,0BACPC,gBAAiB,OACjB7J,KAAMqB,EAAMyI,eAAeH,SAAS,GAAG3J,MAE3C,CACI4J,MAAO,iCACPC,gBAAiB,UACjB7J,KAAMqB,EAAM0I,kBAAkBJ,SAAS,GAAG3J,MAE9C,CACI4J,MAAO,2BACPC,gBAAiB,UACjB7J,KAAMqB,EAAMmI,cAAcG,SAAS,GAAG3J,QAI9CgK,2BAA4B,CACxBP,OAAQpI,EAAMqI,OACdC,SAAU,CAAC,CACPC,MAAO,6BACPC,gBAAiB,SACjB7J,KAAMqB,EAAM4I,mBAAmBN,SAAS,GAAG3J,MAE/C,CACI4J,MAAO,sBACPC,gBAAiB,UACjB7J,KAAMqB,EAAM6I,mBAAmBP,SAAS,GAAG3J,QAInDiK,mBAAoB,CAChBR,OAAQpI,EAAMqI,OACdC,SAAUtI,EAAM4I,mBAAmBN,UAGvCQ,oBAAqB,CACjBV,OAAQpI,EAAMqI,OACdC,SAAUtI,EAAM8I,oBAAoBR,UAGxCS,QAAS,CACLC,qBAAqB,EACrBC,YAAY,EAEZC,OAAQ,CACJtI,SAAU,SACVwH,OAAQ,CACJe,QAAS,IAEbvH,QAAS,SAAU4D,EAAG4D,GAC+BC,QAAMC,SAGvD,IAAIC,EAAQH,EAAWI,aACnBC,EAAKC,KAAKC,MACVC,EAAOH,EAAGI,eAAeN,GAE7BK,EAAKE,OAAyB,OAAhBF,EAAKE,QAAmBL,EAAG9K,KAAK2J,SAASiB,GAAOO,OAAS,KAGvEL,EAAGM,WAIXC,OAAQ,CACJC,MAAO,CAAC,CACJC,SAAS,EACTC,UAAW,CACP9D,SAAS,KAGjB+D,MAAO,CAAC,CACJF,SAAS,EACTG,MAAO,CACHC,SAAU,SAAUvE,GAChB,OAAOA,EAAMlG,WAAWC,QAAQ,wBAAyB,UAKzEyK,SAAU,CAENC,KAAM,QACN5J,SAAU,UACV6J,WAAW,EACXC,UAAW,CACPnC,MAAO,SAAUoC,EAAahB,GAG1B,OAFmBA,EAAMrB,SAASqC,EAAYnB,cAAcjB,OAAS,IAE/C,KAAOoC,EAAYC,OAAO/K,WAAWC,QAAQ,wBAAyB,QAIxG+K,UAAW,CACPC,SAAU,IACVC,WAAY,WACR,IAAgC,IAA5B/K,EAAMgL,kBAA6B,CACnC,IAAIC,EAAgBvB,KAAKC,MACrBuB,EAAMD,EAAcC,IACxBA,EAAIC,UAAY,SAChBD,EAAIE,UAAY,qBAChBF,EAAIG,aAAe,SACftG,OAAOuG,WAAa,KACpBJ,EAAIK,KAAO,kBAENxG,OAAOuG,WAAa,IACzBJ,EAAIK,KAAO,kBAGXL,EAAIK,KAAO,iBAEf7B,KAAK/K,KAAK2J,SAASkD,SAAQ,SAAUC,EAAS5F,GAC/BoF,EAAcS,WAAW7B,eAAehE,GAC9ClH,KAAK6M,SAAQ,SAAUG,EAAKpC,GAC7B,IAAI5K,EAAO8M,EAAQ9M,KAAK4K,GACxB,GAAIA,EAAQ,IAAM,GACd,IAA8E,IAA1EkC,EAAQ9M,KAAKiN,SAASC,UAAU,GAAGlC,MAAMT,OAAO4C,YAAY,GAAGhC,SACc,IAA1E2B,EAAQ9M,KAAKiN,SAASC,UAAU,GAAGlC,MAAMT,OAAO4C,YAAY,GAAGhC,OAClE,GAA4E,4BAAxE2B,EAAQ9M,KAAKiN,SAASC,UAAU,GAAGlC,MAAMT,OAAO4C,YAAY,GAAGC,KAA0B,CACzF,IAAIC,EAAO,GACXP,EAAQ9M,KAAKiN,SAASC,UAAU,GAAGlC,MAAMT,OAAO4C,YAAYxJ,KAAI,SAAC2J,EAAOzJ,GAEpE,OADAwJ,EAAKxJ,GAAMyJ,EAAMnC,OACVkC,KAEqB,4BAA5BL,EAAIO,OAAOC,eAAgD,IAAZH,EAAK,GACpDd,EAAIkB,SAASxE,EAAoBjJ,GAAOgN,EAAIO,OAAOrE,EAAG8D,EAAIO,OAAO9G,EAAI,GACpC,mCAA5BuG,EAAIO,OAAOC,eAAoD,IAAZH,EAAK,GAC7Dd,EAAIkB,SAASxE,EAAoBjJ,GAAOgN,EAAIO,OAAOrE,EAAG8D,EAAIO,OAAO9G,EAAI,GACpC,6BAA5BuG,EAAIO,OAAOC,eAAmD,IAAZH,EAAK,IAC5Dd,EAAIkB,SAASxE,EAAoBjJ,GAAOgN,EAAIO,OAAOrE,EAAG8D,EAAIO,OAAO9G,EAAI,QAIxE,GAA4E,+BAAxEqG,EAAQ9M,KAAKiN,SAASC,UAAU,GAAGlC,MAAMT,OAAO4C,YAAY,GAAGC,KAAiC,CACrG,IAAIC,EAAO,GACXP,EAAQ9M,KAAKiN,SAASC,UAAU,GAAGlC,MAAMT,OAAO4C,YAAYxJ,KAAI,SAAC2J,EAAOzJ,GAEpE,OADAwJ,EAAKxJ,GAAMyJ,EAAMnC,OACVkC,KAENA,EAAK,IACNd,EAAIkB,SAASxE,EAAoBjJ,GAAOgN,EAAIO,OAAOrE,EAAG8D,EAAIO,OAAO9G,EAAI,QAIzE8F,EAAIkB,SAASxE,EAAoBjJ,GAAOgN,EAAIO,OAAOrE,EAAG8D,EAAIO,OAAO9G,EAAI,QAK7E,GAAIzG,EAAO,OACuE,IAA1E8M,EAAQ9M,KAAKiN,SAASC,UAAU,GAAGlC,MAAMT,OAAO4C,YAAY,GAAGhC,SACc,IAA1E2B,EAAQ9M,KAAKiN,SAASC,UAAU,GAAGlC,MAAMT,OAAO4C,YAAY,GAAGhC,QAElE,GAA4E,4BAAxE2B,EAAQ9M,KAAKiN,SAASC,UAAU,GAAGlC,MAAMT,OAAO4C,YAAY,GAAGC,KAA0B,CACzF,IAAIC,EAAO,GACXP,EAAQ9M,KAAKiN,SAASC,UAAU,GAAGlC,MAAMT,OAAO4C,YAAYxJ,KAAI,SAAC2J,EAAOzJ,GAEpE,OADAwJ,EAAKxJ,GAAMyJ,EAAMnC,OACVkC,KAEqB,4BAA5BL,EAAIO,OAAOC,eAAgD,IAAZH,EAAK,GACpDd,EAAIkB,SAASxE,EAAoBjJ,GAAOgN,EAAIO,OAAOrE,EAAG8D,EAAIO,OAAO9G,EAAI,GACpC,mCAA5BuG,EAAIO,OAAOC,eAAoD,IAAZH,EAAK,GAC7Dd,EAAIkB,SAASxE,EAAoBjJ,GAAOgN,EAAIO,OAAOrE,EAAG8D,EAAIO,OAAO9G,EAAI,GACpC,6BAA5BuG,EAAIO,OAAOC,eAAmD,IAAZH,EAAK,IAC5Dd,EAAIkB,SAASxE,EAAoBjJ,GAAOgN,EAAIO,OAAOrE,EAAG8D,EAAIO,OAAO9G,EAAI,QAIzE8F,EAAIkB,SAASxE,EAAoBjJ,GAAOgN,EAAIO,OAAOrE,EAAG8D,EAAIO,OAAO9G,EAAI,cAYjH,OACI,6BACI,yBAAKrG,UAAU,mBAEX,yBAAKA,UAAU,aACX,mEACA,kBAAC,MAAD,CACIJ,KAAMuJ,EAAQU,mBACdG,QAASb,EAAQa,WAIzB,yBAAKhK,UAAU,aACX,8EACA,kBAAC,MAAD,CACIJ,KAAMuJ,EAAQY,oBACdC,QAASb,EAAQa,WAIzB,yBAAKhK,UAAU,aACX,yFAEA,kBAAC,MAAD,CACIJ,KAAMuJ,EAAQC,cACdY,QAASb,EAAQa,WAIzB,yBAAKhK,UAAU,aACX,0EACA,kBAAC,MAAD,CACIJ,KAAMuJ,EAAQS,2BACdI,QAASb,EAAQa,c,OC/C1BsD,MAlLf,SAAsB1N,EAAM2N,EAASC,GA6CjC,GAAe,oBAAXA,EAA8B,CAC9B5N,EAAK8I,MACL,SAAoBZ,EAAGtI,GACnB,IAAMiO,EAAIjO,EAAEkO,OAAOpK,UACbqK,EAAI7F,EAAE4F,OAAOpK,UACnB,OAAKiK,EAQGI,EAAIF,EACG,EACAE,EAAIF,GACH,EACE,EAXVA,EAAIE,EACG,EACAF,EAAIE,GACH,EACE,UAsDtB,GAAkE,gBAA9DC,KAAKC,MAAMC,aAAaC,QAAQ,0BAA6C,CAC7EnO,EAAK8I,MACL,SAAoBlJ,EAAGsI,GACnB,IAAM2F,EAAIjO,EAAEkO,OAAOM,eACbL,EAAI7F,EAAE4F,OAAOM,eACnB,OAAKT,EAQGI,EAAIF,EACG,EACAE,EAAIF,GACH,EACE,EAXVA,EAAIE,EACG,EACAF,EAAIE,GACH,EACE,UAWrB,GAAkE,mBAA9DC,KAAKC,MAAMC,aAAaC,QAAQ,0BAAgD,CACrFnO,EAAK8I,MACL,SAAoBlJ,EAAGsI,GACnB,IAAM2F,EAAIjO,EAAEkO,OAAOjN,SACbkN,EAAI7F,EAAE4F,OAAOjN,SACnB,OAAK8M,EAQGI,EAAIF,EACG,EACAE,EAAIF,GACH,EACE,EAXVA,EAAIE,EACG,EACAF,EAAIE,GACH,EACE,SAYrB,CACD/N,EAAK8I,MACL,SAAoBlJ,EAAGsI,GACnB,IAAM2F,EAAIjO,EAAEkO,OAAOjN,SACbkN,EAAI7F,EAAE4F,OAAOjN,SACnB,OAAK8M,EAQGI,EAAIF,EACG,EACAE,EAAIF,GACH,EACE,EAXVA,EAAIE,EACG,EACAF,EAAIE,GACH,EACE,OC9GnBM,MAnDf,SAAwBT,EAAQF,EAAc1N,EAAM2N,EAASW,EAAiBC,GAE1EL,aAAaM,QADa,wBACcR,KAAKS,UAAUb,IAExC,mBAAXA,IACAF,EAAa1N,EAAM2N,EAAQe,KAAM,kBAC7Bf,EAAQe,KACRJ,EAAgB,CACZK,cAAe,CACXzL,UAAW,gBAEf0L,iBAAkB,CACdlH,QAAS,UAIjB4G,EAAgB,CACZK,cAAe,CACXzL,UAAW,kBAEf0L,iBAAkB,CACdlH,QAAS,WAIV,gBAAXkG,IACAF,EAAa1N,GAAO2N,EAAQe,KAAM,eAC7Bf,EAAQe,KAUTJ,EAAgB,CACZK,cAAe,CACXjH,QAAS,QAEbkH,iBAAkB,CACd1L,UAAW,oBAdnBoL,EAAgB,CACZK,cAAe,CACXjH,QAAS,QAEbkH,iBAAkB,CACd1L,UAAW,mBAa3BqL,EAAW,CACPG,MAAOf,EAAQe,QC8BRG,MA1Ef,YAAoE,IAA3C7O,EAA0C,EAA1CA,KAAM8O,EAAoC,EAApCA,UAAWC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,YAEhD,SAASC,EAAUC,GACf,IAAMC,EAAQnB,KAAKC,MAAMC,aAAaC,QAFX,aAG3B,OAAIgB,GAASA,EAAMlJ,SAASiJ,GACjB,kBAAC,IAAD,CAAU9O,UAAU,SAEpB,kBAAC,IAAD,CAAiBA,UAAU,SAG1C,SAASgP,EAAaF,GAClB,IAAIG,EAAW,GACVnB,aAAaC,QAXS,cAgBvBkB,EAAWrB,KAAKC,MAAMC,aAAaC,QAhBZ,cAiBVlI,SAASiJ,GAClBG,EAAWA,EAAS1M,QAAO,SAAAkF,GAAI,OAAIA,IAASqH,KAE5CG,EAASC,KAAKJ,GAClBhB,aAAaM,QArBU,WAqBsBR,KAAKS,UAAUY,KAT5DnB,aAAaM,QAZU,WAYsBR,KAAKS,UAAU,CAACS,KAWjEF,GAAaD,GAKjB,OAAID,EAEI9O,EAAK2D,KAAI,SAAC4L,EAAW3E,GAAZ,OACLsD,aAAaC,QA/BM,aA+B6BH,KAAKC,MAAMC,aAAaC,QA/BrD,aA+BsFlI,SAASsJ,EAAUC,OACxH,wBAAIzM,IAAK6H,GACL,wBAAI3H,QAAS,kBAAMmM,EAAaG,EAAUC,SACrCP,EAAUM,EAAUC,OACA,iBAApBD,EAAUC,MAA2B,aACd,kBAApBD,EAAUC,MAAuB,cAAWD,EAAUC,OAC9D,4BAAKD,EAAUzB,OAAOjN,UACtB,wBAAIR,MAAO,CAAEX,MAAO,QACf6P,EAAUzB,OAAOM,eAAiB,EAC/B,IAAMmB,EAAUzB,OAAOM,eACrB,OAGZ,QAKdpO,EAAK2D,KAAI,SAAC4L,EAAW3E,GAAZ,MACe,kBAApB2E,EAAUC,OACiB,mBAApBD,EAAUC,OACU,kBAApBD,EAAUC,OACU,iBAApBD,EAAUC,OACU,mBAApBD,EAAUC,OACU,oBAApBD,EAAUC,OACU,mBAApBD,EAAUC,MAAwB,KAErC,wBAAIzM,IAAK6H,GACL,wBAAI3H,QAAS,kBAAMmM,EAAaG,EAAUC,SACrCP,EAAUM,EAAUC,OACA,iBAApBD,EAAUC,MAA2B,aACd,kBAApBD,EAAUC,MAAuB,cAAWD,EAAUC,OAC9D,4BAAKD,EAAUzB,OAAOjN,UACtB,wBAAIR,MAAO,CAAEX,MAAO,QACf6P,EAAUzB,OAAOM,eAAiB,EAC/B,IAAMmB,EAAUzB,OAAOM,eACrB,WCsDfqB,MAhHf,SAAsBpO,GAElB,IAAMrB,EAAOqB,EAAMqO,YAFM,EAGKpQ,mBAAS,CACnCoP,MAAM,IAJe,mBAGlBf,EAHkB,KAGTY,EAHS,OAMcjP,mBAAS,CAC5CqP,cAAe,CACXzL,UAAW,gBAEf0L,iBAAkB,CACdlH,QAAS,UAXQ,mBAMlBiI,EANkB,KAMLrB,EANK,OAkBOhP,qBAlBP,mBAkBlBsQ,EAlBkB,KAkBRC,EAlBQ,OAmBiCvQ,mBAAS,CAC/DwQ,SAAS,EACT1C,KAAM,oDArBe,mBAmBlB2C,EAnBkB,KAmBKC,EAnBL,OAuBS1Q,mBAAS,CACvCsC,WAAY,kBACZC,aAAc,OACdC,WAAY,QA1BS,mBAuBlBmO,EAvBkB,KAuBPC,EAvBO,OA6BO5Q,oBAAS,GA7BhB,mBA6BlByP,EA7BkB,KA6BRC,EA7BQ,OA8BS1P,oBAAS,GA9BlB,mBA8BlBwP,EA9BkB,KA8BPqB,EA9BO,KAiFzB,OAhDAxQ,qBAAU,WACNkQ,EAAY,CACRO,UAAW,QAEf1C,EAAa1N,GAAM,EAAMgO,KAAKC,MAAMC,aAAaC,QAzC/B,2BA0C0C,gBAAxDH,KAAKC,MAAMC,aAAaC,QA1CV,2BA2CdG,EAAgB,CACZK,cAAe,CACXjH,QAAS,QAEbkH,iBAAkB,CACd1L,UAAW,kBAGnB8K,KAAKC,MAAMC,aAAaC,QAlDL,uBAmDnBgC,GAAa,KAClB,CAACnQ,IAiCA,oCACI,yBAAKI,UAAU,2BAA2B6C,QAAS,kBCjGhD,SAAgC8M,EAAuBC,EAA0BH,EAAaK,GACrGH,EAAsBD,SACtBE,EAAyB,CACrBF,SAAUC,EAAsBD,QAChC1C,KAAM,mDAEVyC,EAAY,CACRO,UAAW,UAEfF,EAAa,CACThN,UAAW,kBACXtB,WAAY,kBACZC,aAAc,OACdC,WAAY,UAIhBkO,EAAyB,CACrBF,SAAUC,EAAsBD,QAChC1C,KAAM,oDAEVyC,EAAY,CACRO,UAAW,QAGfF,EAAa,CACThN,UAAW,gBACXtB,WAAY,kBACZC,aAAc,OACdC,WAAY,SDoE6CuO,CAAsBN,EAAuBC,EAA0BH,EAAaK,KAAgBH,EAAsB3C,KAAnL,IAAyL,kBAAC,IAAD,CAAgB/M,MAAO4P,KAChN,yBAAK5P,MAAOuP,EAAUxP,UAAU,uBAG5B,2BAAOkF,KAAK,OAAOzB,GAAG,UAAUkD,QApC5C,WACI,IAAWpE,EAAeqE,EAAIC,EAAIC,EAKlC,IAHAvE,EADQ2D,SAASa,eAAe,WACjBC,MAAMC,cAErBL,EADQV,SAASa,eAAe,WACrBG,qBAAqB,MAC3BJ,EAAI,EAAGA,EAAIF,EAAG9G,OAAQgH,KACvBD,EAAKD,EAAGE,GAAGI,qBAAqB,MAAM,OAEvBL,EAAGM,aAAeN,EAAGO,WACnBH,cAAcI,QAAQ9E,IAAW,EAC1CqE,EAAGE,GAAG7G,MAAMqH,QAAU,GAEtBV,EAAGE,GAAG7G,MAAMqH,QAAU,SAuBiCC,YAAY,qBAAWvH,UAAU,gBAC5F,yBAAKA,UAAU,gBAEX,2BAAOyD,GAAG,UAAUzD,UAAU,gBAC1B,+BACI,4BACI,wBAAI6C,QAAS,kBAfrCkN,GAAcrB,QACdZ,aAAaM,QAlFU,qBAkFuBM,KActB,QAtBpBA,EACO,kBAAC,IAAD,CAAU1O,UAAU,SAEpB,kBAAC,IAAD,CAAiBA,UAAU,UAoBd,wBAAI6C,QAAS,kBAAMoL,EAAe,iBAAkBX,EAAc1N,EAAM2N,EAASW,EAAiBC,KAAlG,4BACqB,kBAAC,IAAD,CAAkBnO,UAAU,gBAAgBC,MAAOsP,EAAYhB,iBAEpF,wBAAI1L,QAAS,kBAAMoL,EAAe,cAAeX,EAAc1N,EAAM2N,EAASW,EAAiBC,KAA/F,2BACoB,kBAAC,IAAD,CAAkBnO,UAAU,mBAAmBC,MAAOsP,EAAYf,sBAI9F,+BACI,kBAAC,EAAD,CAAe5O,KAAMA,EAAM8O,UAAWA,EAAWC,SAAUA,EAAUC,YAAaA,UE+D/FsB,MA3Kf,YAAsC,IAAbxN,EAAY,EAAZA,SAWrB,SAASyN,EAAYtP,GACjB,GAAa,UAATA,EAAkB,CAClB,IAAIrB,EAAIkD,EAAS,GAAG7C,aAAa8F,OAAOC,KAAKlD,EAAS,GAAG7C,cAAcC,OAAS,GAAGsQ,OAC/EtI,EAAIpF,EAAS,GAAG7C,aAAa8F,OAAOC,KAAKlD,EAAS,GAAG7C,cAAcC,OAAS,GAAGW,SAEnF,OAAO,wEAA2B,0BAAMT,UAAU,eAAeR,EAAIsI,IAEpE,GAAa,cAATjH,EAAsB,CAC3B,IAAIrB,EAAIkD,EAAS,GAAGkI,MAAMjF,OAAOC,KAAKlD,EAAS,GAAG7C,cAAcC,QAAQwD,UACpEwE,EAAIpF,EAAS,GAAGkI,MAAMjF,OAAOC,KAAKlD,EAAS,GAAG7C,cAAcC,OAAS,GAAGwD,UAE5E,OAAO,gFAA2B,0BAAMtD,UAAU,gBAAhB,IAAiCR,EAAIsI,IAEtE,GAAa,WAATjH,EAAmB,CACxB,IAAIrB,EAAIkD,EAAS,GAAGkI,MAAMjF,OAAOC,KAAKlD,EAAS,GAAG7C,cAAcC,QAAQqD,OACpE2E,EAAIpF,EAAS,GAAGkI,MAAMjF,OAAOC,KAAKlD,EAAS,GAAG7C,cAAcC,OAAS,GAAGqD,OAC5E,GAAK3D,EAAIsI,EAAK,EACV,OAAO,wEAAqB,0BAAM9H,UAAU,aAAaR,EAAIsI,SAEhE,GAAW,eAAPjH,EAAoB,CAIzB,OAHQ6B,EAAS,GAAGkI,MAAMjF,OAAOC,KAAKlD,EAAS,GAAG7C,cAAcC,QAAQwD,UAChEZ,EAAS,GAAGkI,MAAMjF,OAAOC,KAAKlD,EAAS,GAAG7C,cAAcC,OAAS,GAAGwD,WA4CpF,SAASuE,EAAarI,EAAGsI,GACrB,GAAItI,EAAG,CACH,IAAIuI,EAASD,GAAKtI,EAAI,KAKtB,OADAuI,GADAA,GADAA,GADAA,EAASD,GAAKtI,EAAI,MACFwI,QAAQ,IACRlH,YACAC,QAAQ,IAAK,KAEzB,yBAAKf,UAAU,oBAAf,oBACkB,8BAAO+H,EAAP,OAM9B,OACI,oCACI,yBAAK/H,UAAU,eAEX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,oBACX,kBAAC,IAAD,OAEJ,yBAAKA,UAAU,aAAf,4BAGA,yBAAKA,UAAU,kBACX,kBAAC,EAAD,CAAca,KAAM6B,EAAS,GAAGM,QAChC,0BAAMhD,UAAU,gBAAhB,IAAiC0C,EAAS,GAAG7C,aAAa8F,OAAOC,KAAKlD,EAAS,GAAG7C,cAAcC,OAAS,GAAGW,WAEhH,yBAAKT,UAAU,aAAf,2CACiC,8BAAM,kBAAC,EAAD,CAAca,KAAM6B,EAAS,GAAGO,UAAiB,6BADxF,yBAEiB,8BAAM,kBAAC,EAAD,CAAcpC,KAAM6B,EAAS,GAAGK,WAI3D,yBAAK/C,UAAU,YACX,yBAAKA,UAAU,wBACX,kBAAC,IAAD,OAEJ,yBAAKA,UAAU,aAAf,kCACA,yBAAKA,UAAU,sBACX,kBAAC,EAAD,CAAca,KAAM6B,EAAS,GAAGY,YAChC,0BAAMtD,UAAU,iBAAhB,IAAkCmQ,EAAY,gBAGlD,yBAAKnQ,UAAU,aACV6H,EAAanF,EAAS,GAAGM,MAAON,EAAS,GAAGY,aAMrD,yBAAKtD,UAAU,YACX,yBAAKA,UAAU,qBACX,kBAAC,IAAD,OAEJ,yBAAKA,UAAU,aAAf,0BACA,yBAAKA,UAAU,mBACX,kBAAC,EAAD,CAAca,KAAM6B,EAAS,GAAGS,UAEpC,yBAAKnD,UAAU,aACV6H,EAAanF,EAAS,GAAGM,MAAON,EAAS,GAAGS,WAKzD,yBAAKnD,UAAU,YACX,2CAtFM,WACd,IAAMqQ,EAAU3N,EAAS,GAAG7C,aAAa8F,OAAOC,KAAKlD,EAAS,GAAG7C,cAAcC,OAAS,GAAGU,IAC3F,MAAgB,aAAZ6P,EACO,WACU,WAAZA,EACE,SACU,WAAZA,EACE,SACU,iBAAZA,EACE,eACU,WAAZA,EACE,SACU,WAAZA,EACE,SACC,cAwEUC,IACd,yBAAKtQ,UAAU,yBACX,oEAC6B,0BAAMA,UAAU,YAAhB,IAA6B0C,EAAS,GAAG7C,aAAa8F,OAAOC,KAAKlD,EAAS,GAAG7C,cAAcC,OAAS,GAAGW,UAAgB,6BAChJ0P,EAAY,aAAa,8BAQ9B,iEAC6B,0BAAMnQ,UAAU,aAAa0C,EAAS,GAAG7C,aAAa8F,OAAOC,KAAKlD,EAAS,GAAG7C,cAAcC,OAAS,GAAGsQ,QADrI,IACoJ,6BAC/ID,EAAY,SAFjB,IAE2B,6BAGtBA,EAAY,YAIjB,kBAAC,EAAD,CAAcb,YAAa5M,EAAS,GAAG6N,eClG5CC,MA5Ef,SAA6BC,EAAiBnH,EAAQoH,EAAYC,EAAkBC,EAAaC,EAAaC,EAAgBC,EAAWC,GACrIP,EAAgB,CACZxE,kBAAmB+E,EACnB1H,OAAQA,EAERF,cAAe,CACXG,SAAU,CACN,CACIC,MAAO,sCACP5J,KAAMgR,EACNnH,gBAAiB,mBACjBwH,UAAW,QACXC,qBAAsB,SAKlCxH,eAAgB,CACZH,SAAU,CACN,CACIC,MAAO,oCACP5J,KAAMiR,EACNpH,gBAAiB,OACjByH,qBAAsB,UAKlCvH,kBAAmB,CACfJ,SAAU,CACN,CACIC,MAAO,4CACP5J,KAAMkR,EACNrH,gBAAiB,QACjByH,qBAAsB,WAKlCnH,oBAAqB,CACjBR,SAAU,CACN,CACIC,MAAO,8CACP5J,KAAM+Q,EACNlH,gBAAiB,UACjByH,qBAAsB,aAKlCrH,mBAAoB,CAChBN,SAAU,CACN,CACIC,MAAO,sCACP5J,KAAM8Q,EACNjH,gBAAiB,SACjByH,qBAAsB,YAKlCpH,mBAAoB,CAChBP,SAAU,CACN,CACIC,MAAO,+BACP5J,KAAMmR,EACNtH,gBAAiB,OACjByH,qBAAsB,aCsG3BC,MAjKf,WAAoB,IAAD,EACejS,qBADf,mBACRkS,EADQ,KACCC,EADD,OAGyBnS,qBAHzB,mBAGRoS,EAHQ,KAGMb,EAHN,OAIiBvR,qBAJjB,mBAIRwD,EAJQ,KAIEwF,EAJF,OAMyBhJ,mBAAS,CAC7C8N,KAAM,4BACNuE,MAAM,IARK,mBAMRC,EANQ,KAMMC,EANN,KAWflS,qBAAU,YACa,uCAAG,4CAAAC,EAAA,sEACKC,MAXnB,oCAUc,cACZC,EADY,gBAECA,EAASC,OAFV,OAEZC,EAFY,OAGlBsI,EAAY,CAAC,CACTjF,OAAQrD,EAAKqD,OACbD,MAAOpD,EAAKa,SACZ0C,OAAQvD,EAAKuD,OACbG,UAAW1D,EAAK0D,UAChBP,MAAOnD,EAAKwQ,OACZvQ,aAAcD,EAAKC,aACnB+K,MAAOhL,EAAKgL,MACZ2F,UAAW3Q,EAAK2Q,aAEhBjH,EAAS1J,EAAKgL,MAAMrH,KAAI,SAACkE,EAAMhE,GAC/B,IAAIsE,EAASN,EAAKiK,KAAK3Q,QAAQ,IAAK,MAEpC,OADAgH,EAASA,EAAOhH,QAAQ,IAAK,SAG7B2P,EAAa9Q,EAAKgL,MAAMrH,KAAI,SAACkE,EAAMhE,GACnC,OAAOgE,EAAKkK,kBAGZhB,EAAmB/Q,EAAKgL,MAAMrH,KAAI,SAACkE,EAAMhE,GACzC,OAAOgE,EAAKxE,UAGZ2N,EAAchR,EAAKgL,MAAMrH,KAAI,SAACkE,GAC9B,OAAOA,EAAKhH,YAGZoQ,EAAcjR,EAAKgL,MAAMrH,KAAI,SAACkE,GAC9B,OAAOA,EAAKtE,UAGZ2N,EAAiBlR,EAAKgL,MAAMrH,KAAI,SAACkE,GACjC,OAAOA,EAAKnE,aAOhByN,GAJIA,EAAYnR,EAAKgL,MAAMrH,KAAI,SAACkE,GAC5B,OAAOA,EAAKmK,iBAGMC,MAAMvI,EAAOxJ,OAAS,GAAIwJ,EAAOxJ,QACvD8Q,EAAcA,EAAYiB,MAAMvI,EAAOxJ,OAAS,GAAIwJ,EAAOxJ,QAC3D+Q,EAAcA,EAAYgB,MAAMvI,EAAOxJ,OAAS,GAAIwJ,EAAOxJ,QAC3DgR,EAAiBA,EAAee,MAAMvI,EAAOxJ,OAAS,GAAIwJ,EAAOxJ,QACjE6Q,EAAmBA,EAAiBkB,MAAMvI,EAAOxJ,OAAS,GAAIwJ,EAAOxJ,QACrE4Q,EAAaA,EAAWmB,MAAMvI,EAAOxJ,OAAS,GAAIwJ,EAAOxJ,QACzDwJ,EAASA,EAAOuI,MAAMvI,EAAOxJ,OAAS,GAAIwJ,EAAOxJ,QAE5CsR,GACDC,EAAW,CAACzR,IAEhB4Q,EAAoBC,EAAiBnH,EAAQoH,EAAYC,EAAkBC,EAAaC,EAAaC,EAAgBC,GAAW,GArD9G,4CAAH,qDAuDnBe,KACD,IAGH,IA+CMC,EAAqB,YACG,IAAtBP,EAAaD,KACbE,EAAgB,CACZzE,KAAM,6BACNuE,MAAOC,EAAaD,OAKxBE,EAAgB,CACZzE,KAAM,4BACNuE,MAAOC,EAAaD,OA1DP,SAACP,GAEtB,IAAI1H,EAAS8H,EAAQ,GAAGxG,MAAMrH,KAAI,SAACkE,EAAMhE,GACrC,IAAIsE,EAASN,EAAKiK,KAAK3Q,QAAQ,IAAK,MAEpC,OADAgH,EAASA,EAAOhH,QAAQ,IAAK,SAG7B2P,EAAaU,EAAQ,GAAGxG,MAAMrH,KAAI,SAACkE,GACnC,OAAOA,EAAKkK,kBAGZhB,EAAmBS,EAAQ,GAAGxG,MAAMrH,KAAI,SAACkE,GACzC,OAAOA,EAAKxE,UAGZ2N,EAAcQ,EAAQ,GAAGxG,MAAMrH,KAAI,SAACkE,GACpC,OAAOA,EAAKhH,YAGZoQ,EAAcO,EAAQ,GAAGxG,MAAMrH,KAAI,SAACkE,GACpC,OAAOA,EAAKtE,UAGZ2N,EAAiBM,EAAQ,GAAGxG,MAAMrH,KAAI,SAACkE,GACvC,OAAOA,EAAKnE,aAGZyN,EAAYK,EAAQ,GAAGxG,MAAMrH,KAAI,SAACkE,GAClC,OAAOA,EAAKmK,gBAGXZ,IACDN,EAAaA,EAAWmB,MAAMvI,EAAOxJ,OAAS,GAAIwJ,EAAOxJ,QACzD6Q,EAAmBA,EAAiBkB,MAAMvI,EAAOxJ,OAAS,GAAIwJ,EAAOxJ,QACrE8Q,EAAcA,EAAYiB,MAAMvI,EAAOxJ,OAAS,GAAIwJ,EAAOxJ,QAC3D+Q,EAAcA,EAAYgB,MAAMvI,EAAOxJ,OAAS,GAAIwJ,EAAOxJ,QAC3DgR,EAAiBA,EAAee,MAAMvI,EAAOxJ,OAAS,GAAIwJ,EAAOxJ,QACjEiR,EAAYA,EAAUc,MAAMvI,EAAOxJ,OAAS,GAAIwJ,EAAOxJ,QACvDwJ,EAASA,EAAOuI,MAAMvI,EAAOxJ,OAAS,GAAIwJ,EAAOxJ,SAGrD0Q,EAAoBC,EAAiBnH,EAAQoH,EAAYC,EAAkBC,EAAaC,EAAaC,EAAgBC,EAAWC,GAoBhIgB,EAAkBR,EAAaD,OAInC,OACI,yBAAKvR,UAAU,YACVoR,GAAWE,GAAgB5O,EACxB,oCAEI,kBAAC,EAAD,CAAeA,SAAUA,IAKzB,yBAAK1C,UAAU,yBAAyB6C,QAAS,kBAAMkP,MAClDP,EAAaxE,MAGlB,6BACI,kBAAC,EAAD,CAAY/L,MAAOqQ,KAGvB,6BAAS,6BAAS,6BAAS,8BAE7B,KC6DHW,MA3Nf,YAA6B,IAAVhR,EAAS,EAATA,MACTkI,EAAU,CACZC,cAAe,CACXC,OAAQpI,EAAMqI,OACdC,SAAU,CAAC,CACPC,MAAO,0BACPC,gBAAiB,OACjB7J,KAAMqB,EAAMyI,eAAeH,SAAS,GAAG3J,MAE3C,CACI4J,MAAO,iCACPC,gBAAiB,UACjB7J,KAAMqB,EAAM0I,kBAAkBJ,SAAS,GAAG3J,MAE9C,CACI4J,MAAO,2BACPC,gBAAiB,UACjB7J,KAAMqB,EAAMmI,cAAcG,SAAS,GAAG3J,QAe9CmK,oBAAqB,CACjBV,OAAQpI,EAAMqI,OACdC,SAAUtI,EAAM8I,oBAAoBR,UAGxCM,mBAAoB,CAChBR,OAAQpI,EAAMqI,OAAOuI,QAAQ5Q,EAAMqI,OAAOxJ,OAAS,IACnDyJ,SAAUtI,EAAM4I,mBAAmBN,UAGvCS,QAAS,CACLC,qBAAqB,EACrBC,YAAY,EAEZC,OAAQ,CACJtI,SAAU,SACVwH,OAAQ,CACJe,QAAS,IAEbvH,QAAS,SAAU4D,EAAG4D,GAC+BC,QAAMC,SAGvD,IAAIC,EAAQH,EAAWI,aACnBC,EAAKC,KAAKC,MACVC,EAAOH,EAAGI,eAAeN,GAE7BK,EAAKE,OAAyB,OAAhBF,EAAKE,QAAmBL,EAAG9K,KAAK2J,SAASiB,GAAOO,OAAS,KAGvEL,EAAGM,WAIXC,OAAQ,CACJC,MAAO,CAAC,CACJC,SAAS,EACTC,UAAW,CACP9D,SAAS,KAGjB+D,MAAO,CAAC,CACJF,SAAS,EACTG,MAAO,CACHC,SAAU,SAAUvE,GAChB,OAAOA,EAAMlG,WAAWC,QAAQ,wBAAyB,UAKzEyK,SAAU,CAENC,KAAM,QACN5J,SAAU,UACV6J,WAAW,EACXC,UAAW,CACPnC,MAAO,SAAUoC,EAAahB,GAG1B,OAFmBA,EAAMrB,SAASqC,EAAYnB,cAAcjB,OAAS,IAE/C,KAAOoC,EAAYC,OAAO/K,WAAWC,QAAQ,wBAAyB,QAIxG+K,UAAW,CACPC,SAAU,IACVC,WAAY,WAER,IAAgC,IAA5B/K,EAAMgL,kBAA6B,CACnC,IAAIC,EAAgBvB,KAAKC,MACrBuB,EAAMD,EAAcC,IACxBA,EAAIC,UAAY,SAChBD,EAAIE,UAAY,qBAChBF,EAAIG,aAAe,SACftG,OAAOuG,WAAa,KACpBJ,EAAIK,KAAO,kBAENxG,OAAOuG,WAAa,IACzBJ,EAAIK,KAAO,kBAGXL,EAAIK,KAAO,iBAEf7B,KAAK/K,KAAK2J,SAASkD,SAAQ,SAAUC,EAAS5F,GAC/BoF,EAAcS,WAAW7B,eAAehE,GAC9ClH,KAAK6M,SAAQ,SAAUG,EAAKpC,GAC7B,IAAI5K,EAAO8M,EAAQ9M,KAAK4K,GACxB,GAAIA,EAAQ,IAAM,GACd,IAA8E,IAA1EkC,EAAQ9M,KAAKiN,SAASC,UAAU,GAAGlC,MAAMT,OAAO4C,YAAY,GAAGhC,SACc,IAA1E2B,EAAQ9M,KAAKiN,SAASC,UAAU,GAAGlC,MAAMT,OAAO4C,YAAY,GAAGhC,OAElE,GAA4E,4BAAxE2B,EAAQ9M,KAAKiN,SAASC,UAAU,GAAGlC,MAAMT,OAAO4C,YAAY,GAAGC,KAA0B,CACzF,IAAIC,EAAO,GACXP,EAAQ9M,KAAKiN,SAASC,UAAU,GAAGlC,MAAMT,OAAO4C,YAAYxJ,KAAI,SAAC2J,EAAOzJ,GAEpE,OADAwJ,EAAKxJ,GAAMyJ,EAAMnC,OACVkC,KAEqB,4BAA5BL,EAAIO,OAAOC,eAAgD,IAAZH,EAAK,GACpDd,EAAIkB,SAASxE,EAAoBjJ,GAAOgN,EAAIO,OAAOrE,EAAG8D,EAAIO,OAAO9G,EAAI,GACpC,mCAA5BuG,EAAIO,OAAOC,eAAoD,IAAZH,EAAK,GAC7Dd,EAAIkB,SAASxE,EAAoBjJ,GAAOgN,EAAIO,OAAOrE,EAAG8D,EAAIO,OAAO9G,EAAI,GACpC,6BAA5BuG,EAAIO,OAAOC,eAAmD,IAAZH,EAAK,IAC5Dd,EAAIkB,SAASxE,EAAoBjJ,GAAOgN,EAAIO,OAAOrE,EAAG8D,EAAIO,OAAO9G,EAAI,QAIzE8F,EAAIkB,SAASxE,EAAoBjJ,GAAOgN,EAAIO,OAAOrE,EAAG8D,EAAIO,OAAO9G,EAAI,QAI7E,GAAIzG,EAAO,OACuE,IAA1E8M,EAAQ9M,KAAKiN,SAASC,UAAU,GAAGlC,MAAMT,OAAO4C,YAAY,GAAGhC,SACc,IAA1E2B,EAAQ9M,KAAKiN,SAASC,UAAU,GAAGlC,MAAMT,OAAO4C,YAAY,GAAGhC,QAElE,GAA4E,4BAAxE2B,EAAQ9M,KAAKiN,SAASC,UAAU,GAAGlC,MAAMT,OAAO4C,YAAY,GAAGC,KAA0B,CACzF,IAAIC,EAAO,GACXP,EAAQ9M,KAAKiN,SAASC,UAAU,GAAGlC,MAAMT,OAAO4C,YAAYxJ,KAAI,SAAC2J,EAAOzJ,GAEpE,OADAwJ,EAAKxJ,GAAMyJ,EAAMnC,OACVkC,KAEqB,4BAA5BL,EAAIO,OAAOC,eAAgD,IAAZH,EAAK,GACpDd,EAAIkB,SAASxE,EAAoBjJ,GAAOgN,EAAIO,OAAOrE,EAAG8D,EAAIO,OAAO9G,EAAI,GACpC,mCAA5BuG,EAAIO,OAAOC,eAAoD,IAAZH,EAAK,GAC7Dd,EAAIkB,SAASxE,EAAoBjJ,GAAOgN,EAAIO,OAAOrE,EAAG8D,EAAIO,OAAO9G,EAAI,GACpC,6BAA5BuG,EAAIO,OAAOC,eAAmD,IAAZH,EAAK,IAC5Dd,EAAIkB,SAASxE,EAAoBjJ,GAAOgN,EAAIO,OAAOrE,EAAG8D,EAAIO,OAAO9G,EAAI,QAIzE8F,EAAIkB,SAASxE,EAAoBjJ,GAAOgN,EAAIO,OAAOrE,EAAG8D,EAAIO,OAAO9G,EAAI,cAYjH,OACI,yBAAKrG,UAAU,mBAGX,yBAAKA,UAAU,aACX,mEACA,kBAAC,MAAD,CACIJ,KAAMuJ,EAAQU,mBACdG,QAASb,EAAQa,WAIzB,yBAAKhK,UAAU,aACX,8EACA,kBAAC,MAAD,CACIJ,KAAMuJ,EAAQY,oBACdC,QAASb,EAAQa,WAIzB,yBAAKhK,UAAU,aACX,yFACA,kBAAC,MAAD,CACIJ,KAAMuJ,EAAQC,cACdY,QAASb,EAAQa,a,OCzDtBkI,MA9If,SAAsBjR,GAGlB,IAAMrB,EAAO,CACTyJ,OAAQ,CAAC,cAAY,oBAAa,aAClCE,SAAU,CAAC,CACPC,MAAO,aACP5J,KAAM,CAACqB,EAAM+B,MAAO/B,EAAMqC,UAAWrC,EAAMkC,QAC3CsG,gBAAiB,CACb,UACA,UACA,cAyBZ,OACIxI,GAASrB,EACL,6BAEI,yBAAKI,UAAU,WACX,kBAAC,WAAD,CACIJ,KAAMA,EACNuS,OAAQ,IACRnI,QAAS,CACLC,qBAAqB,EACrBuB,SAAU,CACNG,UAAW,CACPyD,MAAO,SAAUxD,EAAahM,GAC1B,OAAOA,EAAI,OAAWgM,EAAY,GAAZ,QAE1BpC,MAAO,SAAUoC,EAAahM,GAC1B,IAAI8M,EAAU9M,EAAK2J,SAAS,GAExB6I,EAAa1F,EAAQ9M,KAAK,GAAK8M,EAAQ9M,KAAK,GAAK8M,EAAQ9M,KAAK,GAC9DyS,EAAUzS,EAAI,SAAa,GAAjB,KAA4BgM,EAAW,OAAawG,EAMlE,OAAOxS,EAAI,SAAa,GAAjB,KAA4BgM,EAAW,OAAa,KAAO5C,KAAKC,MAAgB,IAAVoJ,GAAiB,QAiB1GC,WAAY,CACRhL,SAAS,EACT0F,KAAK,OAETlB,UAAW,CACPC,SAAU,IACVwG,OAAQ,qBAsD1B,MCoECC,MA1Mf,SAAsBvR,GAElB,IAAMwR,EAAQxR,EAAMwR,MAFK,EAGevT,qBAHf,mBAGlBwT,EAHkB,KAGJC,EAHI,OAIazT,qBAJb,mBAIlB+E,EAJkB,KAILC,EAJK,OAMehF,mBAAS,CAC7C8N,KAAM,4BACNuE,MAAM,IARe,mBAMlBC,EANkB,KAMJC,EANI,KA6KzB,OAlKAlS,qBAAU,WACoB,SAApBkT,EAAMG,OAAOnP,ICjBZ,SAAqBxC,EAAO4R,EAAuB3O,GAC9D,IAAI4O,EAEJ,GAAI7R,EAAM8R,SAAS5T,MAMf,OALA2T,EAAa7R,EAAM8R,SAAS5T,MAAM,GAClC2O,aAAaM,QAAQyE,EAAuBjF,KAAKS,UAAUpN,EAAM8R,SAAS5T,MAAM,KAChF+E,EAAe4O,GACfE,QAAQC,IAAI,gBAELH,EAEN,GAAIhF,aAAaC,QAAQ8E,GAI1B,OAHAC,EAAalF,KAAKC,MAAMC,aAAaC,QAAQ8E,IAC7C3O,EAAe4O,GAERA,EAIP,IAAItN,EAAM,GACVvD,IAAMC,IAAI,mCACLC,MAAK,SAAAzC,GACF,IAAM6F,EAAU,CAAC,UAAW,SAAU,aAAc,QAAS,SAAU,aACvE7F,EAASE,KAAK2D,KAAI,SAACmC,EAAMjC,GAQrB,OAPAkC,OAAOC,KAAKF,GACPnD,QAAO,SAAAI,GAAG,OAAI4C,EAAQM,SAASlD,MAC/BmD,QAAO,SAACtD,EAAKG,GAGV,OAFAH,EAAIG,GAAO+C,EAAK/C,GAChB6C,EAAI/B,GAAMjB,EACHA,IACR,IACA,QAEXgD,EAAMA,EAAIjD,QAAO,SAAUkE,GACvB,OAAOA,EAAEC,UAAYzF,EAAMwR,MAAMG,OAAOnP,MAE5CqK,aAAaM,QAAQyE,EAAuBjF,KAAKS,UAAU7I,EAAI,KAC/DtB,EAAesB,EAAI,OAEtB0N,OAAM,SAAAC,GACHH,QAAQC,IAAIE,MDtBhBhD,CAAYlP,EAfM,iBAewBiD,KAC/C,CAACjD,IAEJ1B,qBAAU,YACS,uCAAG,gDAAAC,EAAA,yDAC0DkR,EAAa,GAAIC,EAAmB,GACpF,SAApB8B,EAAMG,OAAOnP,GAFH,qBAGgB,IAAtB+N,EAAaD,KAHP,gCAIY9R,MAAM,wCAJlB,OAIN+I,EAJM,+CAMY/I,MAAM,qDANlB,QAMN+I,EANM,gCAOIA,EAAU7I,OAPd,QAOV8I,EAPU,OAQVa,EAAS3D,OAAOC,KAAK6C,EAAMzF,OAC3B4N,EAAcjL,OAAOyN,OAAO3K,EAAMzF,OAClC8N,EAAiBnL,OAAOyN,OAAO3K,EAAMnF,WACrCuN,EAAclL,OAAOyN,OAAO3K,EAAMtF,QAXxB,4BAegB,IAAtBqO,EAAaD,KAfP,kCAgBY9R,MAAM,oCAAD,OAAqCgT,EAAMG,OAAOnP,KAhBnE,QAgBN+E,EAhBM,gDAkBY/I,MAAM,oCAAD,OAAqCgT,EAAMG,OAAOnP,GAAlD,mBAlBjB,QAkBN+E,EAlBM,gCAoBIA,EAAU7I,OApBd,QAoBV8I,EApBU,OAqBVa,EAAS3D,OAAOC,KAAK6C,EAAM4K,SAASrQ,OACpC4N,EAAcjL,OAAOyN,OAAO3K,EAAM4K,SAASrQ,OAE3C8N,EAAiBnL,OAAOyN,OAAO3K,EAAM4K,SAAS/P,WAE9CuN,EAAclL,OAAOyN,OAAO3K,EAAM4K,SAASlQ,QA1BjC,QA8BdmG,EAAO/F,KAAI,SAAC+P,EAAY7P,GACpB,GAAImN,EAAYnN,GAAM,EAAG,CACrB,IAAI8P,EAAI,IAAIC,KAAKF,GACbG,EAAaF,EAAEG,UAAY,MAAQH,EAAEI,WAAa,GAAK,KAAOJ,EAAEK,cACpE,OAAOtK,EAAO7F,GAAMgQ,EAEnB,OAAO,QAGhB7C,EAAYrN,KAAI,SAACsQ,EAASpQ,GAMtB,OALAkN,EAAiBlN,GAAMoQ,EAAU/C,EAAerN,GAAMoN,EAAYpN,GAC9DA,EAAK,IACLiN,EAAWjN,EAAK,GAAKmN,EAAYnN,GAAMmN,EAAYnN,EAAK,IAGrDiN,KAGXE,EAAcA,EAAYrO,QAAO,SAAA2K,GAAK,OAAc,IAAVA,KAC1C4D,EAAiBA,EAAegD,QAAQlD,EAAY9Q,QACpD+Q,EAAcA,EAAYiD,QAAQlD,EAAY9Q,QAC9CwJ,EAASA,EAAOwK,QAAQlD,EAAY9Q,QACpC4Q,EAAaA,EAAWmB,OAAOjB,EAAY9Q,QAC3C6Q,EAAmBA,EAAiBkB,OAAOjB,EAAY9Q,QAMnDmE,IACIuB,EAAMG,OAAOC,KAAK6C,EAAM4K,SAASrQ,OAAO2C,OAAOC,KAAK6C,EAAM4K,SAASrQ,OAAOlD,OAAS,IACnFyT,EAAI,IAAIC,KAAKhO,IACfuO,QAAQR,EAAEG,UAAY,GACpBM,EAAgBT,EAAEG,UAAY,MAAQH,EAAEI,WAAa,GAAK,KAAOJ,EAAEK,cACvEhD,EAAY1B,KAAKjL,EAAYjB,OAC7B0N,EAAWxB,KAAKjL,EAAYf,YAC5B2N,EAAY3B,KAAKjL,EAAYd,QAC7BmG,EAAO4F,KAAK8E,GACZlD,EAAe5B,KAAKjL,EAAYX,WAChCqN,EAAiBzB,KAAKjL,EAAYhB,SAGtC0P,EACI,CACI1G,kBAAmBuF,EAAaD,KAChCjI,OAAQA,EAERF,cAAe,CACXG,SAAU,CACN,CACIC,MAAO,sCACP5J,KAAMgR,EACNnH,gBAAiB,mBACjBwH,UAAW,QACXC,qBAAsB,SAKlCxH,eAAgB,CACZH,SAAU,CACN,CACIC,MAAO,oCACP5J,KAAMiR,EACNpH,gBAAiB,OACjByH,qBAAsB,UAKlCvH,kBAAmB,CACfJ,SAAU,CACN,CACIC,MAAO,4CACP5J,KAAMkR,EACNrH,gBAAiB,QACjByH,qBAAsB,WAKlCnH,oBAAqB,CACjBR,SAAU,CACN,CACIC,MAAO,8CACP5J,KAAM+Q,EACNlH,gBAAiB,OACjByH,qBAAsB,UAKlCrH,mBAAoB,CAChBN,SAAU,CACN,CACIC,MAAO,sCACP5J,KAAM8Q,EACNjH,gBAAiB,SACjByH,qBAAsB,cAhI5B,4CAAH,qDAyIftI,KAED,CAAC4I,EAAciB,EAAMG,OAAOnP,GAAIQ,IAkB/ByO,EACI,yBAAK1S,UAAU,gBAGU,SAApByS,EAAMG,OAAOnP,GACV,iDAGA,qDAA6BgP,EAAMG,OAAOnP,IAG9C,kBAAC,EAAD,CAAcT,MAAO0P,EAAatJ,cAAcG,SAAS,GAAG3J,KAAK8S,EAAatJ,cAAcG,SAAS,GAAG3J,KAAKE,OAAS,GAClHwD,UAAWoP,EAAa/I,kBAAkBJ,SAAS,GAAG3J,KAAK8S,EAAa/I,kBAAkBJ,SAAS,GAAG3J,KAAKE,OAAS,GACpHqD,OAAQuP,EAAahJ,eAAeH,SAAS,GAAG3J,KAAK8S,EAAahJ,eAAeH,SAAS,GAAG3J,KAAKE,OAAS,KAE/G,yBAAKE,UAAU,yBAAyB6C,QA9BzB,YACG,IAAtB2O,EAAaD,KACbE,EAAgB,CACZzE,KAAM,6BACNuE,MAAOC,EAAaD,OAGxBE,EAAgB,CACZzE,KAAM,4BACNuE,MAAOC,EAAaD,SAsBfC,EAAaxE,MAIlB,6BACI,kBAAC,EAAD,CAAS/L,MAAOyR,MAGtB,MEvKCuB,MAlBf,WACE,OACE,kBAAC,IAAD,CAAQC,SAAS,KACf,yBAAKlU,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOmU,KAAK,IAAIC,UAAWnM,EAAUoM,OAAK,IAC1C,kBAAC,IAAD,CAAOF,KAAK,iBAAiBC,UAAWjD,IACxC,kBAAC,IAAD,CAAOgD,KAAK,kBAAkBE,OAAK,EAACD,UAAWnM,IAC/C,kBAAC,IAAD,CAAOkM,KAAK,sBAAsBC,UAAW5B,QCxBvD8B,IAASC,OAAO,kBAAC,EAAD,MAASrO,SAASa,eAAe,U,6DCLjDyN,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,0C","file":"static/js/main.855da3e1.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport './nav.css'\r\nimport earthIcon from \"./imgs/earth.svg\"\r\nimport slovakiaIcon from \"./imgs/slovakiaIcon.svg\"\r\n\r\nfunction Nav() {\r\n    const [state, setState] = useState()\r\n    let navStyle = {\r\n        color: 'white',\r\n    }\r\n    useEffect(() => {\r\n        const LoadData = async () => {\r\n            const response = await fetch('https://mapa.covid.chat/map_data')\r\n            const data = await response.json()\r\n\r\n            setState(data.tested_chart[data.tested_chart.length - 1])\r\n        }\r\n        LoadData()\r\n    }, [])\r\n\r\n\r\n    const PocPripadov = () => {\r\n        if (state) {\r\n            let sklnovaniePripadov = \"prípadov\"\r\n            if (state.day === 1)\r\n                sklnovaniePripadov = \"prípad\"\r\n            else if (state.infected > 1 && state.infected < 5)\r\n                sklnovaniePripadov = \"prípady\"\r\n\r\n            return (\r\n                <div>{state.day}: <span>{state.infected}</span> {sklnovaniePripadov}</div>\r\n            )\r\n        }\r\n        else return null\r\n    }\r\n\r\n    // function doubleClickFC() {\r\n    //     window.location.href = \"#/Todo\"\r\n    // }\r\n\r\n    return (\r\n        <nav className=\"navApp\" >\r\n            <ul className=\"navLinks\">\r\n                <li>\r\n                    <Link style={navStyle} to='/Covid/CovidApp'>\r\n                        <div>\r\n                            <img alt=\"\" src={earthIcon} className=\"earthIcon\" />Covid vo svete\r\n                        </div>\r\n                    </Link>\r\n                </li>\r\n                <li>\r\n                    <Link style={navStyle} to='/Covid/CovidSK'>\r\n                        <div>\r\n                            <img alt=\"\" src={slovakiaIcon} className=\"svkIcon\" />Covid na Slovensku\r\n                           <div className=\"novePripady\">\r\n                                {PocPripadov()}\r\n                            </div>\r\n                        </div>\r\n                    </Link>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","function FormatNumber(num) {\r\n    if (num && num.prop > 999) {\r\n        return num.prop.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \")\r\n    }\r\n    else if (num) { return num.prop }\r\n    else { return null }\r\n}\r\n\r\nexport default FormatNumber\r\n","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport FormatNumber from './components/FormatNumber'\r\nimport { IoIosArrowUp } from 'react-icons/io';\r\n\r\nfunction PrvyRiadokTabulky(props) {\r\n    // console.log(props)\r\n    const [dataKontinenty, setDataKontinenty] = useState()\r\n    const [doTabulkyPrvyRiadok, setDoTabulkyPrvyRiadok] = useState()\r\n    const [sipkyDole, setSipkyDole] = useState(true)\r\n    const [sipkaKontinenty, setSipkaKontinenty] = useState({\r\n        transition: 'all .2s ease-in',\r\n        marginBottom: '-3px',\r\n        marginLeft: '3px',\r\n    })\r\n    const [styleForRollDown, setStyleForRollDown] = useState({\r\n        position: 'absolute',\r\n        left: '-1000px',\r\n        transition: 'all .2s ease-in',\r\n        // fontSize: '15px',\r\n    })\r\n\r\n    useEffect(() => {\r\n        axios.get(`https://disease.sh/v2/continents`)\r\n            .then(res => {\r\n                setDataKontinenty([res.data])\r\n            })\r\n\r\n        // if (dataKontinenty) {\r\n        //     let result = dataKontinenty[0].filter(obj => {\r\n        //         return obj.continent === props.kontinent\r\n        //     })\r\n        //     setDoTabulkyPrvyRiadok(result[0])\r\n        // }\r\n    }, [props.kontinent])\r\n\r\n\r\n    useEffect(() => {\r\n        if (dataKontinenty) {\r\n            let result = dataKontinenty[0].filter(obj => {\r\n                return obj.continent === props.kontinent\r\n            })\r\n            setDoTabulkyPrvyRiadok(result[0])\r\n        }\r\n    }, [dataKontinenty, props.kontinent])\r\n\r\n\r\n\r\n    const rollDownContintinents = () => {\r\n        setSipkyDole(!sipkyDole)\r\n        if (sipkyDole) {\r\n            setSipkaKontinenty({\r\n                transform: \"rotate(180deg)\",\r\n                transition: 'all .2s ease-in',\r\n                marginBottom: '-3px',\r\n                marginLeft: '3px',\r\n            })\r\n            setStyleForRollDown({\r\n                // background: 'rgb(234, 234, 234)',\r\n                // fontSize: '15px',\r\n                transition: 'all .2s ease-in',\r\n            })\r\n        }\r\n        else {\r\n            setStyleForRollDown({\r\n                position: 'absolute',\r\n                left: '-1000px',\r\n                transition: 'all .2s ease-in',\r\n                // fontSize: '15px',\r\n            })\r\n\r\n            setSipkaKontinenty({\r\n                transform: \"rotate(0deg)\",\r\n                transition: 'all .2s ease-in',\r\n                marginBottom: '-3px',\r\n                marginLeft: '3px',\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        styleForRollDown && dataKontinenty && sipkaKontinenty && styleForRollDown && props.mainData && props ?\r\n            <>\r\n                {/* {console.log(\"PrvyRiadokTabulky\")} */}\r\n                {/* {console.log(styleForRollDown, dataKontinenty, sipkaKontinenty, styleForRollDown, props.mainData, props)} */}\r\n                {props.kontinent === \"Svet\" ?\r\n                    <>\r\n                        <tr key={-1} style={{ background: 'rgb(234, 234, 234)' }} >\r\n                            <td onClick={rollDownContintinents}>\r\n                                <span className=\"spanJustHoverPointer\" >Celý Svet <IoIosArrowUp style={sipkaKontinenty} />\r\n                                    <div className=\"firstCase\">\r\n                                        <div className=\"firstCaseNumber\"><FormatNumber prop={props.mainData[0].tests} />\r\n                                        </div>\r\n                                    </div>\r\n                                </span>\r\n                            </td>\r\n                            <td><FormatNumber prop={props.mainData[0].cases} /></td>\r\n                            <td><FormatNumber prop={props.mainData[0].active} /></td>\r\n                            <td style={{ background: 'rgba(254, 255, 194, .4)' }}>+<FormatNumber prop={props.mainData[0].todayCases} /></td>\r\n                            <td><FormatNumber prop={props.mainData[0].deaths} /></td>\r\n                            <td style={{ color: ' rgba(156, 20, 20, 0.849)', fontWeight: 'bold' }}>+<FormatNumber prop={props.mainData[0].todayDeaths} /></td>\r\n                            <td style={{ fontWeight: 'bold', color: '#006600' }}><FormatNumber prop={props.mainData[0].recovered} /></td>\r\n                        </tr>\r\n                        {\r\n                            dataKontinenty[0].map((oneKontinent, id) => (\r\n                                <tr key={id} className=\"zrolovaneKontinenty\" style={styleForRollDown} >\r\n                                    <td style={{ width: '100px' }}>\r\n                                        {oneKontinent.continent}\r\n                                        <div className=\"firstCase\"><div className=\"firstCaseNumber\"><FormatNumber prop={oneKontinent.tests} /></div></div>\r\n                                    </td>\r\n                                    <td><FormatNumber prop={oneKontinent.cases} /></td>\r\n                                    <td><FormatNumber prop={oneKontinent.active} /></td>\r\n                                    <td style={{}}>+<FormatNumber prop={oneKontinent.todayCases} /></td>\r\n                                    <td><FormatNumber prop={oneKontinent.deaths} /></td>\r\n                                    <td style={{ color: ' rgba(156, 20, 20, 0.849)', fontWeight: 'bold' }}>+<FormatNumber prop={oneKontinent.todayDeaths} /></td>\r\n                                    <td style={{ fontWeight: 'bold', color: '#006600' }}><FormatNumber prop={oneKontinent.recovered} /></td>\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                    </>\r\n                    :\r\n                    <>\r\n                        {doTabulkyPrvyRiadok ?\r\n                            <tr key={-10} style={{ background: 'rgb(234, 234, 234)' }} >\r\n                                <td style={{ width: '100px' }}>\r\n                                    {doTabulkyPrvyRiadok.continent}\r\n                                    <div className=\"firstCase\"><div className=\"firstCaseNumber\"><FormatNumber prop={doTabulkyPrvyRiadok.tests} /></div></div>\r\n                                </td>\r\n                                <td><FormatNumber prop={doTabulkyPrvyRiadok.cases} /></td>\r\n                                <td><FormatNumber prop={doTabulkyPrvyRiadok.active} /></td>\r\n                                <td style={{}}>+<FormatNumber prop={doTabulkyPrvyRiadok.todayCases} /></td>\r\n                                <td><FormatNumber prop={doTabulkyPrvyRiadok.deaths} /></td>\r\n                                <td style={{ color: ' rgba(156, 20, 20, 0.849)', fontWeight: 'bold' }}>+<FormatNumber prop={doTabulkyPrvyRiadok.todayDeaths} /></td>\r\n                                <td style={{ fontWeight: 'bold', color: '#006600' }}><FormatNumber prop={doTabulkyPrvyRiadok.recovered} /></td>\r\n                            </tr>\r\n                            : null}\r\n                    </>\r\n                }\r\n            </>\r\n            : null\r\n    )\r\n}\r\n\r\nexport default PrvyRiadokTabulky\r\n","import React, { useState, useReducer, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { FaSortAmountDown } from 'react-icons/fa';\r\nimport PrvyRiadokTabulky from './PrvyRiadokTabulky';\r\nimport FormatNumber from './components/FormatNumber'\r\nimport './css/TabulkaSvet.css'\r\n\r\n\r\nfunction SvetTabulka(props) {\r\n    const [ikonka, setIkonka] = useState('cases')\r\n    const [kontinent, setKontinent] = useState(\"Svet\")\r\n    const [scrollPerformance, setScrollPerformance] = useState(false)\r\n    const [LastDayData, setLastDayData] = useState()\r\n    const [style4Buttons, setStyle4Buttons] = useState({\r\n        Svet: { background: '#e5e5e5', boxShadow: 'inset 0px 0px 5px #c1c1c1' },\r\n        Europe: null,\r\n        V4: null,\r\n        North_America: null,\r\n        Asia: null,\r\n        South_America: null,\r\n        Africa: null,\r\n        Australia_Oceania: null,\r\n    })\r\n\r\n    const pomForStyleButtons = {\r\n        Svet: null,\r\n        Europe: null,\r\n        V4: null,\r\n        North_America: null,\r\n        Asia: null,\r\n        South_America: null,\r\n        Africa: null,\r\n        Australia_Oceania: null,\r\n    }\r\n    const constStyleforButtons = {\r\n        background: '#e5e5e5',\r\n        // background: 'rgb(216, 216, 216)',\r\n        boxShadow: 'inset 0px 0px 5px rgb(179, 179, 179)',\r\n        // transform: \"translate(1px,2px)\",\r\n        // fontWeight: 'bold'\r\n        // color: 'white'\r\n    }\r\n    // const [dispatch] = useReducer(reducer, 1);\r\n    const [state, dispatch] = useReducer(reducer, 1);\r\n\r\n    useEffect(() => {\r\n        const allowed = [\"country\", \"active\", \"todayCases\", \"cases\", \"deaths\", \"recovered\"]\r\n        let pom = []\r\n        props.countriesData.map((udaj, id) => {\r\n            Object.keys(udaj)\r\n                .filter(key => allowed.includes(key))\r\n                .reduce((obj, key) => {\r\n                    obj[key] = udaj[key];\r\n                    pom[id] = obj\r\n                    return obj;\r\n\r\n                }, {})\r\n            return null\r\n        })\r\n        setLastDayData(pom)\r\n    }, [props.countriesData])\r\n\r\n    function reducer(state, action) {\r\n        switch (action.type) {\r\n            case 'Svet':\r\n                setKontinent(\"Svet\")\r\n                return (setStyle4Buttons(prevState => {\r\n                    return { ...pomForStyleButtons, Svet: constStyleforButtons }\r\n                }))\r\n            case 'Europe':\r\n                setKontinent(\"Europe\")\r\n                return (setStyle4Buttons(prevState => {\r\n                    return { ...pomForStyleButtons, Europe: constStyleforButtons }\r\n                }))\r\n            case 'V4':\r\n                setKontinent(\"V4\")\r\n                return (setStyle4Buttons(prevState => {\r\n                    return { ...pomForStyleButtons, V4: constStyleforButtons }\r\n                }))\r\n            case 'North America':\r\n                setKontinent(\"North America\")\r\n                return (setStyle4Buttons(prevState => {\r\n                    return { ...pomForStyleButtons, North_America: constStyleforButtons }\r\n                }))\r\n            case 'Asia':\r\n                setKontinent(\"Asia\")\r\n                return (setStyle4Buttons(prevState => {\r\n                    return { ...pomForStyleButtons, Asia: constStyleforButtons }\r\n                }))\r\n            case 'South America':\r\n                setKontinent(\"South America\")\r\n                return (setStyle4Buttons(prevState => {\r\n                    return { ...pomForStyleButtons, South_America: constStyleforButtons }\r\n                }))\r\n            case 'Africa':\r\n                setKontinent(\"Africa\")\r\n                return (setStyle4Buttons(prevState => {\r\n                    return { ...pomForStyleButtons, Africa: constStyleforButtons }\r\n                }))\r\n            case 'Australia/Oceania':\r\n                setKontinent(\"Australia/Oceania\")\r\n                return (setStyle4Buttons(prevState => {\r\n                    return { ...pomForStyleButtons, Australia_Oceania: constStyleforButtons }\r\n                }))\r\n\r\n\r\n            default:\r\n                throw new Error();\r\n        }\r\n    }\r\n\r\n\r\n\r\n    function zmenIkonku(key) {\r\n        if (key === ikonka) {\r\n            setIkonka(key + \"2\")\r\n        }\r\n        else { setIkonka(key) }\r\n    }\r\n\r\n    const myStyle2 = {\r\n        transform: \"rotateX(180deg)\",\r\n    }\r\n\r\n    const myFunction = () => {\r\n        var input, filter, table, tr, td, i, txtValue;\r\n        input = document.getElementById(\"myInput\");\r\n        filter = input.value.toUpperCase();\r\n        table = document.getElementById(\"myTable\");\r\n        tr = table.getElementsByTagName(\"tr\");\r\n        for (i = 0; i < tr.length; i++) {\r\n            td = tr[i].getElementsByTagName(\"td\")[0];\r\n            if (td) {\r\n                txtValue = td.textContent || td.innerText;\r\n                if (txtValue.toUpperCase().indexOf(filter) > -1) {\r\n                    tr[i].style.display = \"\";\r\n                } else {\r\n                    tr[i].style.display = \"none\";\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    window.addEventListener('scroll', function () {\r\n        if (document.querySelector('.scrollingSvet')) {\r\n            if (document.querySelector('.scrollingSvet').getBoundingClientRect().y < 170)\r\n                setScrollPerformance(true)\r\n        }\r\n    });\r\n\r\n    const greenBackgroundforTR = (active) => {\r\n        if (active)\r\n            return null\r\n        else\r\n            return ({ background: 'rgb(190, 245, 204)' })\r\n    }\r\n\r\n    function LastDataFunction(propCountry) {\r\n        if (LastDayData)\r\n            return LastDayData.filter(function (e) {\r\n                return e.country === propCountry\r\n            })\r\n    }\r\n    return (\r\n        ikonka && kontinent && props ?\r\n            <>\r\n                <input type=\"text\" id=\"myInput\" onKeyUp={myFunction} placeholder=\"Hľadať..\" className=\"inputSearch\" />\r\n                <div className=\"kontinenty\">\r\n                    <button onClick={() => dispatch({ type: 'Svet' })} style={style4Buttons.Svet}>\r\n                        Svet\r\n                    </button>\r\n                    <button onClick={() => dispatch({ type: 'Europe' })} style={style4Buttons.Europe}>\r\n                        Európa\r\n                    </button>\r\n                    <button onClick={() => dispatch({ type: 'V4' })} style={style4Buttons.V4}>\r\n                        V4\r\n                    </button>\r\n                    <button onClick={() => dispatch({ type: 'North America' })} style={style4Buttons.North_America}>\r\n                        Severná Amerika\r\n                    </button>\r\n                    <button onClick={() => dispatch({ type: 'Asia' })} style={style4Buttons.Asia}>\r\n                        Ázia\r\n                    </button>\r\n                    <button onClick={() => dispatch({ type: 'South America' })} style={style4Buttons.South_America}>\r\n                        Južná Amerika\r\n                    </button>\r\n                    <button onClick={() => dispatch({ type: 'Africa' })} style={style4Buttons.Africa}>\r\n                        Afrika\r\n                    </button>\r\n                    <button onClick={() => dispatch({ type: 'Australia/Oceania' })} style={style4Buttons.Australia_Oceania}>\r\n                        Austrália/Oceánia\r\n                    </button>\r\n\r\n                </div>\r\n                <div className=\"divTable\" >\r\n                    <table id=\"myTable\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th onClick={() => (props.sortBy(\"tests\") || zmenIkonku(\"tests\"))} >\r\n                                    Krajina<br></br>\r\n                                    <div className=\"firstCase\" style={{ fontWeight: 'normal' }}>Počet testov</div>\r\n                                    {ikonka === \"tests\"\r\n                                        ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                    {ikonka === \"tests2\"\r\n                                        ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                </th>\r\n                                <th onClick={() => (props.sortBy('cases') || zmenIkonku('cases'))} >\r\n                                    Počet nakazených\r\n                            {ikonka === \"cases\"\r\n                                        ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                    {ikonka === \"cases2\"\r\n                                        ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                </th>\r\n                                <th onClick={() => (props.sortBy(\"active\") || zmenIkonku(\"active\"))} >\r\n                                    Aktívne prípady\r\n                            {ikonka === \"active\"\r\n                                        ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                    {ikonka === \"active2\"\r\n                                        ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                </th>\r\n                                <th onClick={() => (props.sortBy(\"todayCases\") || zmenIkonku(\"todayCases\"))} >\r\n                                    Nové prípady\r\n                            {ikonka === \"todayCases\"\r\n                                        ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                    {ikonka === \"todayCases2\"\r\n                                        ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                </th>\r\n                                <th onClick={() => (props.sortBy(\"deaths\") || zmenIkonku(\"deaths\"))} >\r\n                                    Počet úmrtí\r\n                            {ikonka === \"deaths\"\r\n                                        ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                    {ikonka === \"deaths2\"\r\n                                        ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                </th>\r\n                                <th onClick={() => (props.sortBy(\"todayDeaths\") || zmenIkonku(\"todayDeaths\"))} >\r\n                                    Nové úmrtia\r\n                            {ikonka === \"todayDeaths\"\r\n                                        ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                    {ikonka === \"todayDeaths2\"\r\n                                        ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                </th>\r\n                                <th onClick={() => (props.sortBy(\"recovered\") || zmenIkonku(\"recovered\"))} >\r\n                                    Počet vyliečených\r\n                            {ikonka === \"recovered\"\r\n                                        ? <FaSortAmountDown className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                    {ikonka === \"recovered2\"\r\n                                        ? <FaSortAmountDown style={myStyle2} className=\"sortIcon\" />\r\n                                        : null\r\n                                    }\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <PrvyRiadokTabulky kontinent={kontinent} mainData={props.mainData} />\r\n                            {kontinent === \"Svet\" ?\r\n                                <>\r\n                                    {props.countriesData.map((item, id) => (\r\n                                        scrollPerformance || id < 20 ?\r\n                                            <tr className=\"scrollingSvet\" key={id} style={greenBackgroundforTR(item.active)}>\r\n                                                <td style={{ width: '100px' }}>\r\n                                                    {item.country === \"Slovakia\" ?\r\n                                                        <Link to=\"/Covid/CovidSK\">\r\n                                                            <span className=\"KrajinaLink\" >{item.country}</span>\r\n                                                            {item.tests > 0 ?\r\n                                                                <div className=\"firstCase\">\r\n                                                                    <div className=\"firstCaseNumber\">\r\n                                                                        <FormatNumber prop={item.tests} />\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                                : null}\r\n                                                        </Link>\r\n                                                        :\r\n                                                        <Link to={{\r\n                                                            state: LastDataFunction(item.country), pathname: `/Covid/CovidApp/${item.country}`\r\n                                                        }}>\r\n                                                            <span className=\"KrajinaLink\" >{item.country}</span>\r\n                                                            {item.tests > 0 ?\r\n                                                                <div className=\"firstCase\">\r\n                                                                    <div className=\"firstCaseNumber\">\r\n                                                                        <FormatNumber prop={item.tests} />\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                                : null}\r\n                                                        </Link>\r\n                                                    }\r\n\r\n                                                </td>\r\n                                                <td><FormatNumber prop={item.cases} /></td>\r\n                                                <td>{item.active ? <FormatNumber prop={item.active} /> : \"0\"}</td>\r\n\r\n                                                {item.todayCases > 0 ?\r\n                                                    <td style={{ background: ' rgb(254, 255, 194)' }}>+<FormatNumber prop={item.todayCases} /> </td>\r\n                                                    : <td></td>\r\n                                                }\r\n                                                <td><FormatNumber prop={item.deaths} /></td>\r\n                                                {item.todayDeaths > 0 ?\r\n                                                    <td style={{ color: ' rgba(156, 20, 20, 0.849)', fontWeight: 'bold' }}>+<FormatNumber prop={item.todayDeaths} /> </td>\r\n                                                    : <td></td>\r\n                                                }\r\n                                                <td style={{ fontWeight: 'bold', color: '#006600' }}><FormatNumber prop={item.recovered} /></td>\r\n                                            </tr>\r\n                                            : null\r\n                                    ))\r\n                                    }\r\n                                </>\r\n\r\n                                : kontinent === \"V4\" ?\r\n                                    <>\r\n                                        {props.countriesData.map((item, id) => (\r\n                                            item.country === \"Slovakia\"\r\n                                                || item.country === \"Czechia\"\r\n                                                || item.country === \"Hungary\"\r\n                                                || item.country === \"Poland\"\r\n                                                || item.country === \"Austria\"\r\n                                                || item.country === \"Ukraine\" ?\r\n\r\n                                                <tr className=\"scrollingSvet\" key={id} style={greenBackgroundforTR(item.active)}>\r\n                                                    {/* {console.log(item.country)} */}\r\n\r\n                                                    <td style={{ width: '100px' }}>\r\n                                                        {item.country === \"Slovakia\" ?\r\n                                                            <Link to=\"/Covid/CovidSK\" >\r\n\r\n                                                                <span className=\"KrajinaLink\" >{item.country}</span>\r\n                                                                {item.tests > 0 ?\r\n                                                                    <div className=\"firstCase\">\r\n                                                                        <div className=\"firstCaseNumber\">\r\n                                                                            <FormatNumber prop={item.tests} />\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                    : null}\r\n                                                            </Link>\r\n                                                            :\r\n\r\n                                                            <Link to={{\r\n                                                                state: LastDataFunction(item.country), pathname: `/Covid/CovidApp/${item.country}`\r\n                                                            }}>\r\n                                                                <span className=\"KrajinaLink\" >{item.country}</span>\r\n\r\n                                                                {item.tests > 0 ?\r\n                                                                    <div className=\"firstCase\">\r\n                                                                        <div className=\"firstCaseNumber\">\r\n                                                                            <FormatNumber prop={item.tests} />\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                    : null}\r\n                                                            </Link>\r\n\r\n                                                        }\r\n\r\n\r\n                                                    </td>\r\n                                                    <td><FormatNumber prop={item.cases} /></td>\r\n                                                    <td>{item.active ? <FormatNumber prop={item.active} /> : \"0\"}</td>\r\n\r\n                                                    {item.todayCases > 0 ?\r\n                                                        <td style={{ background: ' rgb(254, 255, 194)' }}>+<FormatNumber prop={item.todayCases} /> </td>\r\n                                                        : <td></td>\r\n                                                    }\r\n                                                    <td><FormatNumber prop={item.deaths} /></td>\r\n                                                    {item.todayDeaths > 0 ?\r\n                                                        <td style={{ color: ' rgba(156, 20, 20, 0.849)', fontWeight: 'bold' }}>+<FormatNumber prop={item.todayDeaths} /> </td>\r\n                                                        : <td></td>\r\n                                                    }\r\n                                                    <td style={{ fontWeight: 'bold', color: '#006600' }}><FormatNumber prop={item.recovered} /></td>\r\n                                                </tr>\r\n                                                : null\r\n                                        ))\r\n                                        }\r\n                                    </>\r\n\r\n                                    :\r\n                                    props.countriesData.map((item, id) => (\r\n                                        item.continent === kontinent ?\r\n                                            <tr key={id} style={greenBackgroundforTR(item.active)}>\r\n                                                <td style={{ width: '100px' }}>\r\n                                                    {/* <Link to={`/Covid/CovidApp/${item.country}`} > */}\r\n\r\n                                                    {item.country === \"Slovakia\" ?\r\n                                                        <Link to=\"/Covid/CovidSK\">\r\n                                                            <span className=\"KrajinaLink\" >{item.country}</span>\r\n                                                            {item.tests > 0 ?\r\n                                                                <div className=\"firstCase\">\r\n                                                                    <div className=\"firstCaseNumber\">\r\n                                                                        <FormatNumber prop={item.tests} />\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                                : null}\r\n                                                        </Link>\r\n                                                        :\r\n                                                        <Link to={{\r\n                                                            state: LastDataFunction(item.country), pathname: `/Covid/CovidApp/${item.country}`\r\n                                                        }}>\r\n                                                            <span className=\"KrajinaLink\" >{item.country}</span>\r\n                                                            {item.tests > 0 ?\r\n                                                                <div className=\"firstCase\">\r\n                                                                    <div className=\"firstCaseNumber\">\r\n                                                                        <FormatNumber prop={item.tests} />\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                                : null}\r\n                                                        </Link>\r\n                                                    }\r\n\r\n                                                </td>\r\n                                                <td><FormatNumber prop={item.cases} /></td>\r\n                                                <td>{item.active ? <FormatNumber prop={item.active} /> : \"0\"}</td>\r\n                                                {item.todayCases > 0 ?\r\n                                                    <td style={{ background: ' rgb(254, 255, 194)' }}>+<FormatNumber prop={item.todayCases} /> </td>\r\n                                                    : <td></td>\r\n                                                }\r\n                                                <td><FormatNumber prop={item.deaths} /></td>\r\n                                                {item.todayDeaths > 0 ?\r\n                                                    <td style={{ color: ' rgba(156, 20, 20, 0.849)', fontWeight: 'bold' }}>+<FormatNumber prop={item.todayDeaths} /> </td>\r\n                                                    : <td></td>\r\n                                                }\r\n                                                <td style={{ fontWeight: 'bold', color: 'green' }}><FormatNumber prop={item.recovered} /></td>\r\n                                            </tr>\r\n                                            : null\r\n                                    ))\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                    <label htmlFor=\"myInput\">.</label>\r\n                </div>\r\n            </>\r\n            : null\r\n    )\r\n}\r\n\r\nexport default SvetTabulka","import React from 'react'\r\n// import coronaIcon from \"../../imgs/coronaIcon.svg\"\r\nimport { GiDeathSkull } from \"react-icons/gi\";\r\nimport { FaPlusCircle } from \"react-icons/fa\";\r\nimport { RiVirusLine } from \"react-icons/ri\";\r\nimport FormatNumber from './FormatNumber'\r\nimport '../css/dataWorld.scss'\r\n\r\nfunction DataWorld({ mainData }) {\r\n\r\n\r\n    function numberTrans3(a, b) {\r\n        if (a) {\r\n            let output = b / (a / 100)\r\n            output = b / (a / 100)\r\n            output = output.toFixed(3)\r\n            output = output.toString()\r\n            output = output.replace(\".\", \",\")\r\n            return (\r\n                <div className=\"aktiveNakazenych\">\r\n                    V percentách: <span>{output}%</span>\r\n                </div >\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"cardsDivNew\">\r\n\r\n\r\n            <div className=\"cardsNew\">\r\n                <div className=\"iconInCard cases\">\r\n                    <RiVirusLine />\r\n                </div>\r\n                <div className=\"upperText\">Počet nakazených</div>\r\n                <div className=\"mainText cases\">\r\n                    <FormatNumber prop={mainData[0].cases} />\r\n                </div>\r\n                <div className=\"underText\">\r\n                    Počet aktívnych prípadov:    <span><FormatNumber prop={mainData[0].active} /></span>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"cardsNew\">\r\n                <div className=\"iconInCard recovered\">\r\n                    <FaPlusCircle />\r\n                </div>\r\n                <div className=\"upperText\">Počet vyliečených</div>\r\n                <div className=\"mainText recovered\">\r\n                    <FormatNumber prop={mainData[0].recovered} />\r\n                </div>\r\n                <div className=\"underText\">\r\n                    {/* Počet aktívnych prípadov:    <span><FormatNumber prop={mainData[0].active} /></span> */}\r\n                    {numberTrans3(mainData[0].cases, mainData[0].recovered)}\r\n\r\n                </div>\r\n            </div>\r\n\r\n\r\n            <div className=\"cardsNew\">\r\n                <div className=\"iconInCard deaths\">\r\n                    <GiDeathSkull />\r\n                </div>\r\n                <div className=\"upperText\">Počet úmrtí</div>\r\n                <div className=\"mainText deaths\">\r\n                    <FormatNumber prop={mainData[0].deaths} />\r\n                </div>\r\n                <div className=\"underText\">\r\n                    {numberTrans3(mainData[0].cases, mainData[0].deaths)}\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n\r\n            {/* \r\n            <div className=\"cards\">\r\n                <div className=\"topCard\">\r\n                    <div className=\"obrDiv\">\r\n                        <div className=\"circle\">\r\n                            <img alt=\"\" src={coronaIcon} />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"textCard\">Počet nakazených</div>\r\n                </div>\r\n                <div className=\"mainText\">\r\n                    <FormatNumber prop={mainData[0].cases} />\r\n                    <div className=\"aktiveNakazenych\">\r\n                        <span>Počet aktívnych prípadov:</span> <FormatNumber prop={mainData[0].active} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n            <div className=\"cards\">\r\n                <div className=\"topCard\">\r\n                    <div className=\"obrDiv\">\r\n                        <div className=\"circle HP\">\r\n                            <FaPlusCircle color={\"green\"} />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"textCard\"> Počet vyliečených</div>\r\n                </div>\r\n                <div className=\"mainText\">\r\n                    <FormatNumber prop={mainData[0].recovered} />\r\n                    {numberTrans3(mainData[0].cases, mainData[0].recovered)}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"cards\">\r\n                <div className=\"topCard\">\r\n                    <div className=\"obrDiv\">\r\n                        <div className=\"circle skull\">\r\n                            <GiDeathSkull color={\"white\"} />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"textCard\"> Počet úmrtí</div>\r\n                </div>\r\n                <div className=\"mainText\">\r\n                    <FormatNumber prop={mainData[0].deaths} />\r\n                    {numberTrans3(mainData[0].cases, mainData[0].deaths)}\r\n                </div>\r\n            </div> */}\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default DataWorld\r\n","import React, { useState, useEffect } from 'react'\r\nimport './css/covid.css'\r\nimport './css/covidDesign.css'\r\nimport { Link } from 'react-router-dom'\r\nimport SvetTabulka from \"./SvetTabulka\"\r\nimport { AiOutlineDoubleRight } from \"react-icons/ai\";\r\n// import DougnatChart from \"./DougnatChart\"\r\nimport DataWorld from './components/DataWorld'\r\n\r\nfunction CovidApp() {\r\n    const [mainData, setMainData] = useState()\r\n    const [doughnatData, setDoughnatData] = useState()\r\n    const [countriesData, setCountriesData] = useState()\r\n    const [state, setState] = useState({\r\n        countriesData: countriesData,\r\n        direction: {\r\n            price_usd: 'asc',\r\n        }\r\n    })\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const response1 = await fetch('https://disease.sh/v2/all')\r\n            let data1 = await response1.json()\r\n            setDoughnatData([data1.cases, data1.recovered, data1.deaths])\r\n            setMainData([data1])\r\n\r\n            const response = await fetch('https://disease.sh/v2/countries')\r\n            let data = await response.json()\r\n            setCountriesData(data)\r\n            setState({\r\n                data: data.sort((a, b) => (\r\n                    state.direction['cases'] === 'asc'\r\n                        ? parseFloat(a['cases']) - parseFloat(b['cases'])\r\n                        : parseFloat(b['cases']) - parseFloat(a['cases'])\r\n                )),\r\n                direction: {\r\n                    'cases': state.direction['cases'] === 'asc'\r\n                        ? 'desc'\r\n                        : 'asc'\r\n                }\r\n            })\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    function sortBy(key) {\r\n        setState({\r\n            countriesData: countriesData.sort((a, b) => (\r\n                state.direction[key] === 'asc'\r\n                    ? parseFloat(a[key]) - parseFloat(b[key])\r\n                    : parseFloat(b[key]) - parseFloat(a[key])\r\n            )),\r\n            direction: {\r\n                [key]: state.direction[key] === 'asc'\r\n                    ? 'desc'\r\n                    : 'asc'\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        mainData && doughnatData && countriesData && (state.direction['cases'] || state.direction['tests']\r\n            || state.direction['active']\r\n            || state.direction['todayCases']\r\n            || state.direction['deaths']\r\n            || state.direction['recovered']\r\n            || state.direction['todayDeaths']) ?\r\n            <div className=\"covidApp\">\r\n                <DataWorld mainData={mainData} />\r\n                {/* <DougnatChart cases={doughnatData[0]} recovered={doughnatData[1]} deaths={doughnatData[2]} /> */}\r\n                <br></br>\r\n                <br></br>\r\n                <div className=\"SlovenskeUdajeLink\" >\r\n                    <Link to='/Covid/CovidSK'>Slovenské údaje <AiOutlineDoubleRight className=\"iconSlovUdaje\" />\r\n                    </Link>\r\n                </div>\r\n                <br></br>\r\n                <div className=\"SlovenskeUdajeLink\" >\r\n                    <Link to={`/Covid/CovidApp/Svet`} >Grafy pre celý svet <AiOutlineDoubleRight className=\"iconSlovUdaje\" />\r\n                    </Link>\r\n                </div>\r\n                <br></br><br></br>\r\n                <SvetTabulka countriesData={countriesData} mainData={mainData} sortBy={sortBy} />\r\n            </div >\r\n            : null\r\n\r\n    )\r\n}\r\n\r\nexport default CovidApp\r\n","function FormatNumberShorter(x) {\r\n    if (isNaN(x) || (x < 1000)) {\r\n        return x\r\n    }\r\n    else if (x < 10000) {\r\n        return (x / 1000).toFixed(2) + \"k\"\r\n    }\r\n    else if (x < 100000) {\r\n        return (x / 1000).toFixed(1) + \"k\"\r\n    }\r\n\r\n    else if (x < 1000000) {\r\n        // return (x / 1000).toFixed(1) + \"k\"\r\n        return Math.round((x / 1000)) + \"k\"\r\n\r\n    }\r\n    else if (x < 10000000) {\r\n        return (x / 1000000).toFixed(1) + \"M\"\r\n    }\r\n\r\n    else if (x < 1000000000) {\r\n        return (x / 1000000).toFixed(1) + \"M\"\r\n    }\r\n\r\n    else if (x < 1000000000000) {\r\n        return Math.round((x / 1000000000)) + \"B\"\r\n    }\r\n}\r\n\r\nexport default FormatNumberShorter\r\n","import React from 'react'\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { Chart } from 'react-chartjs-2';\r\nimport './css/cssPreBarGrafy.css'\r\nimport FormatNumberShorter from './components/FormatNumberShorter'\r\nimport './css/cssPreBarGrafy.css'\r\n\r\nfunction BarGrafSvk({ props }) {\r\n    const allData = {\r\n        dataSetsCases: {\r\n            labels: props.datumy,\r\n            datasets: [{\r\n                label: 'Počet mŕtvych',\r\n                backgroundColor: \"grey\",\r\n                data: props.dataSetsDeaths.datasets[0].data,\r\n            },\r\n            {\r\n                label: 'Počet vyliečených',\r\n                backgroundColor: \"#57C757\",\r\n                data: props.dataSetsRecovered.datasets[0].data,\r\n            },\r\n            {\r\n                label: 'Počet nakazených',\r\n                backgroundColor: \"#FF4D4D\",\r\n                data: props.dataSetsCases.datasets[0].data,\r\n            }],\r\n        },\r\n\r\n        dataSetsDailyCasesAndTests: {\r\n            labels: props.datumy,\r\n            datasets: [{\r\n                label: 'Prírastok nakazených',\r\n                backgroundColor: \"salmon\",\r\n                data: props.dataSetsDailyCases.datasets[0].data,\r\n            },\r\n            {\r\n                label: 'Prírastok testov',\r\n                backgroundColor: \"#b4f1f1\",\r\n                data: props.dataSetsDailyTests.datasets[0].data,\r\n            }],\r\n        },\r\n\r\n        dataSetsDailyCases: {\r\n            labels: props.datumy,\r\n            datasets: props.dataSetsDailyCases.datasets\r\n        },\r\n\r\n        dataSetsActiveCases: {\r\n            labels: props.datumy,\r\n            datasets: props.dataSetsActiveCases.datasets\r\n        },\r\n\r\n        options: {\r\n            maintainAspectRatio: false,\r\n            responsive: true,\r\n\r\n            legend: {\r\n                position: \"bottom\",\r\n                labels: {\r\n                    padding: 25,\r\n                },\r\n                onClick: function (e, legendItem) {\r\n                    const defaultLegendClickHandler = () => { return Chart.defaults }\r\n                    defaultLegendClickHandler(e, legendItem);\r\n                    // return \r\n                    var index = legendItem.datasetIndex;\r\n                    var ci = this.chart;\r\n                    var meta = ci.getDatasetMeta(index);\r\n                    // See controller.isDatasetVisible comment\r\n                    meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null;\r\n\r\n                    // We hid a dataset ... rerender the chart\r\n                    ci.update();\r\n\r\n                }\r\n            },\r\n            scales: {\r\n                xAxes: [{\r\n                    stacked: true,\r\n                    gridLines: {\r\n                        display: false,\r\n                    }\r\n                }],\r\n                yAxes: [{\r\n                    stacked: true,\r\n                    ticks: {\r\n                        callback: function (value) {\r\n                            return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \")\r\n                        }\r\n                    }\r\n                }]\r\n            },\r\n            tooltips: {\r\n                // mode: 'x',\r\n                mode: 'index',\r\n                position: 'nearest',\r\n                intersect: false,\r\n                callbacks: {\r\n                    label: function (tooltipItem, chart) {\r\n                        var datasetLabel = chart.datasets[tooltipItem.datasetIndex].label || '';\r\n\r\n                        return datasetLabel + \": \" + tooltipItem.yLabel.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \")\r\n                    }\r\n                },\r\n            },\r\n            animation: {\r\n                duration: 500,\r\n                onProgress: function () {\r\n                    if (props.nacitatViacUdajov === false) {\r\n                        var chartInstance = this.chart,\r\n                            ctx = chartInstance.ctx;\r\n                        ctx.textAlign = 'center';\r\n                        ctx.fillStyle = \"rgba(0, 0, 0, .75)\";\r\n                        ctx.textBaseline = 'bottom';\r\n                        if (window.innerWidth > 1220) {\r\n                            ctx.font = \"bold 12px Arial\";\r\n                        }\r\n                        else if (window.innerWidth > 720) {\r\n                            ctx.font = \"bold 11px Arial\";\r\n                        }\r\n                        else {\r\n                            ctx.font = \"bold 6px Arial\";\r\n                        }\r\n                        this.data.datasets.forEach(function (dataset, i) {\r\n                            var meta = chartInstance.controller.getDatasetMeta(i);\r\n                            meta.data.forEach(function (bar, index) {\r\n                                var data = dataset.data[index];\r\n                                if (index % 2 === 0) {\r\n                                    if (dataset.data._chartjs.listeners[0].chart.legend.legendItems[0].hidden === true\r\n                                        || dataset.data._chartjs.listeners[0].chart.legend.legendItems[0].hidden === false) {\r\n                                        if (dataset.data._chartjs.listeners[0].chart.legend.legendItems[0].text === \"Počet mŕtvych\") { //overenie pre posledny graf (tri udaje v objekte)\r\n                                            let pom1 = []\r\n                                            dataset.data._chartjs.listeners[0].chart.legend.legendItems.map((jedno, id) => {\r\n                                                pom1[id] = jedno.hidden\r\n                                                return pom1\r\n                                            })\r\n                                            if (bar._model.datasetLabel === \"Počet mŕtvych\" && pom1[0] === false)\r\n                                                ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n                                            else if (bar._model.datasetLabel === \"Počet vyliečených\" && pom1[1] === false)\r\n                                                ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n                                            else if (bar._model.datasetLabel === \"Počet nakazených\" && pom1[2] === false)\r\n                                                ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n\r\n                                        }\r\n\r\n                                        else if (dataset.data._chartjs.listeners[0].chart.legend.legendItems[0].text === \"Prírastok nakazených\") {\r\n                                            let pom1 = []\r\n                                            dataset.data._chartjs.listeners[0].chart.legend.legendItems.map((jedno, id) => {\r\n                                                pom1[id] = jedno.hidden\r\n                                                return pom1\r\n                                            })\r\n                                            if (!pom1[0])\r\n                                                ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n                                        }\r\n\r\n                                        else\r\n                                            ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    if (data < 100) {\r\n                                        if (dataset.data._chartjs.listeners[0].chart.legend.legendItems[0].hidden === true\r\n                                            || dataset.data._chartjs.listeners[0].chart.legend.legendItems[0].hidden === false) {\r\n\r\n                                            if (dataset.data._chartjs.listeners[0].chart.legend.legendItems[0].text === \"Počet mŕtvych\") { //overenie pre posledny graf (tri udaje v objekte)\r\n                                                let pom1 = []\r\n                                                dataset.data._chartjs.listeners[0].chart.legend.legendItems.map((jedno, id) => {\r\n                                                    pom1[id] = jedno.hidden\r\n                                                    return pom1\r\n                                                })\r\n                                                if (bar._model.datasetLabel === \"Počet mŕtvych\" && pom1[0] === false)\r\n                                                    ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n                                                else if (bar._model.datasetLabel === \"Počet vyliečených\" && pom1[1] === false)\r\n                                                    ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n                                                else if (bar._model.datasetLabel === \"Počet nakazených\" && pom1[2] === false)\r\n                                                    ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n\r\n                                            }\r\n                                            else\r\n                                                ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            })\r\n                        })\r\n                    }\r\n                }\r\n            },\r\n        },\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"mainDivPreGrafy\" >\r\n\r\n                <div className=\"barsGrafy\" >\r\n                    <h1>Denný prírastok nakazených</h1>\r\n                    <Bar\r\n                        data={allData.dataSetsDailyCases}\r\n                        options={allData.options}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"barsGrafy\" >\r\n                    <h1>Celkový počet aktívnych prípadov</h1>\r\n                    <Bar\r\n                        data={allData.dataSetsActiveCases}\r\n                        options={allData.options}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"barsGrafy\"  >\r\n                    <h1>Celkový prírastok nakazených/vyliečených</h1>\r\n\r\n                    <Bar\r\n                        data={allData.dataSetsCases}\r\n                        options={allData.options}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"barsGrafy\" >\r\n                    <h1>Denný prírastok nakazených/testov</h1>\r\n                    <Bar\r\n                        data={allData.dataSetsDailyCasesAndTests}\r\n                        options={allData.options}\r\n                    />\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BarGrafSvk\r\n","function CompareCislo(data, sorting, stlpec) {\r\n\r\n    // const [stlpcek, setStlpcek] = useState(stlpec)\r\n    // if (stlpec === \"females\") {\r\n    //     data.sort(compareNum)\r\n    //     function compareNum(b, a) {\r\n    //         const A = a.females\r\n    //         const B = b.females\r\n    //         if (sorting) {\r\n    //             if (A > B) {\r\n    //                 return 1\r\n    //             } else if (A < B) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //         else {\r\n    //             if (B > A) {\r\n    //                 return 1\r\n    //             } else if (B < A) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //     }\r\n    // }\r\n    // else if (stlpec === \"males\") {\r\n    //     data.sort(compareNum)\r\n    //     function compareNum(b, a) {\r\n    //         const A = a.males\r\n    //         const B = b.males\r\n    //         if (sorting) {\r\n    //             if (A > B) {\r\n    //                 return 1\r\n    //             } else if (A < B) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //         else {\r\n    //             if (B > A) {\r\n    //                 return 1\r\n    //             } else if (B < A) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //     }\r\n    // }\r\n    if (stlpec === \"amountRecovered\") {\r\n        data.sort(compareNum)\r\n        function compareNum(b, a) {\r\n            const A = a.amount.recovered\r\n            const B = b.amount.recovered\r\n            if (!sorting) {\r\n                if (A > B) {\r\n                    return 1\r\n                } else if (A < B) {\r\n                    return -1\r\n                } else return 0;\r\n            }\r\n            else {\r\n                if (B > A) {\r\n                    return 1\r\n                } else if (B < A) {\r\n                    return -1\r\n                } else return 0;\r\n            }\r\n        }\r\n    }\r\n    // else if (stlpec === \"amountDelta\") {\r\n    //     data.sort(compareNum)\r\n    //     function compareNum(b, a) {\r\n    //         const A = a.amount.infected_delta\r\n    //         const B = b.amount.infected_delta\r\n    //         if (sorting) {\r\n    //             if (A > B) {\r\n    //                 return 1\r\n    //             } else if (A < B) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //         else {\r\n    //             if (B > A) {\r\n    //                 return 1\r\n    //             } else if (B < A) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //     }\r\n    // }\r\n    // else {\r\n    //     data.sort(compareNum)\r\n    //     function compareNum(a, b) {\r\n    //         const A = a.amount.infected\r\n    //         const B = b.amount.infected\r\n    //         if (sorting) {\r\n    //             if (A > B) {\r\n    //                 return 1\r\n    //             } else if (A < B) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //         else {\r\n    //             if (B > A) {\r\n    //                 return 1\r\n    //             } else if (B < A) {\r\n    //                 return -1\r\n    //             } else return 0;\r\n    //         }\r\n    //     }\r\n    // }\r\n    else {\r\n        if (JSON.parse(localStorage.getItem(\"zoradenieLocalStorage\")) === \"amountDelta\") {\r\n            data.sort(compareNum)\r\n            function compareNum(a, b) {\r\n                const A = a.amount.infected_delta\r\n                const B = b.amount.infected_delta\r\n                if (!sorting) {\r\n                    if (A > B) {\r\n                        return 1\r\n                    } else if (A < B) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n                else {\r\n                    if (B > A) {\r\n                        return 1\r\n                    } else if (B < A) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n            }\r\n        }\r\n        else if (JSON.parse(localStorage.getItem(\"zoradenieLocalStorage\")) === \"amountInfected\") {\r\n            data.sort(compareNum)\r\n            function compareNum(a, b) {\r\n                const A = a.amount.infected\r\n                const B = b.amount.infected\r\n                if (!sorting) {\r\n                    if (A > B) {\r\n                        return 1\r\n                    } else if (A < B) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n                else {\r\n                    if (B > A) {\r\n                        return 1\r\n                    } else if (B < A) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        else {\r\n            data.sort(compareNum)\r\n            function compareNum(a, b) {\r\n                const A = a.amount.infected\r\n                const B = b.amount.infected\r\n                if (!sorting) {\r\n                    if (A > B) {\r\n                        return 1\r\n                    } else if (A < B) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n                else {\r\n                    if (B > A) {\r\n                        return 1\r\n                    } else if (B < A) {\r\n                        return -1\r\n                    } else return 0;\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n}\r\n\r\nexport default CompareCislo ","\r\nfunction HandleSortObce(stlpec, CompareCislo, data, sorting, setStylesArrows, setSorting) {\r\n    const LOCAL_STORAGE_KEY = 'zoradenieLocalStorage'\r\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(stlpec))\r\n\r\n    if (stlpec === \"amountInfected\") {\r\n        CompareCislo(data, sorting.desc, \"amountInfected\")\r\n        if (sorting.desc)\r\n            setStylesArrows({\r\n                sipkaNakazeni: {\r\n                    transform: 'rotate(0deg)'\r\n                },\r\n                sipkaPoslednyden: {\r\n                    display: 'none',\r\n                }\r\n            })\r\n        else\r\n            setStylesArrows({\r\n                sipkaNakazeni: {\r\n                    transform: 'rotate(180deg)'\r\n                },\r\n                sipkaPoslednyden: {\r\n                    display: 'none',\r\n                }\r\n            })\r\n    }\r\n    if (stlpec === \"amountDelta\") {\r\n        CompareCislo(data, !sorting.desc, \"amountDelta\")\r\n        if (!sorting.desc)\r\n            setStylesArrows({\r\n                sipkaNakazeni: {\r\n                    display: 'none'\r\n                },\r\n                sipkaPoslednyden: {\r\n                    transform: 'rotate(0deg)',\r\n                }\r\n            })\r\n        else\r\n            setStylesArrows({\r\n                sipkaNakazeni: {\r\n                    display: 'none'\r\n                },\r\n                sipkaPoslednyden: {\r\n                    transform: 'rotate(180deg)',\r\n                }\r\n            })\r\n    }\r\n    setSorting({\r\n        desc: !sorting.desc\r\n    })\r\n}\r\n\r\nexport default HandleSortObce\r\n","import React from 'react'\r\nimport { IoMdStarOutline } from 'react-icons/io'\r\nimport { IoMdStar } from 'react-icons/io'\r\n\r\nfunction ActualTabulka({ data, onlyStars, rerender, setRerender }) {\r\n    const LOCAL_STORAGE_KEY_OBCE = 'obceSave'\r\n    function GimmeStar(obec) {\r\n        const local = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY_OBCE))\r\n        if (local && local.includes(obec))\r\n            return <IoMdStar className=\"star\" />\r\n        else\r\n            return <IoMdStarOutline className=\"star\" />\r\n    }\r\n\r\n    function SaveObecStar(obec) {\r\n        let dataObce = []\r\n        if (!localStorage.getItem(LOCAL_STORAGE_KEY_OBCE)) {\r\n            localStorage.setItem(LOCAL_STORAGE_KEY_OBCE, JSON.stringify([obec]))\r\n        }\r\n        else {\r\n\r\n            dataObce = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY_OBCE))\r\n            if (dataObce.includes(obec))\r\n                dataObce = dataObce.filter(item => item !== obec)\r\n            else\r\n                dataObce.push(obec)\r\n            localStorage.setItem(LOCAL_STORAGE_KEY_OBCE, JSON.stringify(dataObce))\r\n        }\r\n        setRerender(!rerender)\r\n    }\r\n\r\n\r\n\r\n    if (onlyStars)\r\n        return (\r\n            data.map((jednaObec, index) =>\r\n                localStorage.getItem(LOCAL_STORAGE_KEY_OBCE) && JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY_OBCE)).includes(jednaObec.title) ?\r\n                    <tr key={index} >\r\n                        <td onClick={() => SaveObecStar(jednaObec.title)}>\r\n                            {GimmeStar(jednaObec.title)}\r\n                            {jednaObec.title === \"Bratislava I\" ? \"Bratislava\" :\r\n                                jednaObec.title === \"Košice I\" ? \"Košice\" : jednaObec.title}</td>\r\n                        <td>{jednaObec.amount.infected}</td>\r\n                        <td style={{ color: 'red' }}>\r\n                            {jednaObec.amount.infected_delta > 0 ?\r\n                                \"+\" + jednaObec.amount.infected_delta\r\n                                : null}\r\n                        </td>\r\n                    </tr>\r\n                    : null\r\n            )\r\n        )\r\n\r\n    else return (\r\n        data.map((jednaObec, index) =>\r\n            jednaObec.title === \"Bratislava II\"\r\n                || jednaObec.title === \"Bratislava III\"\r\n                || jednaObec.title === \"Bratislava IV\"\r\n                || jednaObec.title === \"Bratislava V\"\r\n                || jednaObec.title === \"Košice II\"\r\n                || jednaObec.title === \"Košice III\"\r\n                || jednaObec.title === \"Košice IV\" ? null\r\n                :\r\n                <tr key={index}>\r\n                    <td onClick={() => SaveObecStar(jednaObec.title)}>\r\n                        {GimmeStar(jednaObec.title)}\r\n                        {jednaObec.title === \"Bratislava I\" ? \"Bratislava\" :\r\n                            jednaObec.title === \"Košice I\" ? \"Košice\" : jednaObec.title}</td>\r\n                    <td>{jednaObec.amount.infected}</td>\r\n                    <td style={{ color: 'red' }}>\r\n                        {jednaObec.amount.infected_delta > 0 ?\r\n                            \"+\" + jednaObec.amount.infected_delta\r\n                            : null}\r\n                    </td>\r\n                </tr>\r\n        ))\r\n}\r\n\r\nexport default ActualTabulka\r\n","import React, { useState, useEffect } from 'react'\r\nimport './css/tabulkaMesta.scss'\r\nimport CompareCislo from './CompareCislo'\r\nimport { IoIosArrowDown } from 'react-icons/io';\r\nimport { FaSortAmountDown } from 'react-icons/fa'\r\nimport { IoMdStarOutline } from 'react-icons/io'\r\nimport { IoMdStar } from 'react-icons/io'\r\nimport ZmeniTextTabulkaMesta from './components/ZmenitTextTabulkaMesta'\r\nimport HandleSortObce from './components/HandleSortObce'\r\nimport ActualTabulka from './components/ActualTabulka';\r\nconst LOCAL_STORAGE_KEY = 'zoradenieLocalStorage'\r\nconst LOCAL_STORAGE_KEY_STAR = 'starsTabulkaMesta'\r\n\r\n\r\nfunction TabulkaMesta(props) {\r\n    // const [ShowTableMestaOnClick, setShowTableMestaOnClick] = useState()\r\n    const data = props.tabulkaData\r\n    const [sorting, setSorting] = useState({\r\n        desc: true,\r\n    })\r\n    const [styleArrows, setStylesArrows] = useState({\r\n        sipkaNakazeni: {\r\n            transform: 'rotate(0deg)'\r\n        },\r\n        sipkaPoslednyden: {\r\n            display: 'none',\r\n        }\r\n    })\r\n    // const [ShowHide, setShowHide] = useState({\r\n    //     display: 'none'\r\n    // })\r\n\r\n    const [ShowHide, setShowHide] = useState()\r\n    const [textPreZobrazenieObci, setTextPreZobrazenieObci] = useState({\r\n        boolean: true,\r\n        text: \"Zobraziť údaje o jedntlivých obciach\"\r\n    })\r\n    const [sipkaObce, setSipkaObce] = useState({\r\n        transition: 'all .2s ease-in',\r\n        marginBottom: '-3px',\r\n        marginLeft: '3px',\r\n    })\r\n\r\n    const [rerender, setRerender] = useState(true)\r\n    const [onlyStars, setOnlyStars] = useState(false)\r\n\r\n\r\n    useEffect(() => {\r\n        setShowHide({\r\n            maxHeight: '0px',\r\n        })\r\n        CompareCislo(data, true, JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY)))\r\n        if (JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY)) === \"amountDelta\")\r\n            setStylesArrows({\r\n                sipkaNakazeni: {\r\n                    display: 'none'\r\n                },\r\n                sipkaPoslednyden: {\r\n                    transform: 'rotate(0deg)',\r\n                }\r\n            })\r\n        if (JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY_STAR)))\r\n            setOnlyStars(true)\r\n    }, [data])\r\n\r\n    function searchInputMesta() {\r\n        var input, filter, table, tr, td, i, txtValue;\r\n        input = document.getElementById(\"myInput\");\r\n        filter = input.value.toUpperCase();\r\n        table = document.getElementById(\"myTable\");\r\n        tr = table.getElementsByTagName(\"tr\");\r\n        for (i = 0; i < tr.length; i++) {\r\n            td = tr[i].getElementsByTagName(\"td\")[0];\r\n            if (td) {\r\n                txtValue = td.textContent || td.innerText;\r\n                if (txtValue.toUpperCase().indexOf(filter) > -1) {\r\n                    tr[i].style.display = \"\";\r\n                } else {\r\n                    tr[i].style.display = \"none\";\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function ShowOnlyStars() {\r\n        if (onlyStars)\r\n            return <IoMdStar className=\"star\" />\r\n        else\r\n            return <IoMdStarOutline className=\"star\" />\r\n    }\r\n\r\n    function SetingStarsAndLocalStorage() {\r\n        setOnlyStars(!onlyStars)\r\n        localStorage.setItem(LOCAL_STORAGE_KEY_STAR, !onlyStars)\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"textPreZObrazenieTabulky\" onClick={() => ZmeniTextTabulkaMesta(textPreZobrazenieObci, setTextPreZobrazenieObci, setShowHide, setSipkaObce)}>{textPreZobrazenieObci.text} <IoIosArrowDown style={sipkaObce} /></div>\r\n            <div style={ShowHide} className=\"tabulkaOkrajDivMain\">\r\n\r\n\r\n                <input type=\"text\" id=\"myInput\" onKeyUp={searchInputMesta} placeholder=\"Hľadať..\" className=\"inputSearch\" />\r\n                <div className=\"tabulkaMesta\" >\r\n\r\n                    <table id=\"myTable\" className=\"tabulkaMesta\">\r\n                        <thead>\r\n                            <tr >\r\n                                <th onClick={() => SetingStarsAndLocalStorage()}>Obec {ShowOnlyStars()}</th>\r\n                                <th onClick={() => HandleSortObce('amountInfected', CompareCislo, data, sorting, setStylesArrows, setSorting)} >\r\n                                    Počet nakazených <FaSortAmountDown className=\"sipkaNakazeni\" style={styleArrows.sipkaNakazeni} />\r\n                                </th>\r\n                                <th onClick={() => HandleSortObce('amountDelta', CompareCislo, data, sorting, setStylesArrows, setSorting)} >\r\n                                    Za posledný deň <FaSortAmountDown className=\"sipkaPoslednyden\" style={styleArrows.sipkaPoslednyden} />\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <ActualTabulka data={data} onlyStars={onlyStars} rerender={rerender} setRerender={setRerender} />\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TabulkaMesta\r\n","export default function ZmenitTextTabulkaMesta(textPreZobrazenieObci, setTextPreZobrazenieObci, setShowHide, setSipkaObce) {\r\n    if (textPreZobrazenieObci.boolean) {\r\n        setTextPreZobrazenieObci({\r\n            boolean: !textPreZobrazenieObci.boolean,\r\n            text: \"Schovať údaje o jedntlivých obciach\"\r\n        })\r\n        setShowHide({\r\n            maxHeight: '600px',\r\n        })\r\n        setSipkaObce({\r\n            transform: \"rotateX(180deg)\",\r\n            transition: 'all .2s ease-in',\r\n            marginBottom: '-3px',\r\n            marginLeft: '3px',\r\n        })\r\n    }\r\n    else {\r\n        setTextPreZobrazenieObci({\r\n            boolean: !textPreZobrazenieObci.boolean,\r\n            text: \"Zobraziť údaje o jedntlivých obciach\"\r\n        })\r\n        setShowHide({\r\n            maxHeight: '0px',\r\n\r\n        })\r\n        setSipkaObce({\r\n            transform: \"rotateX(0deg)\",\r\n            transition: 'all .2s ease-in',\r\n            marginBottom: '-3px',\r\n            marginLeft: '3px',\r\n        })\r\n    }\r\n}\r\n\r\n","import React from 'react'\r\nimport FormatNumber from './FormatNumber'\r\n// import coronaIcon from \"../../imgs/coronaIcon.svg\"\r\n// import '../css/dataSlovakia.scss'\r\nimport { GiDeathSkull } from \"react-icons/gi\";\r\nimport { FaPlusCircle } from \"react-icons/fa\";\r\nimport { RiVirusLine } from \"react-icons/ri\";\r\nimport TabulkaMesta from '../TabulkaMesta';\r\n\r\nfunction HandleDataSvk({ mainData }) {\r\n\r\n    // let a = mainData[0].chart[Object.keys(mainData[0].tested_chart).length].recovered\r\n    // let b = mainData[0].chart[Object.keys(mainData[0].tested_chart).length - 1].recovered\r\n    // let c = a - b\r\n    // let newRecovered = 0\r\n    // if (c > 0) {\r\n    //     newRecovered = a - b\r\n    // }\r\n\r\n\r\n    function GetLastData(prop) {\r\n        if (prop === \"tests\") {\r\n            let a = mainData[0].tested_chart[Object.keys(mainData[0].tested_chart).length - 1].tested\r\n            let b = mainData[0].tested_chart[Object.keys(mainData[0].tested_chart).length - 1].infected\r\n            // if ((a - b) > 0)\r\n            return <>Počet negatívnych testov <span className=\"negatTested\">{a - b}</span></>\r\n        }\r\n        else if (prop === \"recovered\") {\r\n            let a = mainData[0].chart[Object.keys(mainData[0].tested_chart).length].recovered\r\n            let b = mainData[0].chart[Object.keys(mainData[0].tested_chart).length - 1].recovered\r\n            // if ((a - b) > 0)\r\n            return <>Počet nových vyliečených <span className=\"newRecovered\">+{a - b}</span></>\r\n        }\r\n        else if (prop === \"deaths\") {\r\n            let a = mainData[0].chart[Object.keys(mainData[0].tested_chart).length].deaths\r\n            let b = mainData[0].chart[Object.keys(mainData[0].tested_chart).length - 1].deaths\r\n            if ((a - b) > 0)\r\n                return <>Počet nových úmrtí <span className=\"newDeaths\">{a - b}</span></>\r\n        }\r\n        else if (prop===\"recovered2\"){\r\n            let a = mainData[0].chart[Object.keys(mainData[0].tested_chart).length].recovered\r\n            let b = mainData[0].chart[Object.keys(mainData[0].tested_chart).length - 1].recovered\r\n            // if ((a - b) > 0)\r\n            return a - b\r\n        }\r\n\r\n    }\r\n\r\n    // function GetTodayDeaths() {\r\n    //     let a = mainData[0].chart[Object.keys(mainData[0].tested_chart).length].deaths\r\n    //     let b = mainData[0].chart[Object.keys(mainData[0].tested_chart).length - 1].deaths\r\n    //     // return \"Počet nových úmrtí: \" + <span>c</span>\r\n    //     // return \"Počet nových úmrtí: \" && <div>c</div>\r\n    //     if ((a - b) > 0)\r\n    //         return (\r\n    //             <>Počet nových úmrtí: <span>{a - b}</span></>\r\n    //         )\r\n    // }\r\n    // a = mainData[0].chart[Object.keys(mainData[0].tested_chart).length].deaths\r\n    // b = mainData[0].chart[Object.keys(mainData[0].tested_chart).length - 1].deaths\r\n    // c = a - b\r\n    // let newDeaths = 0\r\n    // if (c > 0) {\r\n    //     newDeaths = a - b\r\n    // }\r\n\r\n\r\n    const GetTheDay = () => {\r\n        const lastDay = mainData[0].tested_chart[Object.keys(mainData[0].tested_chart).length - 1].day\r\n        if (lastDay === \"Pondelok\")\r\n            return \"pondelok\"\r\n        else if (lastDay === \"Utorok\")\r\n            return \"utorok\"\r\n        else if (lastDay === \"Streda\")\r\n            return \"stredu\"\r\n        else if (lastDay === \"Štvrtok\")\r\n            return \"štvrtok\"\r\n        else if (lastDay === \"Piatok\")\r\n            return \"piatok\"\r\n        else if (lastDay === \"Sobota\")\r\n            return \"sobotu\"\r\n        else return \"nedeľu\"\r\n\r\n    }\r\n\r\n    function numberTrans3(a, b) {\r\n        if (a) {\r\n            let output = b / (a / 100)\r\n            output = b / (a / 100)\r\n            output = output.toFixed(3)\r\n            output = output.toString()\r\n            output = output.replace(\".\", \",\")\r\n            return (\r\n                <div className=\"aktiveNakazenych\">\r\n                    V percentách: <span>{output}%</span>\r\n                </div >\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"cardsDivNew\">\r\n\r\n                <div className=\"cardsNew\">\r\n                    <div className=\"iconInCard cases\">\r\n                        <RiVirusLine />\r\n                    </div>\r\n                    <div className=\"upperText\">Počet nakazených\r\n                    \r\n                    </div>\r\n                    <div className=\"mainText cases\">\r\n                        <FormatNumber prop={mainData[0].cases} />\r\n                        <span className=\"plusInfected\">+{mainData[0].tested_chart[Object.keys(mainData[0].tested_chart).length - 1].infected}</span>\r\n                        </div>\r\n                    <div className=\"underText\">\r\n                        Počet aktívnych prípadov:    <span><FormatNumber prop={mainData[0].active} /></span><br />\r\n                    Počet testov:    <span><FormatNumber prop={mainData[0].tests} /></span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"cardsNew\">\r\n                    <div className=\"iconInCard recovered\">\r\n                        <FaPlusCircle />\r\n                    </div>\r\n                    <div className=\"upperText\">Počet vyliečených</div>\r\n                    <div className=\"mainText recovered\">\r\n                        <FormatNumber prop={mainData[0].recovered} />\r\n                        <span className=\"plusRecovered\">+{GetLastData(\"recovered2\")}</span>\r\n\r\n                    </div>\r\n                    <div className=\"underText\">\r\n                        {numberTrans3(mainData[0].cases, mainData[0].recovered)}\r\n\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <div className=\"cardsNew\">\r\n                    <div className=\"iconInCard deaths\">\r\n                        <GiDeathSkull />\r\n                    </div>\r\n                    <div className=\"upperText\">Počet úmrtí</div>\r\n                    <div className=\"mainText deaths\">\r\n                        <FormatNumber prop={mainData[0].deaths} />\r\n                    </div>\r\n                    <div className=\"underText\">\r\n                        {numberTrans3(mainData[0].cases, mainData[0].deaths)}\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n            <div className=\"lastData\">\r\n                <h1>Údaje za {GetTheDay()}</h1>\r\n                <div className=\"containerFor2DivsFlex\">\r\n                    <div>\r\n                        Počet nových nakazených: <span className=\"newCases\">+{mainData[0].tested_chart[Object.keys(mainData[0].tested_chart).length - 1].infected}</span><br />\r\n                        {GetLastData(\"recovered\")}<br />\r\n\r\n\r\n                        {/* Počet negatívnych testov: */}\r\n                        {/* <span>\r\n                        {mainData[0].tested_chart[Object.keys(mainData[0].tested_chart).length - 1].tested - mainData[0].tested_chart[Object.keys(mainData[0].tested_chart).length - 1].infected}\r\n                    </span><br /> */}\r\n                    </div>\r\n                    <div>\r\n                        Počet vykonaných testov: <span className=\"newTested\">{mainData[0].tested_chart[Object.keys(mainData[0].tested_chart).length - 1].tested}</span> <br />\r\n                        {GetLastData(\"tests\")} <br />\r\n                        {/* Počet nových vyliečených: <span>{GetLastData()}</span> <br /> */}\r\n                        {/* {GetTodayDeaths()} */}\r\n                        {GetLastData(\"deaths\")}\r\n                    </div>\r\n                </div>\r\n                {/* <TabulkaMesta tabulkaData={dataSvk[0].districts} /> */}\r\n                    <TabulkaMesta tabulkaData={mainData[0].districts} />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default HandleDataSvk\r\n","function FuncSetDataForGraph(setDataForChart, datumy, dailyCases, valueActiveCases, valuesCases, valueDeaths, valueRecovered, valueTest, booleanProp) {\r\n    setDataForChart({\r\n        nacitatViacUdajov: booleanProp,\r\n        datumy: datumy,\r\n\r\n        dataSetsCases: {\r\n            datasets: [\r\n                {\r\n                    label: \"Celkový počet nakazených\",\r\n                    data: valuesCases,\r\n                    backgroundColor: \"rgb(249, 70, 68)\",\r\n                    fillColor: 'black',\r\n                    hoverBackgroundColor: 'red',\r\n                }\r\n            ]\r\n        },\r\n\r\n        dataSetsDeaths: {\r\n            datasets: [\r\n                {\r\n                    label: \"Celkový počet úmrtí\",\r\n                    data: valueDeaths,\r\n                    backgroundColor: \"grey\",\r\n                    hoverBackgroundColor: 'grey',\r\n                }\r\n            ]\r\n        },\r\n\r\n        dataSetsRecovered: {\r\n            datasets: [\r\n                {\r\n                    label: \"Celkový počet vyliečených\",\r\n                    data: valueRecovered,\r\n                    backgroundColor: \"green\",\r\n                    hoverBackgroundColor: 'green',\r\n                }\r\n            ]\r\n        },\r\n\r\n        dataSetsActiveCases: {\r\n            datasets: [\r\n                {\r\n                    label: \"Celkový počet aktivnych prípadov\",\r\n                    data: valueActiveCases,\r\n                    backgroundColor: \"#cb464a\",\r\n                    hoverBackgroundColor: '#16b8f3',\r\n                }\r\n            ]\r\n        },\r\n\r\n        dataSetsDailyCases: {\r\n            datasets: [\r\n                {\r\n                    label: \"Denný prírastok nakazených\",\r\n                    data: dailyCases,\r\n                    backgroundColor: \"salmon\",\r\n                    hoverBackgroundColor: 'salmon',\r\n                }\r\n            ]\r\n        },\r\n\r\n        dataSetsDailyTests: {\r\n            datasets: [\r\n                {\r\n                    label: \"Denný prírastok testov\",\r\n                    data: valueTest,\r\n                    backgroundColor: \"cyan\",\r\n                    hoverBackgroundColor: 'cyan',\r\n                }\r\n            ]\r\n        },\r\n\r\n    }\r\n    )\r\n}\r\n\r\nexport default FuncSetDataForGraph\r\n","import React, { useState, useEffect } from 'react'\r\nimport './css/covid.css'\r\n// import TabulkaMesta from \"./TabulkaMesta\"\r\nimport BarGrafSvk from './BarGrafSvk';\r\nimport HandleDataSvk from './components/HandleDataSvk';\r\nimport FuncSetDataForGraph from './components/FuncSetDataForGraph';\r\n// import DataWorld from './components/DataWorld';\r\n\r\nfunction CovidSK() {\r\n    const [dataSvk, setDataSvk] = useState()\r\n    const svk = 'https://mapa.covid.chat/map_data'\r\n    const [dataForChart, setDataForChart] = useState()\r\n    const [mainData, setMainData] = useState()\r\n\r\n    const [loadMoreData, setLoadMoreData] = useState({\r\n        text: 'Zobraziť viac dní',\r\n        bool: false\r\n    })\r\n\r\n    useEffect(() => {\r\n        const LoadDataBegin = async () => {\r\n            const response = await fetch(svk)\r\n            const data = await response.json()\r\n            setMainData([{\r\n                active: data.active,\r\n                cases: data.infected,\r\n                deaths: data.deaths,\r\n                recovered: data.recovered,\r\n                tests: data.tested,\r\n                tested_chart: data.tested_chart,\r\n                chart: data.chart,\r\n                districts: data.districts\r\n            }])\r\n            let datumy = data.chart.map((item, id) => {\r\n                let output = item.date.replace(\"-\", \". \")\r\n                output = output.replace(\"-\", \". \")\r\n                return output\r\n            })\r\n            let dailyCases = data.chart.map((item, id) => {\r\n                return item.infected_daily\r\n            })\r\n\r\n            let valueActiveCases = data.chart.map((item, id) => {\r\n                return item.active\r\n            })\r\n\r\n            let valuesCases = data.chart.map((item) => {\r\n                return item.infected\r\n            })\r\n\r\n            let valueDeaths = data.chart.map((item) => {\r\n                return item.deaths\r\n            })\r\n\r\n            let valueRecovered = data.chart.map((item) => {\r\n                return item.recovered\r\n            })\r\n\r\n            let valueTest = data.chart.map((item) => {\r\n                return item.tested_daily\r\n            })\r\n\r\n            valueTest = valueTest.slice(datumy.length - 32, datumy.length)\r\n            valuesCases = valuesCases.slice(datumy.length - 32, datumy.length)\r\n            valueDeaths = valueDeaths.slice(datumy.length - 32, datumy.length)\r\n            valueRecovered = valueRecovered.slice(datumy.length - 32, datumy.length)\r\n            valueActiveCases = valueActiveCases.slice(datumy.length - 32, datumy.length)\r\n            dailyCases = dailyCases.slice(datumy.length - 32, datumy.length)\r\n            datumy = datumy.slice(datumy.length - 32, datumy.length)\r\n\r\n            if (!dataSvk)\r\n                setDataSvk([data])\r\n\r\n            FuncSetDataForGraph(setDataForChart, datumy, dailyCases, valueActiveCases, valuesCases, valueDeaths, valueRecovered, valueTest, false)\r\n        }\r\n        LoadDataBegin()\r\n    }, [])\r\n\r\n\r\n    const LoadDataOnChange = (booleanProp) => {\r\n\r\n        let datumy = dataSvk[0].chart.map((item, id) => {\r\n            let output = item.date.replace(\"-\", \". \")\r\n            output = output.replace(\"-\", \". \")\r\n            return output\r\n        })\r\n        let dailyCases = dataSvk[0].chart.map((item) => {\r\n            return item.infected_daily\r\n        })\r\n\r\n        let valueActiveCases = dataSvk[0].chart.map((item) => {\r\n            return item.active\r\n        })\r\n\r\n        let valuesCases = dataSvk[0].chart.map((item) => {\r\n            return item.infected\r\n        })\r\n\r\n        let valueDeaths = dataSvk[0].chart.map((item) => {\r\n            return item.deaths\r\n        })\r\n\r\n        let valueRecovered = dataSvk[0].chart.map((item) => {\r\n            return item.recovered\r\n        })\r\n\r\n        let valueTest = dataSvk[0].chart.map((item) => {\r\n            return item.tested_daily\r\n        })\r\n\r\n        if (!booleanProp) {\r\n            dailyCases = dailyCases.slice(datumy.length - 32, datumy.length)\r\n            valueActiveCases = valueActiveCases.slice(datumy.length - 32, datumy.length)\r\n            valuesCases = valuesCases.slice(datumy.length - 32, datumy.length)\r\n            valueDeaths = valueDeaths.slice(datumy.length - 32, datumy.length)\r\n            valueRecovered = valueRecovered.slice(datumy.length - 32, datumy.length)\r\n            valueTest = valueTest.slice(datumy.length - 32, datumy.length)\r\n            datumy = datumy.slice(datumy.length - 32, datumy.length)\r\n        }\r\n\r\n        FuncSetDataForGraph(setDataForChart, datumy, dailyCases, valueActiveCases, valuesCases, valueDeaths, valueRecovered, valueTest, booleanProp)\r\n\r\n    }\r\n\r\n    // const negatTestyMoje = [83, 102, 50, 42, 120, 129, 118, 197, 228]\r\n\r\n    const ZmenitLoadMoreData = () => {\r\n        if (loadMoreData.bool === false) {\r\n            setLoadMoreData({\r\n                text: 'Zobraziť menej dní',\r\n                bool: !loadMoreData.bool\r\n            })\r\n\r\n        }\r\n        else {\r\n            setLoadMoreData({\r\n                text: 'Zobraziť viac dní',\r\n                bool: !loadMoreData.bool\r\n            })\r\n        }\r\n        LoadDataOnChange(!loadMoreData.bool)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"covidApp\">\r\n            {dataSvk && dataForChart && mainData ?\r\n                <>\r\n\r\n                    <HandleDataSvk mainData={mainData} />\r\n                    {/* <DataWorld mainData={mainData} /> */}\r\n\r\n                    {/* <TabulkaMesta tabulkaData={dataSvk[0].districts} /> */}\r\n\r\n                    <div className=\"NacitatViacDniDoGrafov\" onClick={() => ZmenitLoadMoreData()}>\r\n                        {loadMoreData.text}\r\n                    </div>\r\n\r\n                    <div >\r\n                        <BarGrafSvk props={dataForChart} />\r\n                    </div>\r\n\r\n                    <br></br><br></br><br></br><br></br>\r\n                </>\r\n                : ''}\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default CovidSK\r\n","import React from 'react'\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { Chart } from 'react-chartjs-2';\r\nimport './css/cssPreBarGrafy.css'\r\nimport FormatNumberShorter from './components/FormatNumberShorter'\r\n\r\nfunction BarGraf({ props }) {\r\n    const allData = {\r\n        dataSetsCases: {\r\n            labels: props.datumy,\r\n            datasets: [{\r\n                label: 'Počet mŕtvych',\r\n                backgroundColor: \"grey\",\r\n                data: props.dataSetsDeaths.datasets[0].data,\r\n            },\r\n            {\r\n                label: 'Počet vyliečených',\r\n                backgroundColor: \"#57C757\",\r\n                data: props.dataSetsRecovered.datasets[0].data,\r\n            },\r\n            {\r\n                label: 'Počet nakazených',\r\n                backgroundColor: \"#FF4D4D\",\r\n                data: props.dataSetsCases.datasets[0].data,\r\n            }],\r\n        },\r\n\r\n        // dataSetsDeaths: {\r\n        //     labels: props.datumy,\r\n        //     datasets: props.dataSetsDeaths.datasets\r\n        // },\r\n\r\n\r\n        // dataSetsRecovered: {\r\n        //     labels: props.datumy,\r\n        //     datasets: props.dataSetsRecovered.datasets\r\n        // },\r\n\r\n        dataSetsActiveCases: {\r\n            labels: props.datumy,\r\n            datasets: props.dataSetsActiveCases.datasets\r\n        },\r\n\r\n        dataSetsDailyCases: {\r\n            labels: props.datumy.slice(-(props.datumy.length - 1)),\r\n            datasets: props.dataSetsDailyCases.datasets\r\n        },\r\n\r\n        options: {\r\n            maintainAspectRatio: false,\r\n            responsive: true,\r\n\r\n            legend: {\r\n                position: \"bottom\",\r\n                labels: {\r\n                    padding: 25,\r\n                },\r\n                onClick: function (e, legendItem) {\r\n                    const defaultLegendClickHandler = () => { return Chart.defaults }\r\n                    defaultLegendClickHandler(e, legendItem);\r\n                    // return \r\n                    var index = legendItem.datasetIndex;\r\n                    var ci = this.chart;\r\n                    var meta = ci.getDatasetMeta(index);\r\n                    // See controller.isDatasetVisible comment\r\n                    meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null;\r\n\r\n                    // We hid a dataset ... rerender the chart\r\n                    ci.update();\r\n\r\n                }\r\n            },\r\n            scales: {\r\n                xAxes: [{\r\n                    stacked: true,\r\n                    gridLines: {\r\n                        display: false,\r\n                    }\r\n                }],\r\n                yAxes: [{\r\n                    stacked: true,\r\n                    ticks: {\r\n                        callback: function (value) {\r\n                            return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \")\r\n                        }\r\n                    }\r\n                }]\r\n            },\r\n            tooltips: {\r\n                // mode: 'x',\r\n                mode: 'index',\r\n                position: 'nearest',\r\n                intersect: false,\r\n                callbacks: {\r\n                    label: function (tooltipItem, chart) {\r\n                        var datasetLabel = chart.datasets[tooltipItem.datasetIndex].label || '';\r\n\r\n                        return datasetLabel + \": \" + tooltipItem.yLabel.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \")\r\n                    }\r\n                },\r\n            },\r\n            animation: {\r\n                duration: 500,\r\n                onProgress: function () {\r\n                    // console.log(props.nacitatViacUdajov)\r\n                    if (props.nacitatViacUdajov === false) {\r\n                        var chartInstance = this.chart,\r\n                            ctx = chartInstance.ctx;\r\n                        ctx.textAlign = 'center';\r\n                        ctx.fillStyle = \"rgba(0, 0, 0, .75)\";\r\n                        ctx.textBaseline = 'bottom';\r\n                        if (window.innerWidth > 1220) {\r\n                            ctx.font = \"bold 12px Arial\";\r\n                        }\r\n                        else if (window.innerWidth > 720) {\r\n                            ctx.font = \"bold 11px Arial\";\r\n                        }\r\n                        else {\r\n                            ctx.font = \"bold 6px Arial\";\r\n                        }\r\n                        this.data.datasets.forEach(function (dataset, i) {\r\n                            var meta = chartInstance.controller.getDatasetMeta(i);\r\n                            meta.data.forEach(function (bar, index) {\r\n                                var data = dataset.data[index];\r\n                                if (index % 2 === 0) {\r\n                                    if (dataset.data._chartjs.listeners[0].chart.legend.legendItems[0].hidden === true\r\n                                        || dataset.data._chartjs.listeners[0].chart.legend.legendItems[0].hidden === false) {\r\n\r\n                                        if (dataset.data._chartjs.listeners[0].chart.legend.legendItems[0].text === \"Počet mŕtvych\") { //overenie pre posledny graf (tri udaje v objekte)\r\n                                            let pom1 = []\r\n                                            dataset.data._chartjs.listeners[0].chart.legend.legendItems.map((jedno, id) => {\r\n                                                pom1[id] = jedno.hidden\r\n                                                return pom1\r\n                                            })\r\n                                            if (bar._model.datasetLabel === \"Počet mŕtvych\" && pom1[0] === false)\r\n                                                ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n                                            else if (bar._model.datasetLabel === \"Počet vyliečených\" && pom1[1] === false)\r\n                                                ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n                                            else if (bar._model.datasetLabel === \"Počet nakazených\" && pom1[2] === false)\r\n                                                ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n\r\n                                        }\r\n                                        else\r\n                                            ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    if (data < 100) {\r\n                                        if (dataset.data._chartjs.listeners[0].chart.legend.legendItems[0].hidden === true\r\n                                            || dataset.data._chartjs.listeners[0].chart.legend.legendItems[0].hidden === false) {\r\n\r\n                                            if (dataset.data._chartjs.listeners[0].chart.legend.legendItems[0].text === \"Počet mŕtvych\") { //overenie pre posledny graf (tri udaje v objekte)\r\n                                                let pom1 = []\r\n                                                dataset.data._chartjs.listeners[0].chart.legend.legendItems.map((jedno, id) => {\r\n                                                    pom1[id] = jedno.hidden\r\n                                                    return pom1\r\n                                                })\r\n                                                if (bar._model.datasetLabel === \"Počet mŕtvych\" && pom1[0] === false)\r\n                                                    ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n                                                else if (bar._model.datasetLabel === \"Počet vyliečených\" && pom1[1] === false)\r\n                                                    ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n                                                else if (bar._model.datasetLabel === \"Počet nakazených\" && pom1[2] === false)\r\n                                                    ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n\r\n                                            }\r\n                                            else\r\n                                                ctx.fillText(FormatNumberShorter(data), bar._model.x, bar._model.y - 4)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            })\r\n                        })\r\n                    }\r\n                }\r\n            },\r\n        },\r\n    }\r\n\r\n    return (\r\n        <div className=\"mainDivPreGrafy\" >\r\n\r\n\r\n            <div className=\"barsGrafy\" >\r\n                <h1>Denný prírastok nakazených</h1>\r\n                <Bar\r\n                    data={allData.dataSetsDailyCases}\r\n                    options={allData.options}\r\n                />\r\n            </div>\r\n\r\n            <div className=\"barsGrafy\" >\r\n                <h1>Celkový počet aktívnych prípadov</h1>\r\n                <Bar\r\n                    data={allData.dataSetsActiveCases}\r\n                    options={allData.options}\r\n                />\r\n            </div>\r\n\r\n            <div className=\"barsGrafy\"  >\r\n                <h1>Celkový prírastok nakazených/vyliečených</h1>\r\n                <Bar\r\n                    data={allData.dataSetsCases}\r\n                    options={allData.options}\r\n                />\r\n            </div>\r\n\r\n            {/* <div className=\"barsGrafy\" >\r\n                    <h1>Celkový počet vyliečených</h1>\r\n                    <Bar\r\n                        data={allData.dataSetsRecovered}\r\n                        options={allData.options}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"barsGrafy\" >\r\n                    <h1>Celkový počet úmrtí</h1>\r\n                    <Bar\r\n                        data={allData.dataSetsDeaths}\r\n                        options={allData.options}\r\n                    />\r\n                </div> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BarGraf\r\n","import React from 'react'\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport './css/csspreSvk.css'\r\nfunction DougnatChart(props) {\r\n    // console.log(props.dataForGraph[props.dataForGraph.length - 1])\r\n    // console.log(props)\r\n    const data = {\r\n        labels: ['Nakazení', 'Vyliečení', 'Úmrtia'],\r\n        datasets: [{\r\n            label: '# of Votes',\r\n            data: [props.cases, props.recovered, props.deaths],\r\n            backgroundColor: [\r\n                '#f85959',\r\n                '#17b978',\r\n                '#430d27',\r\n            ],\r\n        }]\r\n    }\r\n\r\n\r\n    // const data = {\r\n    //     labels: props.dataForGraph.labels,\r\n    //     datasets: [{\r\n    //         label: '# of Votes',\r\n    //         data: props.dataForGraph.data,\r\n    //         backgroundColor: props.dataForGraph.backgroundColor,\r\n    //     }]\r\n    // }\r\n\r\n    // const data = {\r\n    //     labels: ['Nakazení', 'Vyliečení'],\r\n    //     datasets: [{\r\n    //         label: '# of Votes',\r\n    //         data: [10, 20],\r\n    //         backgroundColor: ['red', 'blue'],\r\n    //     }]\r\n    // }\r\n\r\n\r\n    return (\r\n        props && data ?\r\n            <div>\r\n                {/* {console.log(\"DougnatChart\")} */}\r\n                <div className=\"dougnut\">\r\n                    <Doughnut\r\n                        data={data}\r\n                        height={250}\r\n                        options={{\r\n                            maintainAspectRatio: false,\r\n                            tooltips: {\r\n                                callbacks: {\r\n                                    title: function (tooltipItem, data) {\r\n                                        return data['labels'][tooltipItem[0]['index']];\r\n                                    },\r\n                                    label: function (tooltipItem, data) {\r\n                                        var dataset = data.datasets[0]\r\n                                        // console.log(dataset.data[0])\r\n                                        let totalSpolu = dataset.data[0] + dataset.data[1] + dataset.data[2]\r\n                                        let percent = data['datasets'][0]['data'][tooltipItem['index']] / totalSpolu\r\n                                        // console.log(data['datasets'][0]['data'][tooltipItem['index']])\r\n                                        // console.log(dataset._meta[0].total)\r\n                                        // console.log(dataset.data[tooltipItem['index']])\r\n                                        // if (dataset)\r\n                                        //     var percent = Math.round((dataset.data[tooltipItem['index']] / dataset._meta[0].total) * 100)\r\n                                        return data['datasets'][0]['data'][tooltipItem['index']] + \" (\" + Math.round(percent * 100) + \"%)\";\r\n                                    },\r\n\r\n                                    // label: function (tooltipItem, data) {\r\n                                    //     var percent = Math.round((dataset.data[tooltipItem['index']] / dataset._meta[0].total) * 100)\r\n\r\n                                    //     return data['datasets'][0]['data'][tooltipItem['index']] + \" (\" + percent + \"%)\";\r\n                                    // }\r\n\r\n\r\n                                    // afterLabel: function (tooltipItem, data) {\r\n                                    //     var dataset = data['datasets'][0];\r\n                                    //     var percent = Math.round((dataset['data'][tooltipItem['index']] / dataset[\"_meta\"][0]['total']) * 100)\r\n                                    //     return '(' + percent + '%)';\r\n                                    // },\r\n                                },\r\n                            },\r\n                            centerText: {\r\n                                display: true,\r\n                                text: `90%`\r\n                            },\r\n                            animation: {\r\n                                duration: 2000,\r\n                                easing: 'easeOutQuint',\r\n                                // beforeDraw: function (chart) {\r\n                                //     var width = chart.chart.width,\r\n                                //         height = chart.chart.height,\r\n                                //         ctx = chart.chart.ctx;\r\n                                //     ctx.restore();\r\n                                //     var fontSize = (height / 160).toFixed(2);\r\n                                //     ctx.font = fontSize + \"em sans-serif\";\r\n                                //     ctx.textBaseline = \"top\";\r\n                                //     var text = \"Foo-bar\",\r\n                                //         textX = Math.round((width - ctx.measureText(text).width) / 2),\r\n                                //         textY = height / 2;\r\n                                //     ctx.fillText(text, textX, textY);\r\n                                //     ctx.save();\r\n                                // },\r\n                                // onProgress: function () {\r\n                                //     var chartInstance = this.chart,\r\n                                //         ctx = chartInstance.ctx;\r\n                                //     ctx.textAlign = 'center';\r\n                                //     ctx.fillStyle = \"rgba(0, 0, 0, .75)\";\r\n                                //     ctx.textBaseline = 'bottom';\r\n\r\n\r\n                                //     if (window.innerWidth > 1220) {\r\n                                //         ctx.font = \"bold 12px Arial\";\r\n                                //     }\r\n                                //     else if (window.innerWidth > 720) {\r\n                                //         ctx.font = \"bold 11px Arial\";\r\n                                //     }\r\n                                //     else {\r\n                                //         ctx.font = \"bold 6px Arial\";\r\n                                //     }\r\n                                //     // if (window.innerWidth > 720) {\r\n                                //     this.data.datasets.forEach(function (dataset, i) {\r\n                                //         var meta = chartInstance.controller.getDatasetMeta(i);\r\n                                //         meta.data.forEach(function (bar, index) {\r\n                                //             var data = dataset.data[index];\r\n                                //             console.log(bar._model)\r\n                                //             console.log(index)\r\n                                //             // ctx.fillText(data, bar._model.x + index * 100, bar._model.y - 4);\r\n                                //             ctx.fillText(\"o\", bar._model.x + index * 100, bar._model.y - 4);\r\n                                //             // console.log(data, bar._model.x + 0, bar._model.y - 4)\r\n                                //             // console.log(Math.abs(data) > 999 ? Math.sign(data) * ((Math.abs(data) / 1000).toFixed(1)) + 'k' : Math.sign(data) * Math.abs(data))\r\n                                //         })\r\n                                //     })\r\n                                //     // }\r\n                                // }\r\n                            }\r\n                        }\r\n                        }\r\n                    />\r\n                </div>\r\n\r\n            </div>\r\n            : null\r\n    )\r\n}\r\n\r\nexport default DougnatChart\r\n","import React, { useState, useEffect } from 'react'\r\nimport BarGraf from './BarGraf';\r\nimport DougnatChart from './DougnatChart';\r\nimport GetLastData from './components/GetLastData';\r\n\r\nconst LOCAL_STORAGE_LASTDAY = \"lastdayStorage\"\r\n\r\nfunction GrafyKrajina(props) {\r\n    // console.log(props.location.state)\r\n    const match = props.match\r\n    const [dataforChart, setDataforChart] = useState()\r\n    const [LastDayData, setLastDayData] = useState()\r\n\r\n    const [loadMoreData, setLoadMoreData] = useState({\r\n        text: 'Zobraziť viac dní',\r\n        bool: false\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (!(match.params.id === \"Svet\"))\r\n            GetLastData(props, LOCAL_STORAGE_LASTDAY, setLastDayData)\r\n    }, [props])\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            let response1, data1, datumy, valuesCases, valueRecovered, valueDeaths, dailyCases = [], valueActiveCases = []\r\n            if (match.params.id === \"Svet\") {\r\n                if (loadMoreData.bool === false)\r\n                    response1 = await fetch(`https://disease.sh/v2/historical/All`)\r\n                else\r\n                    response1 = await fetch(`https://disease.sh/v2/historical/All?lastdays=all`)\r\n                data1 = await response1.json()\r\n                datumy = Object.keys(data1.cases)\r\n                valuesCases = Object.values(data1.cases)\r\n                valueRecovered = Object.values(data1.recovered)\r\n                valueDeaths = Object.values(data1.deaths)\r\n\r\n            }\r\n            else {\r\n                if (loadMoreData.bool === false)\r\n                    response1 = await fetch(`https://disease.sh/v2/historical/${match.params.id}`)\r\n                else\r\n                    response1 = await fetch(`https://disease.sh/v2/historical/${match.params.id}/?lastdays=all`)\r\n\r\n                data1 = await response1.json()\r\n                datumy = Object.keys(data1.timeline.cases)\r\n                valuesCases = Object.values(data1.timeline.cases)\r\n\r\n                valueRecovered = Object.values(data1.timeline.recovered)\r\n\r\n                valueDeaths = Object.values(data1.timeline.deaths)\r\n\r\n            }\r\n\r\n            datumy.map((jedenDatum, id) => {\r\n                if (valuesCases[id] > 0) {\r\n                    var d = new Date(jedenDatum);\r\n                    var datestring = d.getDate() + \". \" + (d.getMonth() + 1) + \". \" + d.getFullYear()\r\n                    return datumy[id] = datestring\r\n                }\r\n                else return null\r\n            })\r\n\r\n            valuesCases.map((oneCase, id) => {\r\n                valueActiveCases[id] = oneCase - valueRecovered[id] - valueDeaths[id]\r\n                if (id > 0) {\r\n                    dailyCases[id - 1] = valuesCases[id] - valuesCases[id - 1]\r\n                }\r\n\r\n                return dailyCases\r\n            })\r\n\r\n            valuesCases = valuesCases.filter(jedno => jedno !== 0);\r\n            valueRecovered = valueRecovered.splice(-valuesCases.length)\r\n            valueDeaths = valueDeaths.splice(-valuesCases.length)\r\n            datumy = datumy.splice(-valuesCases.length)\r\n            dailyCases = dailyCases.slice(-valuesCases.length)\r\n            valueActiveCases = valueActiveCases.slice(-valuesCases.length)\r\n\r\n\r\n\r\n\r\n\r\n            if (LastDayData) {\r\n                let pom = Object.keys(data1.timeline.cases)[Object.keys(data1.timeline.cases).length - 1]\r\n                var d = new Date(pom);\r\n                d.setDate(d.getDate() + 1)\r\n                var lastDataDatum = d.getDate() + \". \" + (d.getMonth() + 1) + \". \" + d.getFullYear()\r\n                valuesCases.push(LastDayData.cases)\r\n                dailyCases.push(LastDayData.todayCases)\r\n                valueDeaths.push(LastDayData.deaths)\r\n                datumy.push(lastDataDatum)\r\n                valueRecovered.push(LastDayData.recovered)\r\n                valueActiveCases.push(LastDayData.active)\r\n            }\r\n\r\n            setDataforChart(\r\n                {\r\n                    nacitatViacUdajov: loadMoreData.bool,\r\n                    datumy: datumy,\r\n\r\n                    dataSetsCases: {\r\n                        datasets: [\r\n                            {\r\n                                label: \"Celkový počet nakazených\",\r\n                                data: valuesCases,\r\n                                backgroundColor: \"rgb(249, 70, 68)\",\r\n                                fillColor: 'black',\r\n                                hoverBackgroundColor: 'red',\r\n                            }\r\n                        ]\r\n                    },\r\n\r\n                    dataSetsDeaths: {\r\n                        datasets: [\r\n                            {\r\n                                label: \"Celkový počet úmrtí\",\r\n                                data: valueDeaths,\r\n                                backgroundColor: \"grey\",\r\n                                hoverBackgroundColor: 'grey',\r\n                            }\r\n                        ]\r\n                    },\r\n\r\n                    dataSetsRecovered: {\r\n                        datasets: [\r\n                            {\r\n                                label: \"Celkový počet vyliečených\",\r\n                                data: valueRecovered,\r\n                                backgroundColor: \"green\",\r\n                                hoverBackgroundColor: 'green',\r\n                            }\r\n                        ]\r\n                    },\r\n\r\n                    dataSetsActiveCases: {\r\n                        datasets: [\r\n                            {\r\n                                label: \"Celkový počet aktivnych prípadov\",\r\n                                data: valueActiveCases,\r\n                                backgroundColor: \"blue\",\r\n                                hoverBackgroundColor: 'blue',\r\n                            }\r\n                        ]\r\n                    },\r\n\r\n                    dataSetsDailyCases: {\r\n                        datasets: [\r\n                            {\r\n                                label: \"Denný prírastok nakazených\",\r\n                                data: dailyCases,\r\n                                backgroundColor: \"salmon\",\r\n                                hoverBackgroundColor: 'salmon',\r\n                            }\r\n                        ]\r\n                    },\r\n\r\n                }\r\n            )\r\n        }\r\n\r\n        fetchData()\r\n\r\n    }, [loadMoreData, match.params.id, LastDayData])\r\n\r\n\r\n    const ZmenitLoadMoreData = () => {\r\n        if (loadMoreData.bool === false)\r\n            setLoadMoreData({\r\n                text: 'Zobraziť menej dní',\r\n                bool: !loadMoreData.bool\r\n            })\r\n        else {\r\n            setLoadMoreData({\r\n                text: 'Zobraziť viac dní',\r\n                bool: !loadMoreData.bool\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        dataforChart ?\r\n            <div className=\"testingGrafy\">\r\n                {/* {console.log(\"graffyyyy\")} */}\r\n\r\n                {match.params.id === \"Svet\" ?\r\n                    <h1>Covid-19 vo svete</h1>\r\n\r\n                    :\r\n                    < h1 > Covid - 19 v krajine {match.params.id}</h1>\r\n                }\r\n\r\n                <DougnatChart cases={dataforChart.dataSetsCases.datasets[0].data[dataforChart.dataSetsCases.datasets[0].data.length - 1]}\r\n                    recovered={dataforChart.dataSetsRecovered.datasets[0].data[dataforChart.dataSetsRecovered.datasets[0].data.length - 1]}\r\n                    deaths={dataforChart.dataSetsDeaths.datasets[0].data[dataforChart.dataSetsDeaths.datasets[0].data.length - 1]} />\r\n\r\n                <div className=\"NacitatViacDniDoGrafov\" onClick={ZmenitLoadMoreData}>\r\n                    {loadMoreData.text}\r\n                </div>\r\n\r\n\r\n                <div >\r\n                    <BarGraf props={dataforChart} />\r\n                </div>\r\n            </div >\r\n            : null\r\n    )\r\n}\r\n\r\nexport default GrafyKrajina\r\n","import axios from 'axios'\r\n\r\nexport default function GetLastData(props, LOCAL_STORAGE_LASTDAY, setLastDayData) {\r\n    var returnThis\r\n\r\n    if (props.location.state) {\r\n        returnThis = props.location.state[0]\r\n        localStorage.setItem(LOCAL_STORAGE_LASTDAY, JSON.stringify(props.location.state[0]))\r\n        setLastDayData(returnThis)\r\n        console.log(\"this is good\")\r\n\r\n        return returnThis\r\n    }\r\n    else if (localStorage.getItem(LOCAL_STORAGE_LASTDAY)) {\r\n        returnThis = JSON.parse(localStorage.getItem(LOCAL_STORAGE_LASTDAY))\r\n        setLastDayData(returnThis)\r\n\r\n        return returnThis\r\n    }\r\n\r\n    else {\r\n        var pom = []\r\n        axios.get('https://disease.sh/v2/countries')\r\n            .then(response => {\r\n                const allowed = [\"country\", \"active\", \"todayCases\", \"cases\", \"deaths\", \"recovered\"]\r\n                response.data.map((udaj, id) => {\r\n                    Object.keys(udaj)\r\n                        .filter(key => allowed.includes(key))\r\n                        .reduce((obj, key) => {\r\n                            obj[key] = udaj[key];\r\n                            pom[id] = obj\r\n                            return obj;\r\n                        }, {})\r\n                    return null\r\n                })\r\n                pom = pom.filter(function (e) {\r\n                    return e.country === props.match.params.id\r\n                })\r\n                localStorage.setItem(LOCAL_STORAGE_LASTDAY, JSON.stringify(pom[0]))\r\n                setLastDayData(pom[0])\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n    }\r\n}\r\n\r\n","import React from 'react';\nimport './App.css';\nimport Nav from './Nav';\n\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom'\nimport CovidApp from './Covid/CovidApp';\n// const CovidApp = React.lazy(() => import('./Covid/CovidApp'));\n\nimport CovidSK from './Covid/CovidSK';\nimport GrafyKrajina from './Covid/GrafyKrajina';\n// const CovidSK = React.lazy(() => import('./Covid/CovidSK'));\n\n// import CovidApp from './Covid/CovidApp';\n// import CovidSK from './Covid/CovidSK';\n// import TodoApp from './Todo/TodoApp';\n// import { polyfill } from 'es6-promise'; polyfill();\n// require('es6-promise').polyfill();\n// require('isomorphic-fetch');\n\n\nfunction App() {\n  return (\n    <Router basename=\"/\">\n      <div className=\"App\">\n        <Nav />\n        <Switch>\n          <Route path=\"/\" component={CovidApp} exact />\n          <Route path=\"/Covid/CovidSK\" component={CovidSK} />\n          <Route path=\"/Covid/CovidApp\" exact component={CovidApp} />\n          <Route path=\"/Covid/CovidApp/:id\" component={GrafyKrajina} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n","module.exports = __webpack_public_path__ + \"static/media/earth.cdc4522b.svg\";","module.exports = __webpack_public_path__ + \"static/media/slovakiaIcon.a29682dd.svg\";"],"sourceRoot":""}